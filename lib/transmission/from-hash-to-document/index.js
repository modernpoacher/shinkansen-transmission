"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.toNull=toNull;exports.toBoolean=toBoolean;exports.toString=toString;exports.toNumber=toNumber;exports.transformObjectSchema=transformObjectSchema;exports.transformArraySchema=transformArraySchema;exports.transformNull=transformNull;exports.transformBoolean=transformBoolean;exports.transformObject=transformObject;exports.transformArray=transformArray;exports.transformNumber=transformNumber;exports.transformString=transformString;exports.default=transform;exports.transformArraySchemaString=exports.transformArraySchemaNumber=exports.transformArraySchemaArray=exports.transformArraySchemaObject=exports.transformArraySchemaBoolean=exports.transformArraySchemaNull=exports.transformObjectSchemaString=exports.transformObjectSchemaNumber=exports.transformObjectSchemaArray=exports.transformObjectSchemaObject=exports.transformObjectSchemaBoolean=exports.transformObjectSchemaNull=exports.transformValue=void 0;var _debug=_interopRequireDefault(require("debug"));var _common=require("../common");function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}const{env:{DEBUG='shinkansen-transmission:*'}}=process;_debug.default.enable(DEBUG);const log=(0,_debug.default)('shinkansen-transmission:from-hash-to-document:log');const error=(0,_debug.default)('shinkansen-transmission:from-hash-to-document:error');function toNull(v){if(v===null||v==='null')return null;throw new Error('Invalid `null`');}function toBoolean(v){if(typeof v==='boolean')return v;if(v==='true')return true;if(v==='false')return false;throw new Error('Invalid `boolean`');}function toString(v){if(typeof v==='string')return v;if(typeof v==='number')return String(v);return JSON.stringify(v);}function toNumber(v){if(typeof v==='number')return v;if(v){const n=Number(v);if(!isNaN(n))return n;}throw new Error('Invalid `number`');}const transformValue=schema=>(0,_common.isObject)(schema)?(0,_common.isConstValue)(schema)?(0,_common.toConstValue)(schema):(0,_common.isDefaultValue)(schema)?(0,_common.toDefaultValue)(schema):schema:schema;exports.transformValue=transformValue;function transformValueFor(value,items=[]){try{const i=toNumber(value);if(Reflect.has(items,i)){const v=Reflect.get(items,i);return transformValue(v);}}catch({message='No error message defined'}){error(message);}return value;}const handleError=({message='No error message defined'})=>error(message);const transformObjectSchemaNull=(schema,values,{uri:parentUri,key:fieldKey},uri=(0,_common.getUri)(parentUri,fieldKey))=>transformNull(schema,values,parentUri,uri);exports.transformObjectSchemaNull=transformObjectSchemaNull;const transformObjectSchemaBoolean=(schema,values,{uri:parentUri,key:fieldKey},uri=(0,_common.getUri)(parentUri,fieldKey))=>transformBoolean(schema,values,parentUri,uri);exports.transformObjectSchemaBoolean=transformObjectSchemaBoolean;const transformObjectSchemaObject=(schema,values,{uri:parentUri,key:fieldKey},uri=(0,_common.getUri)(parentUri,fieldKey))=>transformObject(schema,values,uri,uri);exports.transformObjectSchemaObject=transformObjectSchemaObject;const transformObjectSchemaArray=(schema,values,{uri:parentUri,key:fieldKey},uri=(0,_common.getUri)(parentUri,fieldKey))=>transformArray(schema,values,uri,uri);exports.transformObjectSchemaArray=transformObjectSchemaArray;const transformObjectSchemaNumber=(schema,values,{uri:parentUri,key:fieldKey},uri=(0,_common.getUri)(parentUri,fieldKey))=>transformNumber(schema,values,parentUri,uri);exports.transformObjectSchemaNumber=transformObjectSchemaNumber;const transformObjectSchemaString=(schema,values,{uri:parentUri,key:fieldKey},uri=(0,_common.getUri)(parentUri,fieldKey))=>transformString(schema,values,parentUri,uri);exports.transformObjectSchemaString=transformObjectSchemaString;function transformObjectSchema(schema={},values={},params={}){const{type}=schema;switch(type){case'null':return transformObjectSchemaNull(schema,values,params);case'boolean':return transformObjectSchemaBoolean(schema,values,params);case'object':return transformObjectSchemaObject(schema,values,params);case'array':return transformObjectSchemaArray(schema,values,params);case'number':return transformObjectSchemaNumber(schema,values,params);case'string':return transformObjectSchemaString(schema,values,params);default:throw new Error('Schema does not conform to Instance Data Model, https://json-schema.org/draft/2019-09/json-schema-core.html#rfc.section.4.2.1');}}const transformArraySchemaNull=(schema,values,{uri:parentUri,index:arrayIndex},uri=(0,_common.getUri)(parentUri,arrayIndex))=>transformNull(schema,values,parentUri,uri);exports.transformArraySchemaNull=transformArraySchemaNull;const transformArraySchemaBoolean=(schema,values,{uri:parentUri,index:arrayIndex},uri=(0,_common.getUri)(parentUri,arrayIndex))=>transformBoolean(schema,values,parentUri,uri);exports.transformArraySchemaBoolean=transformArraySchemaBoolean;const transformArraySchemaObject=(schema,values,{uri:parentUri,index:arrayIndex},uri=(0,_common.getUri)(parentUri,arrayIndex))=>transformObject(schema,values,uri,uri);exports.transformArraySchemaObject=transformArraySchemaObject;const transformArraySchemaArray=(schema,values,{uri:parentUri,index:arrayIndex},uri=(0,_common.getUri)(parentUri,arrayIndex))=>transformArray(schema,values,uri,uri);exports.transformArraySchemaArray=transformArraySchemaArray;const transformArraySchemaNumber=(schema,values,{uri:parentUri,index:arrayIndex},uri=(0,_common.getUri)(parentUri,arrayIndex))=>transformNumber(schema,values,parentUri,uri);exports.transformArraySchemaNumber=transformArraySchemaNumber;const transformArraySchemaString=(schema,values,{uri:parentUri,index:arrayIndex},uri=(0,_common.getUri)(parentUri,arrayIndex))=>transformString(schema,values,parentUri,uri);exports.transformArraySchemaString=transformArraySchemaString;function transformArraySchema(schema={},values={},params={}){const{type}=schema;switch(type){case'null':return transformArraySchemaNull(schema,values,params);case'boolean':return transformArraySchemaBoolean(schema,values,params);case'object':return transformArraySchemaObject(schema,values,params);case'array':return transformArraySchemaArray(schema,values,params);case'number':return transformArraySchemaNumber(schema,values,params);case'string':return transformArraySchemaString(schema,values,params);default:throw new Error('Schema does not conform to Instance Data Model, https://json-schema.org/draft/2019-09/json-schema-core.html#rfc.section.4.2.1');}}function transformNull(schema,values,parentUri,uri){if(Reflect.has(values,uri)){const value=Reflect.get(values,uri);if((0,_common.hasEnum)(schema)){const items=(0,_common.getEnum)(schema);return transformValueFor(value,items);}else{if((0,_common.hasAnyOf)(schema)){const items=(0,_common.getAnyOf)(schema);return transformValueFor(value,items);}else{if((0,_common.hasOneOf)(schema)){const items=(0,_common.getOneOf)(schema);return transformValueFor(value,items);}}}try{return toNull(value);}catch(e){handleError(e);}return value;}}function transformBoolean(schema,values,parentUri,uri){if(Reflect.has(values,uri)){const value=Reflect.get(values,uri);if((0,_common.hasEnum)(schema)){const items=(0,_common.getEnum)(schema);return transformValueFor(value,items);}else{if((0,_common.hasAnyOf)(schema)){const items=(0,_common.getAnyOf)(schema);return transformValueFor(value,items);}else{if((0,_common.hasOneOf)(schema)){const items=(0,_common.getOneOf)(schema);return transformValueFor(value,items);}}}try{return toBoolean(value);}catch(e){handleError(e);}return value;}}function transformObject({properties={}},values,parentUri,uri){return Object.entries(properties).reduce((accumulator,[key,schema])=>({...accumulator,[key]:transformObjectSchema(schema,values,{uri:parentUri,key})}),{});}function transformArray({items=[]},values,parentUri,uri){return Object.keys(values).filter(key=>key.startsWith(uri)).reduce((accumulator,key)=>{const value=uri.endsWith('/')?key.slice(uri.length):key.slice(uri.length+1);const index=Number(value.includes('/')?value.slice(0,value.indexOf('/')):value);if(!isNaN(index)){const schema=Array.isArray(items)?items[index]:items;accumulator[index]=transformArraySchema(schema,values,{uri:parentUri,index});}return accumulator;},[]);}function transformNumber(schema,values,parentUri,uri){if(Reflect.has(values,uri)){const value=Reflect.get(values,uri);if((0,_common.hasEnum)(schema)){const items=(0,_common.getEnum)(schema);return transformValueFor(value,items);}else{if((0,_common.hasAnyOf)(schema)){const items=(0,_common.getAnyOf)(schema);return transformValueFor(value,items);}else{if((0,_common.hasOneOf)(schema)){const items=(0,_common.getOneOf)(schema);return transformValueFor(value,items);}}}try{return toNumber(value);}catch(e){handleError(e);}return value;}}function transformString(schema,values,parentUri,uri){if(Reflect.has(values,uri)){const value=Reflect.get(values,uri);if((0,_common.hasEnum)(schema)){const items=(0,_common.getEnum)(schema);return transformValueFor(value,items);}else{if((0,_common.hasAnyOf)(schema)){const items=(0,_common.getAnyOf)(schema);return transformValueFor(value,items);}else{if((0,_common.hasOneOf)(schema)){const items=(0,_common.getOneOf)(schema);return transformValueFor(value,items);}}}try{return toString(value);}catch(e){handleError(e);}return value;}}function transform(rootSchema={},values={},parentUri='#',uri=(0,_common.getUri)(parentUri)){log('fromHashToDocument');const{type}=rootSchema;switch(type){case'null':return transformNull(rootSchema,values,parentUri,uri);case'boolean':return transformBoolean(rootSchema,values,parentUri,uri);case'object':return transformObject(rootSchema,values,parentUri,uri);case'array':return transformArray(rootSchema,values,parentUri,uri);case'number':return transformNumber(rootSchema,values,parentUri,uri);case'string':return transformString(rootSchema,values,parentUri,uri);default:throw new Error('Schema does not conform to Instance Data Model, https://json-schema.org/draft/2019-09/json-schema-core.html#rfc.section.4.2.1');}}