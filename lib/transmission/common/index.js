"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.getDefaultValue=getDefaultValue;exports.getValue=getValue;exports.getSelectedIndex=getSelectedIndex;exports.getMetaProps=getMetaProps;exports.getElementsTitleProps=getElementsTitleProps;exports.getElementsDescriptionProps=getElementsDescriptionProps;exports.getElementsFieldProps=getElementsFieldProps;exports.getElementsFieldValue=getElementsFieldValue;exports.getMin=getMin;exports.getMax=getMax;exports.getMinLength=getMinLength;exports.getMaxLength=getMaxLength;exports.getMinItems=getMinItems;exports.getMaxItems=getMaxItems;exports.getHasUniqueItems=getHasUniqueItems;exports.getMinContains=getMinContains;exports.getMaxContains=getMaxContains;exports.getMinProperties=getMinProperties;exports.getMaxProperties=getMaxProperties;exports.getIsExclusiveMin=getIsExclusiveMin;exports.getIsExclusiveMax=getIsExclusiveMax;exports.getStep=getStep;exports.getPattern=exports.getUri=exports.getAllOf=exports.hasAllOf=exports.getOneOf=exports.hasOneOf=exports.getAnyOf=exports.hasAnyOf=exports.getConst=exports.hasConst=exports.getEnum=exports.hasEnum=exports.getIsWriteOnly=exports.getIsReadOnly=exports.getDescription=exports.getTitle=exports.isDefaultValue=exports.toDefaultValue=exports.isConstValue=exports.toConstValue=exports.isArray=exports.isObject=void 0;const isObject=v=>(v||false)instanceof Object&&!isArray(v);exports.isObject=isObject;const isArray=v=>Array.isArray(v);exports.isArray=isArray;const toConstValue=({const:value}={})=>value;exports.toConstValue=toConstValue;const isConstValue=(schema={})=>Reflect.has(schema,'const');exports.isConstValue=isConstValue;const toDefaultValue=({default:value}={})=>value;exports.toDefaultValue=toDefaultValue;const isDefaultValue=(schema={})=>Reflect.has(schema,'default');exports.isDefaultValue=isDefaultValue;const getTitle=({title}={})=>title?{title}:{};exports.getTitle=getTitle;const getDescription=({description}={})=>description?{description}:{};exports.getDescription=getDescription;const getIsReadOnly=({readOnly=false}={})=>readOnly?{readOnly}:{};exports.getIsReadOnly=getIsReadOnly;const getIsWriteOnly=({writeOnly=false}={})=>writeOnly?{writeOnly}:{};exports.getIsWriteOnly=getIsWriteOnly;function getDefaultValue(schema={}){if(Reflect.has(schema,'default')){const defaultValue=Reflect.get(schema,'default');return{defaultValue:String(defaultValue)};}return{};}function getValue(values={},uri='#'){if(Reflect.has(values,uri)){const value=Reflect.get(values,uri);return{value:String(value)};}return{};}function getSelectedIndex(values={},uri='#'){if(Reflect.has(values,uri)){const index=Reflect.get(values,uri);const value=Number(index);return isNaN(value)?{}:{selectedIndex:value};}return{};}function getMetaProps(params={},uri='#'){let meta;if(Reflect.has(params,uri)){({meta}=Reflect.get(params,uri));}return meta||{};}function getElementsTitleProps(params={},uri='#'){let title;if(Reflect.has(params,uri)){({elements:{title}={}}=Reflect.get(params,uri));}return title||{};}function getElementsDescriptionProps(params={},uri='#'){let description;if(Reflect.has(params,uri)){({elements:{description}={}}=Reflect.get(params,uri));}return description||{};}function getElementsFieldProps(params={},uri='#'){let field;if(Reflect.has(params,uri)){({elements:{field}={}}=Reflect.get(params,uri));}return field||{};}function getElementsFieldValue(values={},uri='#',schema){if(Reflect.has(values,uri)){const value=Reflect.get(values,uri);return{value:String(value)};}else{if(Reflect.has(schema,'default')){const defaultValue=Reflect.get(schema,'default');return{value:String(defaultValue)};}}return{};}const hasEnum=(schema={})=>Reflect.has(schema,'enum');exports.hasEnum=hasEnum;const getEnum=(schema={})=>Reflect.get(schema,'enum');exports.getEnum=getEnum;const hasConst=(schema={})=>Reflect.has(schema,'const');exports.hasConst=hasConst;const getConst=(schema={})=>Reflect.get(schema,'const');exports.getConst=getConst;const hasAnyOf=(schema={})=>Reflect.has(schema,'anyOf');exports.hasAnyOf=hasAnyOf;const getAnyOf=(schema={})=>Reflect.get(schema,'anyOf');exports.getAnyOf=getAnyOf;const hasOneOf=(schema={})=>Reflect.has(schema,'oneOf');exports.hasOneOf=hasOneOf;const getOneOf=(schema={})=>Reflect.get(schema,'oneOf');exports.getOneOf=getOneOf;const hasAllOf=(schema={})=>Reflect.has(schema,'allOf');exports.hasAllOf=hasAllOf;const getAllOf=(schema={})=>Reflect.get(schema,'allOf');exports.getAllOf=getAllOf;const getUri=(uri='',resource='')=>uri.concat('/').concat(resource);exports.getUri=getUri;function getMin({minimum}={}){const value=Number(minimum);return isNaN(value)?{}:{min:value};}function getMax({maximum}={}){const value=Number(maximum);return isNaN(value)?{}:{max:value};}function getMinLength({minLength}={}){const value=Number(minLength);return isNaN(value)?{}:{minLength:value};}function getMaxLength({maxLength}={}){const value=Number(maxLength);return isNaN(value)?{}:{maxLength:value};}function getMinItems({minItems}={}){const value=Number(minItems);return isNaN(value)?{}:{minItems:value};}function getMaxItems({maxItems}={}){const value=Number(maxItems);return isNaN(value)?{}:{maxItems:value};}function getHasUniqueItems(schema={}){if(Reflect.has(schema,'uniqueItems')){const value=Reflect.get(schema,'uniqueItems');return typeof value==='boolean'?{hasUniqueItems:value}:{};}return{};}function getMinContains({minContains}={}){const value=Number(minContains);return isNaN(value)?{}:{minContains:value};}function getMaxContains({maxContains}={}){const value=Number(maxContains);return isNaN(value)?{}:{maxContains:value};}function getMinProperties({minProperties}={}){const value=Number(minProperties);return isNaN(value)?{}:{minProperties:value};}function getMaxProperties({maxProperties}={}){const value=Number(maxProperties);return isNaN(value)?{}:{maxProperties:value};}function getIsExclusiveMin(schema={}){if(Reflect.has(schema,'exclusiveMinimum')){const value=Reflect.get(schema,'exclusiveMinimum');return typeof value==='boolean'?{isExclusiveMin:value}:{};}return{};}function getIsExclusiveMax(schema={}){if(Reflect.has(schema,'exclusiveMaximum')){const value=Reflect.get(schema,'exclusiveMaximum');return typeof value==='boolean'?{isExclusiveMax:value}:{};}return{};}const getPattern=({pattern}={})=>pattern?{pattern}:{};exports.getPattern=getPattern;function getStep({multipleOf}={}){const value=Number(multipleOf);return isNaN(value)?{}:{step:value};}