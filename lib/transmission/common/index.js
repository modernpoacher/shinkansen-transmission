"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.getStep=exports.getPattern=exports.getIsExclusiveMax=exports.getIsExclusiveMin=exports.getMaxProperties=exports.getMinProperties=exports.getMaxContains=exports.getMinContains=exports.getHasUniqueItems=exports.getMaxItems=exports.getMinItems=exports.getMaxLength=exports.getMinLength=exports.getMax=exports.getMin=exports.getUri=exports.getAnyOf=exports.hasAnyOf=exports.getOneOf=exports.hasOneOf=exports.getEnum=exports.hasEnum=exports.getElementsFieldValue=exports.getElementsFieldProps=exports.getElementsDescriptionProps=exports.getElementsTitleProps=exports.getMetaProps=exports.getSelectedAnyOf=exports.getSelectedOneOf=exports.getSelectedIndex=exports.getValue=exports.getDefaultValue=exports.getIsWriteOnly=exports.getIsReadOnly=exports.getDescription=exports.getTitle=void 0;const getTitle=({title}={})=>title?{title}:{};exports.getTitle=getTitle;const getDescription=({description}={})=>description?{description}:{};exports.getDescription=getDescription;const getIsReadOnly=({readOnly=false}={})=>readOnly?{readOnly}:{};exports.getIsReadOnly=getIsReadOnly;const getIsWriteOnly=({writeOnly=false}={})=>writeOnly?{writeOnly}:{};exports.getIsWriteOnly=getIsWriteOnly;const getDefaultValue=(schema={})=>{if(Reflect.has(schema,'default')){const defaultValue=Reflect.get(schema,'default');return{defaultValue:String(defaultValue)};}return{};};exports.getDefaultValue=getDefaultValue;const getValue=(values={},uri='#')=>{if(Reflect.has(values,uri)){const value=Reflect.get(values,uri);return{value:String(value)};}return{};};exports.getValue=getValue;const getSelectedIndex=(values={},uri='#')=>{if(Reflect.has(values,uri)){const index=Reflect.get(values,uri);const value=Number(index);return isNaN(value)?{}:{selectedIndex:value};}return{};};exports.getSelectedIndex=getSelectedIndex;const getSelectedOneOf=(values={},uri='#')=>{if(Reflect.has(values,uri)){const selected=Reflect.get(values,uri);return{selected:String(selected)};}return{};};exports.getSelectedOneOf=getSelectedOneOf;const getSelectedAnyOf=(values={},uri='#')=>{const selected=Object.entries(values).reduce((accumulator,[key,value])=>/^\d$.*/.test(key.slice(uri.length))?accumulator.concat(String(value)):accumulator,[]);return selected.length?{selected}:{};};exports.getSelectedAnyOf=getSelectedAnyOf;const getMetaProps=(params={},uri='#')=>{let meta;if(Reflect.has(params,uri)){({meta}=Reflect.get(params,uri));}return meta||{};};exports.getMetaProps=getMetaProps;const getElementsTitleProps=(params={},uri='#')=>{let title;if(Reflect.has(params,uri)){({elements:{title}={}}=Reflect.get(params,uri));}return title||{};};exports.getElementsTitleProps=getElementsTitleProps;const getElementsDescriptionProps=(params={},uri='#')=>{let description;if(Reflect.has(params,uri)){({elements:{description}={}}=Reflect.get(params,uri));}return description||{};};exports.getElementsDescriptionProps=getElementsDescriptionProps;const getElementsFieldProps=(params={},uri='#')=>{let field;if(Reflect.has(params,uri)){({elements:{field}={}}=Reflect.get(params,uri));}return field||{};};exports.getElementsFieldProps=getElementsFieldProps;const getElementsFieldValue=(values={},uri='#',schema)=>{if(Reflect.has(values,uri)){const value=Reflect.get(values,uri);return{value:String(value)};}else{if(Reflect.has(schema,'default')){const defaultValue=Reflect.get(schema,'default');return{value:String(defaultValue)};}}return{};};exports.getElementsFieldValue=getElementsFieldValue;const hasEnum=(schema={})=>{console.log('hasEnum',schema);return Reflect.has(schema,'enum');};exports.hasEnum=hasEnum;const getEnum=(schema={})=>Reflect.get(schema,'enum');exports.getEnum=getEnum;const hasOneOf=(schema={})=>Reflect.has(schema,'oneOf');exports.hasOneOf=hasOneOf;const getOneOf=(schema={})=>Reflect.get(schema,'oneOf');exports.getOneOf=getOneOf;const hasAnyOf=(schema={})=>Reflect.has(schema,'anyOf');exports.hasAnyOf=hasAnyOf;const getAnyOf=(schema={})=>Reflect.get(schema,'anyOf');exports.getAnyOf=getAnyOf;const getUri=(uri='',resource='')=>uri.concat('/').concat(resource);exports.getUri=getUri;const getMin=({minimum}={})=>{const value=Number(minimum);return isNaN(value)?{}:{min:value};};exports.getMin=getMin;const getMax=({maximum}={})=>{const value=Number(maximum);return isNaN(value)?{}:{max:value};};exports.getMax=getMax;const getMinLength=({minLength}={})=>{const value=Number(minLength);return isNaN(value)?{}:{minLength:value};};exports.getMinLength=getMinLength;const getMaxLength=({maxLength}={})=>{const value=Number(maxLength);return isNaN(value)?{}:{maxLength:value};};exports.getMaxLength=getMaxLength;const getMinItems=({minItems}={})=>{const value=Number(minItems);return isNaN(value)?{}:{minItems:value};};exports.getMinItems=getMinItems;const getMaxItems=({maxItems}={})=>{const value=Number(maxItems);return isNaN(value)?{}:{maxItems:value};};exports.getMaxItems=getMaxItems;const getHasUniqueItems=(schema={})=>{if(Reflect.has(schema,'uniqueItems')){const value=Reflect.get(schema,'uniqueItems');return typeof value==='boolean'?{hasUniqueItems:value}:{};}return{};};exports.getHasUniqueItems=getHasUniqueItems;const getMinContains=({minContains}={})=>{const value=Number(minContains);return isNaN(value)?{}:{minContains:value};};exports.getMinContains=getMinContains;const getMaxContains=({maxContains}={})=>{const value=Number(maxContains);return isNaN(value)?{}:{maxContains:value};};exports.getMaxContains=getMaxContains;const getMinProperties=({minProperties}={})=>{const value=Number(minProperties);return isNaN(value)?{}:{minProperties:value};};exports.getMinProperties=getMinProperties;const getMaxProperties=({maxProperties}={})=>{const value=Number(maxProperties);return isNaN(value)?{}:{maxProperties:value};};exports.getMaxProperties=getMaxProperties;const getIsExclusiveMin=(schema={})=>{if(Reflect.has(schema,'exclusiveMinimum')){const value=Reflect.get(schema,'exclusiveMinimum');return typeof value==='boolean'?{isExclusiveMin:value}:{};}return{};};exports.getIsExclusiveMin=getIsExclusiveMin;const getIsExclusiveMax=(schema={})=>{if(Reflect.has(schema,'exclusiveMaximum')){const value=Reflect.get(schema,'exclusiveMaximum');return typeof value==='boolean'?{isExclusiveMax:value}:{};}return{};};exports.getIsExclusiveMax=getIsExclusiveMax;const getPattern=({pattern}={})=>pattern?{pattern}:{};exports.getPattern=getPattern;const getStep=({multipleOf}={})=>{const value=Number(multipleOf);return isNaN(value)?{}:{step:value};};exports.getStep=getStep;