"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.transformObjectSchemaNull=transformObjectSchemaNull;exports.transformObjectSchemaBoolean=transformObjectSchemaBoolean;exports.transformObjectSchemaObject=transformObjectSchemaObject;exports.transformObjectSchemaArray=transformObjectSchemaArray;exports.transformObjectSchemaString=transformObjectSchemaString;exports.transformObjectSchemaNumber=transformObjectSchemaNumber;exports.transformObjectSchema=transformObjectSchema;exports.transformArraySchemaNull=transformArraySchemaNull;exports.transformArraySchemaBoolean=transformArraySchemaBoolean;exports.transformArraySchemaObject=transformArraySchemaObject;exports.transformArraySchemaArray=transformArraySchemaArray;exports.transformArraySchemaString=transformArraySchemaString;exports.transformArraySchemaNumber=transformArraySchemaNumber;exports.transformArraySchema=transformArraySchema;exports.transformNull=transformNull;exports.transformBoolean=transformBoolean;exports.transformObject=transformObject;exports.transformArray=transformArray;exports.transformString=transformString;exports.transformNumber=transformNumber;exports.default=transform;var _common=require("../common");function transformObjectSchemaNull(schema,rootSchema,values,params){const{required:isRequired=false,uri:parentUri,key:fieldKey}=params;const uri=(0,_common.getUri)(parentUri,fieldKey);let meta;let elements;if((0,_common.hasEnum)(schema)){const selectedIndex=(0,_common.getSelectedIndex)(values,uri);meta={uri,name:fieldKey,type:'null',schema,rootSchema,required:isRequired,...selectedIndex,...(0,_common.getMetaProps)(params,uri)};const items=(0,_common.getEnum)(schema);elements={...(0,_common.getTitle)(schema),...(0,_common.getDescription)(schema),enum:{items,required:isRequired,...selectedIndex,name:uri}};}else{if((0,_common.hasAnyOf)(schema)){const selected=(0,_common.getAnyOfSelected)(values,uri);meta={uri,name:fieldKey,type:'null',schema,rootSchema,required:isRequired,...selected,...(0,_common.getMetaProps)(params,uri)};const items=(0,_common.getAnyOf)(schema);elements={...(0,_common.getTitle)(schema),...(0,_common.getDescription)(schema),anyOf:{items:items.reduce((accumulator,schema,index)=>accumulator.concat(transformArraySchemaNull(schema,rootSchema,values,{...params,required:isRequired,uri,index})),[]),required:isRequired,...selected,name:uri}};}else{if((0,_common.hasOneOf)(schema)){const selected=(0,_common.getOneOfSelected)(values,uri);meta={uri,name:fieldKey,type:'null',schema,rootSchema,required:isRequired,...selected,...(0,_common.getMetaProps)(params,uri)};const items=(0,_common.getOneOf)(schema);elements={...(0,_common.getTitle)(schema),...(0,_common.getDescription)(schema),oneOf:{items:items.reduce((accumulator,schema,index)=>accumulator.concat(transformArraySchemaNull(schema,rootSchema,values,{...params,required:isRequired,uri,index})),[]),required:isRequired,...selected,name:uri}};}else{meta={uri,name:fieldKey,type:'null',schema,rootSchema,required:isRequired,...(0,_common.getDefaultValue)(schema,uri),...(0,_common.getValue)(values,uri),...(0,_common.getMetaProps)(params,uri)};elements={...(0,_common.getTitle)(schema),...(0,_common.getDescription)(schema),field:{required:isRequired,...(0,_common.getElementsFieldValue)(values,uri,schema),...(0,_common.getElementsFieldProps)(params,uri),name:uri}};}}}return{meta,elements};}function transformObjectSchemaBoolean(schema,rootSchema,values,params){const{required:isRequired=false,uri:parentUri,key:fieldKey}=params;const uri=(0,_common.getUri)(parentUri,fieldKey);let meta;let elements;if((0,_common.hasEnum)(schema)){const selectedIndex=(0,_common.getSelectedIndex)(values,uri);meta={uri,name:fieldKey,type:'boolean',schema,rootSchema,required:isRequired,...selectedIndex,...(0,_common.getMetaProps)(params,uri)};const items=(0,_common.getEnum)(schema);elements={...(0,_common.getTitle)(schema),...(0,_common.getDescription)(schema),enum:{items,required:isRequired,...selectedIndex,name:uri}};}else{if((0,_common.hasAnyOf)(schema)){const selected=(0,_common.getAnyOfSelected)(values,uri);meta={uri,name:fieldKey,type:'boolean',schema,rootSchema,required:isRequired,...selected,...(0,_common.getMetaProps)(params,uri)};const items=(0,_common.getAnyOf)(schema);elements={...(0,_common.getTitle)(schema),...(0,_common.getDescription)(schema),anyOf:{items:items.reduce((accumulator,schema,index)=>accumulator.concat(transformArraySchemaBoolean(schema,rootSchema,values,{...params,required:isRequired,uri,index})),[]),required:isRequired,...selected,name:uri}};}else{if((0,_common.hasOneOf)(schema)){const selected=(0,_common.getOneOfSelected)(values,uri);meta={uri,name:fieldKey,type:'boolean',schema,rootSchema,required:isRequired,...selected,...(0,_common.getMetaProps)(params,uri)};const items=(0,_common.getOneOf)(schema);elements={...(0,_common.getTitle)(schema),...(0,_common.getDescription)(schema),oneOf:{items:items.reduce((accumulator,schema,index)=>accumulator.concat(transformArraySchemaBoolean(schema,rootSchema,values,{...params,required:isRequired,uri,index})),[]),required:isRequired,...selected,name:uri}};}else{meta={uri,name:fieldKey,type:'boolean',schema,rootSchema,required:isRequired,...(0,_common.getDefaultValue)(schema,uri),...(0,_common.getValue)(values,uri),...(0,_common.getMetaProps)(params,uri)};elements={...(0,_common.getTitle)(schema),...(0,_common.getDescription)(schema),field:{required:isRequired,...(0,_common.getElementsFieldValue)(values,uri,schema),...(0,_common.getElementsFieldProps)(params,uri),name:uri}};}}}return{meta,elements};}function transformObjectSchemaObject(schema,rootSchema,values,params){const{required:isRequired=false,uri:parentUri,key:fieldKey}=params;const uri=(0,_common.getUri)(parentUri,fieldKey);let meta;let elements;if((0,_common.hasEnum)(schema)){const selectedIndex=(0,_common.getSelectedIndex)(values,uri);meta={uri,name:fieldKey,type:'object',schema,rootSchema,...(0,_common.getMaxProperties)(schema),...(0,_common.getMinProperties)(schema),required:isRequired,...selectedIndex,...(0,_common.getMetaProps)(params,uri)};const items=(0,_common.getEnum)(schema);elements={...(0,_common.getTitle)(schema),...(0,_common.getDescription)(schema),enum:{items,required:isRequired,...selectedIndex,name:uri}};}else{if((0,_common.hasAnyOf)(schema)){const selected=(0,_common.getAnyOfSelected)(values,uri);meta={uri,name:fieldKey,type:'object',schema,rootSchema,...(0,_common.getMaxProperties)(schema),...(0,_common.getMinProperties)(schema),required:isRequired,...selected,...(0,_common.getMetaProps)(params,uri)};const items=(0,_common.getAnyOf)(schema);elements={...(0,_common.getTitle)(schema),...(0,_common.getDescription)(schema),anyOf:{items:items.reduce((accumulator,schema,index)=>accumulator.concat(transformArraySchemaObject(schema,rootSchema,values,{...params,required:isRequired,uri,index})),[]),required:isRequired,...selected,name:uri}};}else{if((0,_common.hasOneOf)(schema)){const selected=(0,_common.getOneOfSelected)(values,uri);meta={uri,name:fieldKey,type:'object',schema,rootSchema,...(0,_common.getMaxProperties)(schema),...(0,_common.getMinProperties)(schema),required:isRequired,...selected,...(0,_common.getMetaProps)(params,uri)};const items=(0,_common.getOneOf)(schema);elements={...(0,_common.getTitle)(schema),...(0,_common.getDescription)(schema),oneOf:{items:items.reduce((accumulator,schema,index)=>accumulator.concat(transformArraySchemaObject(schema,rootSchema,values,{...params,required:isRequired,uri,index})),[]),required:isRequired,...selected,name:uri}};}else{const{properties={},required=[]}=schema;meta={uri,name:fieldKey,type:'object',schema,rootSchema,...(0,_common.getMaxProperties)(schema),...(0,_common.getMinProperties)(schema),required:isRequired,...(0,_common.getDefaultValue)(schema,uri),...(0,_common.getValue)(values,uri),...(0,_common.getMetaProps)(params,uri)};elements={...(0,_common.getTitle)(schema),...(0,_common.getDescription)(schema),fields:Object.entries(properties).reduce((accumulator,[key,schema])=>accumulator.concat(transformObjectSchema(schema,rootSchema,values,{...params,required:required.includes(key),uri,key})),[])};}}}return{meta,elements};}function transformObjectSchemaArray(schema,rootSchema,values,params){const{required:isRequired=false,uri:parentUri,key:fieldKey}=params;const uri=(0,_common.getUri)(parentUri,fieldKey);let meta;let elements;if((0,_common.hasEnum)(schema)){const selectedIndex=(0,_common.getSelectedIndex)(values,uri);meta={uri,name:fieldKey,type:'array',schema,rootSchema,...(0,_common.getMinItems)(schema),...(0,_common.getMaxItems)(schema),...(0,_common.getHasUniqueItems)(schema),...(0,_common.getMaxContains)(schema),...(0,_common.getMinContains)(schema),required:isRequired,...selectedIndex,...(0,_common.getMetaProps)(params,uri)};const items=(0,_common.getEnum)(schema);elements={...(0,_common.getTitle)(schema),...(0,_common.getDescription)(schema),enum:{items,...selectedIndex,name:uri}};}else{if((0,_common.hasAnyOf)(schema)){const selected=(0,_common.getAnyOfSelected)(values,uri);meta={uri,name:fieldKey,type:'array',schema,rootSchema,...(0,_common.getMinItems)(schema),...(0,_common.getMaxItems)(schema),...(0,_common.getHasUniqueItems)(schema),...(0,_common.getMaxContains)(schema),...(0,_common.getMinContains)(schema),required:isRequired,...selected,...(0,_common.getMetaProps)(params,uri)};const items=(0,_common.getAnyOf)(schema);elements={...(0,_common.getTitle)(schema),...(0,_common.getDescription)(schema),anyOf:{items:items.reduce((accumulator,schema,index)=>accumulator.concat(transformArraySchemaArray(schema,rootSchema,values,{...params,required:isRequired,uri,index})),[]),required:isRequired,...selected,name:uri}};}else{if((0,_common.hasOneOf)(schema)){const selected=(0,_common.getOneOfSelected)(values,uri);meta={uri,name:fieldKey,type:'array',schema,rootSchema,...(0,_common.getMinItems)(schema),...(0,_common.getMaxItems)(schema),...(0,_common.getHasUniqueItems)(schema),...(0,_common.getMaxContains)(schema),...(0,_common.getMinContains)(schema),required:isRequired,...selected,...(0,_common.getMetaProps)(params,uri)};const items=(0,_common.getOneOf)(schema);elements={...(0,_common.getTitle)(schema),...(0,_common.getDescription)(schema),oneOf:{items:items.reduce((accumulator,schema,index)=>accumulator.concat(transformArraySchemaArray(schema,rootSchema,values,{...params,required:isRequired,uri,index})),[]),required:isRequired,...selected,name:uri}};}else{meta={uri,name:fieldKey,type:'array',schema,rootSchema,...(0,_common.getMinItems)(schema),...(0,_common.getMaxItems)(schema),...(0,_common.getHasUniqueItems)(schema),...(0,_common.getMaxContains)(schema),...(0,_common.getMinContains)(schema),required:isRequired,...(0,_common.getDefaultValue)(schema,uri),...(0,_common.getValue)(values,uri),...(0,_common.getMetaProps)(params,uri)};const{items=[]}=schema;const fields=[].concat(items).reduce((accumulator,schema,index)=>accumulator.concat(transformArraySchema(schema,rootSchema,values,{...params,required:isRequired,uri,index})),[]);elements={...(0,_common.getTitle)(schema),...(0,_common.getDescription)(schema),fields};}}}return{meta,elements};}function transformObjectSchemaString(schema,rootSchema,values,params){const{required:isRequired=false,uri:parentUri,key:fieldKey}=params;const uri=(0,_common.getUri)(parentUri,fieldKey);const minLength=(0,_common.getMinLength)(schema);const maxLength=(0,_common.getMaxLength)(schema);const pattern=(0,_common.getPattern)(schema);let meta;let elements;if((0,_common.hasEnum)(schema)){const selectedIndex=(0,_common.getSelectedIndex)(values,uri);meta={uri,name:fieldKey,type:'string',schema,rootSchema,...minLength,...maxLength,...pattern,required:isRequired,...selectedIndex,...(0,_common.getMetaProps)(params,uri)};const items=(0,_common.getEnum)(schema);elements={...(0,_common.getTitle)(schema),...(0,_common.getDescription)(schema),enum:{items,...minLength,...maxLength,...pattern,required:isRequired,...selectedIndex,name:uri}};}else{if((0,_common.hasAnyOf)(schema)){const selected=(0,_common.getAnyOfSelected)(values,uri);meta={uri,name:fieldKey,type:'string',schema,rootSchema,...minLength,...maxLength,...pattern,required:isRequired,...selected,...(0,_common.getMetaProps)(params,uri)};const items=(0,_common.getAnyOf)(schema);elements={...(0,_common.getTitle)(schema),...(0,_common.getDescription)(schema),anyOf:{items:items.reduce((accumulator,schema,index)=>accumulator.concat(transformArraySchemaString(schema,rootSchema,values,{...params,required:isRequired,uri,index})),[]),...minLength,...maxLength,...pattern,required:isRequired,...selected,name:uri}};}else{if((0,_common.hasOneOf)(schema)){const selected=(0,_common.getOneOfSelected)(values,uri);meta={uri,name:fieldKey,type:'string',schema,rootSchema,...minLength,...maxLength,...pattern,required:isRequired,...selected,...(0,_common.getMetaProps)(params,uri)};const items=(0,_common.getOneOf)(schema);elements={...(0,_common.getTitle)(schema),...(0,_common.getDescription)(schema),oneOf:{items:items.reduce((accumulator,schema,index)=>accumulator.concat(transformArraySchemaString(schema,rootSchema,values,{...params,required:isRequired,uri,index})),[]),...minLength,...maxLength,...pattern,required:isRequired,...selected,name:uri}};}else{meta={uri,name:fieldKey,type:'string',schema,rootSchema,...minLength,...maxLength,...pattern,required:isRequired,...(0,_common.getDefaultValue)(schema,uri),...(0,_common.getValue)(values,uri),...(0,_common.getMetaProps)(params,uri)};elements={...(0,_common.getTitle)(schema),...(0,_common.getDescription)(schema),field:{...minLength,...maxLength,...pattern,required:isRequired,...(0,_common.getElementsFieldValue)(values,uri,schema),...(0,_common.getElementsFieldProps)(params,uri),name:uri}};}}}return{meta,elements};}function transformObjectSchemaNumber(schema,rootSchema,values,params){const{required:isRequired=false,uri:parentUri,key:fieldKey}=params;const uri=(0,_common.getUri)(parentUri,fieldKey);const min=(0,_common.getMin)(schema);const max=(0,_common.getMax)(schema);const step=(0,_common.getStep)(schema);let meta;let elements;if((0,_common.hasEnum)(schema)){const selectedIndex=(0,_common.getSelectedIndex)(values,uri);meta={uri,name:fieldKey,type:'number',schema,rootSchema,...(0,_common.getIsExclusiveMin)(schema),...(0,_common.getIsExclusiveMax)(schema),...min,...max,...step,required:isRequired,...selectedIndex,...(0,_common.getMetaProps)(params,uri)};const items=(0,_common.getEnum)(schema);elements={...(0,_common.getTitle)(schema),...(0,_common.getDescription)(schema),enum:{items,...min,...max,...step,required:isRequired,...selectedIndex,name:uri}};}else{if((0,_common.hasAnyOf)(schema)){const selected=(0,_common.getAnyOfSelected)(values,uri);meta={uri,name:fieldKey,type:'number',schema,rootSchema,...(0,_common.getIsExclusiveMin)(schema),...(0,_common.getIsExclusiveMax)(schema),...min,...max,...step,required:isRequired,...selected,...(0,_common.getMetaProps)(params,uri)};const items=(0,_common.getAnyOf)(schema);elements={...(0,_common.getTitle)(schema),...(0,_common.getDescription)(schema),anyOf:{items:items.reduce((accumulator,schema,index)=>accumulator.concat(transformArraySchemaNumber(schema,rootSchema,values,{...params,index})),[]),...min,...max,...step,required:isRequired,...selected,name:uri}};}else{if((0,_common.hasOneOf)(schema)){const selected=(0,_common.getOneOfSelected)(values,uri);meta={uri,name:fieldKey,type:'number',schema,rootSchema,...(0,_common.getIsExclusiveMin)(schema),...(0,_common.getIsExclusiveMax)(schema),...min,...max,...step,required:isRequired,...selected,...(0,_common.getMetaProps)(params,uri)};const items=(0,_common.getOneOf)(schema);elements={...(0,_common.getTitle)(schema),...(0,_common.getDescription)(schema),oneOf:{items:items.reduce((accumulator,schema,index)=>accumulator.concat(transformArraySchemaNumber(schema,rootSchema,values,{...params,index})),[]),...min,...max,...step,required:isRequired,...selected,name:uri}};}else{meta={uri,name:fieldKey,type:'number',schema,rootSchema,...(0,_common.getIsExclusiveMin)(schema),...(0,_common.getIsExclusiveMax)(schema),...min,...max,...step,required:isRequired,...(0,_common.getDefaultValue)(schema,uri),...(0,_common.getValue)(values,uri),...(0,_common.getMetaProps)(params,uri)};elements={...(0,_common.getTitle)(schema),...(0,_common.getDescription)(schema),field:{...min,...max,...step,required:isRequired,...(0,_common.getElementsFieldValue)(values,uri,schema),...(0,_common.getElementsFieldProps)(params,uri),name:uri}};}}}return{meta,elements};}function transformObjectSchema(schema={},rootSchema=schema,values={},params={}){const{type}=schema;switch(type){case'null':return transformObjectSchemaNull(schema,rootSchema,values,params);case'boolean':return transformObjectSchemaBoolean(schema,rootSchema,values,params);case'object':return transformObjectSchemaObject(schema,rootSchema,values,params);case'array':return transformObjectSchemaArray(schema,rootSchema,values,params);case'string':return transformObjectSchemaString(schema,rootSchema,values,params);case'number':return transformObjectSchemaNumber(schema,rootSchema,values,params);default:throw new Error('Schema does not conform to Instance Data Model, https://json-schema.org/draft/2019-09/json-schema-core.html#rfc.section.4.2.1');}}function transformArraySchemaNull(schema,rootSchema,values,params){const{required:isRequired=false,uri:parentUri,index:arrayIndex}=params;const uri=(0,_common.getUri)(parentUri,arrayIndex);let meta;let elements;if((0,_common.hasEnum)(schema)){const selectedIndex=(0,_common.getSelectedIndex)(values,uri);meta={uri,item:arrayIndex,type:'null',schema,rootSchema,required:isRequired,...selectedIndex,...(0,_common.getMetaProps)(params,uri)};const items=(0,_common.getEnum)(schema);elements={...(0,_common.getTitle)(schema),...(0,_common.getDescription)(schema),enum:{items,required:isRequired,...selectedIndex,name:uri}};}else{if((0,_common.hasAnyOf)(schema)){const selected=(0,_common.getAnyOfSelected)(values,uri);meta={uri,item:arrayIndex,type:'null',schema,rootSchema,required:isRequired,...selected,...(0,_common.getMetaProps)(params,uri)};const items=(0,_common.getAnyOf)(schema);elements={...(0,_common.getTitle)(schema),...(0,_common.getDescription)(schema),anyOf:{items:items.reduce((accumulator,schema,index)=>accumulator.concat(transformArraySchemaNull(schema,rootSchema,values,{...params,required:isRequired,uri,index})),[]),required:isRequired,...selected,name:uri}};}else{if((0,_common.hasOneOf)(schema)){const selected=(0,_common.getOneOfSelected)(values,uri);meta={uri,item:arrayIndex,type:'null',schema,rootSchema,required:isRequired,...selected,...(0,_common.getMetaProps)(params,uri)};const items=(0,_common.getOneOf)(schema);elements={...(0,_common.getTitle)(schema),...(0,_common.getDescription)(schema),oneOf:{items:items.reduce((accumulator,schema,index)=>accumulator.concat(transformArraySchemaNull(schema,rootSchema,values,{...params,required:isRequired,uri,index})),[]),required:isRequired,...selected,name:uri}};}else{meta={uri,item:arrayIndex,type:'null',schema,rootSchema,required:isRequired,...(0,_common.getDefaultValue)(schema,uri),...(0,_common.getValue)(values,uri),...(0,_common.getMetaProps)(params,uri)};elements={...(0,_common.getTitle)(schema),...(0,_common.getDescription)(schema),field:{required:isRequired,...(0,_common.getElementsFieldValue)(values,uri,schema),...(0,_common.getElementsFieldProps)(params,uri),name:uri}};}}}return{meta,elements};}function transformArraySchemaBoolean(schema,rootSchema,values,params){const{required:isRequired=false,uri:parentUri,index:arrayIndex}=params;const uri=(0,_common.getUri)(parentUri,arrayIndex);let meta;let elements;if((0,_common.hasEnum)(schema)){const selectedIndex=(0,_common.getSelectedIndex)(values,uri);meta={uri,item:arrayIndex,type:'boolean',schema,rootSchema,required:isRequired,...selectedIndex,...(0,_common.getMetaProps)(params,uri)};const items=(0,_common.getEnum)(schema);elements={...(0,_common.getTitle)(schema),...(0,_common.getDescription)(schema),enum:{items,required:isRequired,...selectedIndex,name:uri}};}else{if((0,_common.hasAnyOf)(schema)){const selected=(0,_common.getAnyOfSelected)(values,uri);meta={uri,item:arrayIndex,type:'boolean',schema,rootSchema,required:isRequired,...selected,...(0,_common.getMetaProps)(params,uri)};const items=(0,_common.getAnyOf)(schema);elements={...(0,_common.getTitle)(schema),...(0,_common.getDescription)(schema),anyOf:{items:items.reduce((accumulator,schema,index)=>accumulator.concat(transformArraySchemaBoolean(schema,rootSchema,values,{...params,required:isRequired,uri,index})),[]),required:isRequired,...selected,name:uri}};}else{if((0,_common.hasOneOf)(schema)){const selected=(0,_common.getOneOfSelected)(values,uri);meta={uri,item:arrayIndex,type:'boolean',schema,rootSchema,required:isRequired,...selected,...(0,_common.getMetaProps)(params,uri)};const items=(0,_common.getOneOf)(schema);elements={...(0,_common.getTitle)(schema),...(0,_common.getDescription)(schema),oneOf:{items:items.reduce((accumulator,schema,index)=>accumulator.concat(transformArraySchemaBoolean(schema,rootSchema,values,{...params,required:isRequired,uri,index})),[]),required:isRequired,...selected,name:uri}};}else{meta={uri,item:arrayIndex,type:'boolean',schema,rootSchema,required:isRequired,...(0,_common.getDefaultValue)(schema,uri),...(0,_common.getValue)(values,uri),...(0,_common.getMetaProps)(params,uri)};elements={...(0,_common.getTitle)(schema),...(0,_common.getDescription)(schema),field:{required:isRequired,...(0,_common.getElementsFieldValue)(values,uri,schema),...(0,_common.getElementsFieldProps)(params,uri),name:uri}};}}}return{meta,elements};}function transformArraySchemaObject(schema,rootSchema,values,params){const{required:isRequired=false,uri:parentUri,index:arrayIndex}=params;const uri=(0,_common.getUri)(parentUri,arrayIndex);let meta;let elements;if((0,_common.hasEnum)(schema)){meta={uri,item:arrayIndex,type:'object',schema,rootSchema,...(0,_common.getMaxProperties)(schema),...(0,_common.getMinProperties)(schema),required:isRequired,...(0,_common.getSelectedIndex)(values,uri),...(0,_common.getMetaProps)(params,uri)};const items=(0,_common.getEnum)(schema);elements={...(0,_common.getTitle)(schema),...(0,_common.getDescription)(schema),enum:{items,required:isRequired,...(0,_common.getSelectedIndex)(values,uri),name:uri}};}else{if((0,_common.hasAnyOf)(schema)){const selected=(0,_common.getAnyOfSelected)(values,uri);meta={uri,item:arrayIndex,type:'object',schema,rootSchema,...(0,_common.getMaxProperties)(schema),...(0,_common.getMinProperties)(schema),required:isRequired,...selected,...(0,_common.getMetaProps)(params,uri)};const items=(0,_common.getAnyOf)(schema);elements={...(0,_common.getTitle)(schema),...(0,_common.getDescription)(schema),anyOf:{items:items.reduce((accumulator,schema,index)=>accumulator.concat(transformArraySchemaObject(schema,rootSchema,values,{...params,uri,index})),[]),required:isRequired,...selected,name:uri}};}else{if((0,_common.hasOneOf)(schema)){const selected=(0,_common.getOneOfSelected)(values,uri);meta={uri,item:arrayIndex,type:'object',schema,rootSchema,...(0,_common.getMaxProperties)(schema),...(0,_common.getMinProperties)(schema),required:isRequired,...selected,...(0,_common.getMetaProps)(params,uri)};const items=(0,_common.getOneOf)(schema);elements={...(0,_common.getTitle)(schema),...(0,_common.getDescription)(schema),oneOf:{items:items.reduce((accumulator,schema,index)=>accumulator.concat(transformArraySchemaObject(schema,rootSchema,values,{...params,uri,index})),[]),required:isRequired,...selected,name:uri}};}else{meta={uri,item:arrayIndex,type:'object',schema,rootSchema,...(0,_common.getMaxProperties)(schema),...(0,_common.getMinProperties)(schema),required:isRequired,...(0,_common.getDefaultValue)(schema,uri),...(0,_common.getValue)(values,uri),...(0,_common.getMetaProps)(params,uri)};const{properties={},required=[]}=schema;elements={...(0,_common.getTitle)(schema),...(0,_common.getDescription)(schema),fields:Object.entries(properties).reduce((accumulator,[key,schema])=>accumulator.concat(transformObjectSchema(schema,rootSchema,values,{...params,required:required.includes(key),uri,key})),[])};}}}return{meta,elements};}function transformArraySchemaArray(schema,rootSchema,values,params){const{required:isRequired=false,uri:parentUri,index:arrayIndex}=params;const uri=(0,_common.getUri)(parentUri,arrayIndex);let meta;let elements;if((0,_common.hasEnum)(schema)){const selectedIndex=(0,_common.getSelectedIndex)(values,uri);meta={uri,item:arrayIndex,type:'array',schema,rootSchema,...(0,_common.getMinItems)(schema),...(0,_common.getMaxItems)(schema),...(0,_common.getHasUniqueItems)(schema),...(0,_common.getMaxContains)(schema),...(0,_common.getMinContains)(schema),required:isRequired,...selectedIndex,...(0,_common.getMetaProps)(params,uri)};const items=(0,_common.getEnum)(schema);elements={...(0,_common.getTitle)(schema),...(0,_common.getDescription)(schema),enum:{items,required:isRequired,...selectedIndex,name:uri}};}else{if((0,_common.hasAnyOf)(schema)){const selected=(0,_common.getAnyOfSelected)(values,uri);meta={uri,item:arrayIndex,type:'array',schema,rootSchema,...(0,_common.getMinItems)(schema),...(0,_common.getMaxItems)(schema),...(0,_common.getHasUniqueItems)(schema),...(0,_common.getMaxContains)(schema),...(0,_common.getMinContains)(schema),required:isRequired,...selected,...(0,_common.getMetaProps)(params,uri)};const items=(0,_common.getAnyOf)(schema);elements={...(0,_common.getTitle)(schema),...(0,_common.getDescription)(schema),anyOf:{items:items.reduce((accumulator,schema,index)=>accumulator.concat(transformArraySchemaArray(schema,rootSchema,values,{...params,required:isRequired,uri,index})),[]),required:isRequired,...selected,name:uri}};}else{if((0,_common.hasOneOf)(schema)){const selected=(0,_common.getOneOfSelected)(values,uri);meta={uri,item:arrayIndex,type:'array',schema,rootSchema,...(0,_common.getMinItems)(schema),...(0,_common.getMaxItems)(schema),...(0,_common.getHasUniqueItems)(schema),...(0,_common.getMaxContains)(schema),...(0,_common.getMinContains)(schema),required:isRequired,...selected,...(0,_common.getMetaProps)(params,uri)};const items=(0,_common.getOneOf)(schema);elements={...(0,_common.getTitle)(schema),...(0,_common.getDescription)(schema),oneOf:{items:items.reduce((accumulator,schema,index)=>accumulator.concat(transformArraySchemaArray(schema,rootSchema,values,{...params,required:isRequired,uri,index})),[]),required:isRequired,...selected,name:uri}};}else{meta={uri,item:arrayIndex,type:'array',schema,rootSchema,...(0,_common.getMinItems)(schema),...(0,_common.getMaxItems)(schema),...(0,_common.getHasUniqueItems)(schema),...(0,_common.getMaxContains)(schema),...(0,_common.getMinContains)(schema),required:isRequired,...(0,_common.getDefaultValue)(schema,uri),...(0,_common.getValue)(values,uri),...(0,_common.getMetaProps)(params,uri)};const{items=[]}=schema;const fields=[].concat(items).reduce((accumulator,schema,index)=>accumulator.concat(transformArraySchema(schema,rootSchema,values,{...params,uri,index})),[]);elements={...(0,_common.getTitle)(schema),...(0,_common.getDescription)(schema),fields};}}}return{meta,elements};}function transformArraySchemaString(schema,rootSchema,values,params){const{required:isRequired=false,uri:parentUri,index:arrayIndex}=params;const uri=(0,_common.getUri)(parentUri,arrayIndex);const minLength=(0,_common.getMinLength)(schema);const maxLength=(0,_common.getMaxLength)(schema);const pattern=(0,_common.getPattern)(schema);let meta;let elements;if((0,_common.hasEnum)(schema)){const selectedIndex=(0,_common.getSelectedIndex)(values,uri);meta={uri,item:arrayIndex,type:'string',schema,rootSchema,...minLength,...maxLength,...pattern,required:isRequired,...selectedIndex,...(0,_common.getMetaProps)(params,uri)};const items=(0,_common.getEnum)(schema);elements={...(0,_common.getTitle)(schema),...(0,_common.getDescription)(schema),enum:{items,...minLength,...maxLength,...pattern,required:isRequired,...selectedIndex,name:uri}};}else{if((0,_common.hasAnyOf)(schema)){const selected=(0,_common.getAnyOfSelected)(values,uri);meta={uri,item:arrayIndex,type:'string',schema,rootSchema,...minLength,...maxLength,...pattern,required:isRequired,...selected,...(0,_common.getMetaProps)(params,uri)};const items=(0,_common.getAnyOf)(schema);elements={...(0,_common.getTitle)(schema),...(0,_common.getDescription)(schema),anyOf:{items:items.reduce((accumulator,schema,index)=>accumulator.concat(transformArraySchemaString(schema,rootSchema,values,{...params,required:isRequired,uri,index})),[]),...minLength,...maxLength,...pattern,required:isRequired,...selected,name:uri}};}else{if((0,_common.hasOneOf)(schema)){const selected=(0,_common.getOneOfSelected)(values,uri);meta={uri,item:arrayIndex,type:'string',schema,rootSchema,...minLength,...maxLength,...pattern,required:isRequired,...selected,...(0,_common.getMetaProps)(params,uri)};const items=(0,_common.getOneOf)(schema);elements={...(0,_common.getTitle)(schema),...(0,_common.getDescription)(schema),oneOf:{items:items.reduce((accumulator,schema,index)=>accumulator.concat(transformArraySchemaString(schema,rootSchema,values,{...params,required:isRequired,uri,index})),[]),...minLength,...maxLength,...pattern,required:isRequired,...selected,name:uri}};}else{meta={uri,item:arrayIndex,type:'string',schema,rootSchema,...minLength,...maxLength,...pattern,required:isRequired,...(0,_common.getDefaultValue)(schema,uri),...(0,_common.getValue)(values,uri),...(0,_common.getMetaProps)(params,uri)};elements={...(0,_common.getTitle)(schema),...(0,_common.getDescription)(schema),field:{...minLength,...maxLength,...pattern,required:isRequired,...(0,_common.getElementsFieldValue)(values,uri,schema),...(0,_common.getElementsFieldProps)(params,uri),name:uri}};}}}return{meta,elements};}function transformArraySchemaNumber(schema,rootSchema,values,params){const{required:isRequired=false,uri:parentUri,index:arrayIndex}=params;const uri=(0,_common.getUri)(parentUri,arrayIndex);const min=(0,_common.getMin)(schema);const max=(0,_common.getMax)(schema);const step=(0,_common.getStep)(schema);let meta;let elements;if((0,_common.hasEnum)(schema)){const selectedIndex=(0,_common.getSelectedIndex)(values,uri);meta={uri,item:arrayIndex,type:'number',schema,rootSchema,...(0,_common.getIsExclusiveMin)(schema),...(0,_common.getIsExclusiveMax)(schema),...min,...max,...step,required:isRequired,...selectedIndex,...(0,_common.getMetaProps)(params,uri)};const items=(0,_common.getEnum)(schema);elements={...(0,_common.getTitle)(schema),...(0,_common.getDescription)(schema),enum:{items,...min,...max,...step,required:isRequired,...selectedIndex,name:uri}};}else{if((0,_common.hasAnyOf)(schema)){const selected=(0,_common.getAnyOfSelected)(values,uri);meta={uri,item:arrayIndex,type:'number',schema,rootSchema,...(0,_common.getIsExclusiveMin)(schema),...(0,_common.getIsExclusiveMax)(schema),...min,...max,...step,required:isRequired,...selected,...(0,_common.getMetaProps)(params,uri)};const items=(0,_common.getAnyOf)(schema);elements={...(0,_common.getTitle)(schema),...(0,_common.getDescription)(schema),anyOf:{items:items.reduce((accumulator,schema,index)=>accumulator.concat(transformArraySchemaNumber(schema,rootSchema,values,{...params,required:isRequired,uri,index})),[]),...min,...max,...step,required:isRequired,...selected,name:uri}};}else{if((0,_common.hasOneOf)(schema)){const selected=(0,_common.getOneOfSelected)(values,uri);meta={uri,item:arrayIndex,type:'number',schema,rootSchema,...(0,_common.getIsExclusiveMin)(schema),...(0,_common.getIsExclusiveMax)(schema),...min,...max,...step,required:isRequired,...selected,...(0,_common.getMetaProps)(params,uri)};const items=(0,_common.getOneOf)(schema);elements={...(0,_common.getTitle)(schema),...(0,_common.getDescription)(schema),oneOf:{items:items.reduce((accumulator,schema,index)=>accumulator.concat(transformArraySchemaNumber(schema,rootSchema,values,{...params,required:isRequired,uri,index})),[]),...min,...max,...step,required:isRequired,...selected,name:uri}};}else{meta={uri,item:arrayIndex,type:'number',schema,rootSchema,...(0,_common.getIsExclusiveMin)(schema),...(0,_common.getIsExclusiveMax)(schema),...min,...max,...step,required:isRequired,...(0,_common.getDefaultValue)(schema,uri),...(0,_common.getValue)(values,uri),...(0,_common.getMetaProps)(params,uri)};elements={...(0,_common.getTitle)(schema),...(0,_common.getDescription)(schema),field:{...min,...max,...step,required:isRequired,...(0,_common.getElementsFieldValue)(values,uri,schema),...(0,_common.getElementsFieldProps)(params,uri),name:uri}};}}}return{meta,elements};}function transformArraySchema(schema={},rootSchema=schema,values={},params={}){const{type}=schema;switch(type){case'null':return transformArraySchemaNull(schema,rootSchema,values,params);case'boolean':return transformArraySchemaBoolean(schema,rootSchema,values,params);case'object':return transformArraySchemaObject(schema,rootSchema,values,params);case'array':return transformArraySchemaArray(schema,rootSchema,values,params);case'string':return transformArraySchemaString(schema,rootSchema,values,params);case'number':return transformArraySchemaNumber(schema,rootSchema,values,params);default:throw new Error('Schema does not conform to Instance Data Model, https://json-schema.org/draft/2019-09/json-schema-core.html#rfc.section.4.2.1');}}function transformNull(rootSchema,values,params){const uri=(0,_common.getUri)();let meta;let elements;if((0,_common.hasEnum)(rootSchema)){const selectedIndex=(0,_common.getSelectedIndex)(values,uri);meta={uri,type:'null',schema:rootSchema,...selectedIndex,...(0,_common.getMetaProps)(params,uri)};const items=(0,_common.getEnum)(rootSchema);elements={...(0,_common.getTitle)(rootSchema),...(0,_common.getDescription)(rootSchema),enum:{items,...selectedIndex,name:uri}};}else{if((0,_common.hasAnyOf)(rootSchema)){const selected=(0,_common.getAnyOfSelected)(values,uri);meta={uri,type:'null',schema:rootSchema,...selected,...(0,_common.getMetaProps)(params,uri)};const items=(0,_common.getAnyOf)(rootSchema);elements={...(0,_common.getTitle)(rootSchema),...(0,_common.getDescription)(rootSchema),anyOf:{items:items.reduce((accumulator,schema,index)=>accumulator.concat(transformArraySchemaNull(schema,rootSchema,values,{...params,index})),[]),...selected,name:uri}};}else{if((0,_common.hasOneOf)(rootSchema)){const selected=(0,_common.getOneOfSelected)(values,uri);meta={uri,type:'null',schema:rootSchema,...selected,...(0,_common.getMetaProps)(params,uri)};const items=(0,_common.getOneOf)(rootSchema);elements={...(0,_common.getTitle)(rootSchema),...(0,_common.getDescription)(rootSchema),oneOf:{items:items.reduce((accumulator,schema,index)=>accumulator.concat(transformArraySchemaNull(schema,rootSchema,values,{...params,index})),[]),...selected,name:uri}};}else{meta={uri,type:'null',schema:rootSchema,...(0,_common.getDefaultValue)(rootSchema,uri),...(0,_common.getValue)(values,uri),...(0,_common.getMetaProps)(params,uri)};elements={...(0,_common.getTitle)(rootSchema),...(0,_common.getDescription)(rootSchema),field:{...(0,_common.getElementsFieldValue)(values,uri,rootSchema),...(0,_common.getElementsFieldProps)(params,uri),name:uri}};}}}return{meta,elements};}function transformBoolean(rootSchema,values,params){const uri=(0,_common.getUri)();let meta;let elements;if((0,_common.hasEnum)(rootSchema)){const selectedIndex=(0,_common.getSelectedIndex)(values,uri);meta={uri,type:'boolean',schema:rootSchema,...selectedIndex,...(0,_common.getMetaProps)(params,uri)};const items=(0,_common.getEnum)(rootSchema);elements={...(0,_common.getTitle)(rootSchema),...(0,_common.getDescription)(rootSchema),enum:{items,...selectedIndex,name:uri}};}else{if((0,_common.hasAnyOf)(rootSchema)){const selected=(0,_common.getAnyOfSelected)(values,uri);meta={uri,type:'boolean',schema:rootSchema,...selected,...(0,_common.getMetaProps)(params,uri)};const items=(0,_common.getAnyOf)(rootSchema);elements={...(0,_common.getTitle)(rootSchema),...(0,_common.getDescription)(rootSchema),anyOf:{items:items.reduce((accumulator,schema,index)=>accumulator.concat(transformArraySchemaBoolean(schema,rootSchema,values,{...params,index})),[]),...selected,name:uri}};}else{if((0,_common.hasOneOf)(rootSchema)){const selected=(0,_common.getOneOfSelected)(values,uri);meta={uri,type:'boolean',schema:rootSchema,...selected,...(0,_common.getMetaProps)(params,uri)};const items=(0,_common.getOneOf)(rootSchema);elements={...(0,_common.getTitle)(rootSchema),...(0,_common.getDescription)(rootSchema),oneOf:{items:items.reduce((accumulator,schema,index)=>accumulator.concat(transformArraySchemaBoolean(schema,rootSchema,values,{...params,index})),[]),...selected,name:uri}};}else{meta={uri,type:'boolean',schema:rootSchema,...(0,_common.getDefaultValue)(rootSchema,uri),...(0,_common.getValue)(values,uri),...(0,_common.getMetaProps)(params,uri)};elements={...(0,_common.getTitle)(rootSchema),...(0,_common.getDescription)(rootSchema),field:{...(0,_common.getElementsFieldValue)(values,uri,rootSchema),...(0,_common.getElementsFieldProps)(params,uri),name:uri}};}}}return{meta,elements};}function transformObject(rootSchema,values,params){const uri=(0,_common.getUri)();let meta;let elements;if((0,_common.hasEnum)(rootSchema)){const selectedIndex=(0,_common.getSelectedIndex)(values,uri);meta={uri,type:'object',schema:rootSchema,...selectedIndex,...(0,_common.getMetaProps)(params,uri)};const items=(0,_common.getEnum)(rootSchema);elements={...(0,_common.getTitle)(rootSchema),...(0,_common.getDescription)(rootSchema),enum:{items,...selectedIndex,name:uri}};}else{if((0,_common.hasAnyOf)(rootSchema)){const selected=(0,_common.getAnyOfSelected)(values,uri);meta={uri,type:'object',schema:rootSchema,...selected,...(0,_common.getMetaProps)(params,uri)};const items=(0,_common.getAnyOf)(rootSchema);elements={...(0,_common.getTitle)(rootSchema),...(0,_common.getDescription)(rootSchema),anyOf:{items:items.reduce((accumulator,schema,index)=>accumulator.concat(transformArraySchemaObject(schema,rootSchema,values,{...params,index})),[]),...selected,name:uri}};}else{if((0,_common.hasOneOf)(rootSchema)){const selected=(0,_common.getOneOfSelected)(values,uri);meta={uri,type:'object',schema:rootSchema,...selected,...(0,_common.getMetaProps)(params,uri)};const items=(0,_common.getOneOf)(rootSchema);elements={...(0,_common.getTitle)(rootSchema),...(0,_common.getDescription)(rootSchema),oneOf:{items:items.reduce((accumulator,schema,index)=>accumulator.concat(transformArraySchemaObject(schema,rootSchema,values,{...params,index})),[]),...selected,name:uri}};}else{meta={uri,type:'object',schema:rootSchema,...(0,_common.getDefaultValue)(rootSchema,uri),...(0,_common.getValue)(values,uri),...(0,_common.getMetaProps)(params,uri)};const{properties={},required=[]}=rootSchema;elements={...(0,_common.getTitle)(rootSchema),...(0,_common.getDescription)(rootSchema),fields:Object.entries(properties).reduce((accumulator,[key,schema])=>accumulator.concat(transformObjectSchema(schema,rootSchema,values,{...params,required:required.includes(key),key})),[])};}}}return{meta,elements};}function transformArray(rootSchema,values,params){const uri=(0,_common.getUri)();let meta;let elements;if((0,_common.hasEnum)(rootSchema)){const selectedIndex=(0,_common.getSelectedIndex)(values,uri);meta={uri,type:'array',schema:rootSchema,...selectedIndex,...(0,_common.getMetaProps)(params,uri)};const items=(0,_common.getEnum)(rootSchema);elements={...(0,_common.getTitle)(rootSchema),...(0,_common.getDescription)(rootSchema),enum:{items,...selectedIndex,name:uri}};}else{if((0,_common.hasAnyOf)(rootSchema)){const selected=(0,_common.getAnyOfSelected)(values,uri);meta={uri,type:'array',schema:rootSchema,...(0,_common.getMinItems)(rootSchema),...(0,_common.getMaxItems)(rootSchema),...(0,_common.getHasUniqueItems)(rootSchema),...(0,_common.getMaxContains)(rootSchema),...(0,_common.getMinContains)(rootSchema),...selected,...(0,_common.getMetaProps)(params,uri)};const items=(0,_common.getAnyOf)(rootSchema);elements={...(0,_common.getTitle)(rootSchema),...(0,_common.getDescription)(rootSchema),anyOf:{items:items.reduce((accumulator,schema,index)=>accumulator.concat(transformArraySchemaArray(schema,rootSchema,values,{...params,index})),[]),...selected,name:uri}};}else{if((0,_common.hasOneOf)(rootSchema)){const selected=(0,_common.getOneOfSelected)(values,uri);meta={uri,type:'array',schema:rootSchema,...(0,_common.getMinItems)(rootSchema),...(0,_common.getMaxItems)(rootSchema),...(0,_common.getHasUniqueItems)(rootSchema),...(0,_common.getMaxContains)(rootSchema),...(0,_common.getMinContains)(rootSchema),...selected,...(0,_common.getMetaProps)(params,uri)};const items=(0,_common.getOneOf)(rootSchema);elements={...(0,_common.getTitle)(rootSchema),...(0,_common.getDescription)(rootSchema),oneOf:{items:items.reduce((accumulator,schema,index)=>accumulator.concat(transformArraySchemaArray(schema,rootSchema,values,{...params,index})),[]),...selected,name:uri}};}else{meta={uri,type:'array',schema:rootSchema,...(0,_common.getMinItems)(rootSchema),...(0,_common.getMaxItems)(rootSchema),...(0,_common.getHasUniqueItems)(rootSchema),...(0,_common.getMaxContains)(rootSchema),...(0,_common.getMinContains)(rootSchema),...(0,_common.getDefaultValue)(rootSchema,uri),...(0,_common.getValue)(values,uri),...(0,_common.getMetaProps)(params,uri)};const{items=[]}=rootSchema;const fields=[].concat(items).reduce((accumulator,schema,index)=>accumulator.concat(transformArraySchema(schema,rootSchema,values,{...params,index})),[]);elements={...(0,_common.getTitle)(rootSchema),...(0,_common.getDescription)(rootSchema),fields};}}}return{meta,elements};}function transformString(rootSchema,values,params){const uri=(0,_common.getUri)();const minLength=(0,_common.getMinLength)(rootSchema);const maxLength=(0,_common.getMaxLength)(rootSchema);const pattern=(0,_common.getPattern)(rootSchema);let meta;let elements;if((0,_common.hasEnum)(rootSchema)){const selectedIndex=(0,_common.getSelectedIndex)(values,uri);meta={uri,type:'string',schema:rootSchema,...minLength,...maxLength,...pattern,...selectedIndex,...(0,_common.getMetaProps)(params,uri)};const items=(0,_common.getEnum)(rootSchema);elements={...(0,_common.getTitle)(rootSchema),...(0,_common.getDescription)(rootSchema),enum:{items,...minLength,...maxLength,...pattern,...selectedIndex,name:uri}};}else{if((0,_common.hasAnyOf)(rootSchema)){const selected=(0,_common.getAnyOfSelected)(values,uri);meta={uri,type:'string',schema:rootSchema,...minLength,...maxLength,...pattern,...selected,...(0,_common.getMetaProps)(params,uri)};const items=(0,_common.getAnyOf)(rootSchema);elements={...(0,_common.getTitle)(rootSchema),...(0,_common.getDescription)(rootSchema),anyOf:{items:items.reduce((accumulator,schema,index)=>accumulator.concat(transformArraySchemaString(schema,rootSchema,values,{...params,index})),[]),...selected,name:uri}};}else{if((0,_common.hasOneOf)(rootSchema)){const selected=(0,_common.getOneOfSelected)(values,uri);meta={uri,type:'string',schema:rootSchema,...minLength,...maxLength,...pattern,...selected,...(0,_common.getMetaProps)(params,uri)};const items=(0,_common.getOneOf)(rootSchema);elements={...(0,_common.getTitle)(rootSchema),...(0,_common.getDescription)(rootSchema),oneOf:{items:items.reduce((accumulator,schema,index)=>accumulator.concat(transformArraySchemaString(schema,rootSchema,values,{...params,index})),[]),...selected,name:uri}};}else{meta={uri,type:'string',schema:rootSchema,...minLength,...maxLength,...pattern,...(0,_common.getDefaultValue)(rootSchema,uri),...(0,_common.getValue)(values,uri),...(0,_common.getMetaProps)(params,uri)};elements={...(0,_common.getTitle)(rootSchema),...(0,_common.getDescription)(rootSchema),field:{...minLength,...maxLength,...pattern,...(0,_common.getElementsFieldValue)(values,uri,rootSchema),...(0,_common.getElementsFieldProps)(params,uri),name:uri}};}}}return{meta,elements};}function transformNumber(rootSchema,values,params){const uri=(0,_common.getUri)();const min=(0,_common.getMin)(rootSchema);const max=(0,_common.getMax)(rootSchema);const step=(0,_common.getStep)(rootSchema);let meta;let elements;if((0,_common.hasEnum)(rootSchema)){const selectedIndex=(0,_common.getSelectedIndex)(values,uri);meta={uri,type:'number',schema:rootSchema,...(0,_common.getIsExclusiveMin)(rootSchema),...(0,_common.getIsExclusiveMax)(rootSchema),...min,...max,...step,...selectedIndex,...(0,_common.getMetaProps)(params,uri)};const items=(0,_common.getEnum)(rootSchema);elements={...(0,_common.getTitle)(rootSchema),...(0,_common.getDescription)(rootSchema),enum:{items,...min,...max,...step,...selectedIndex,name:uri}};}else{if((0,_common.hasAnyOf)(rootSchema)){const selected=(0,_common.getAnyOfSelected)(values,uri);meta={uri,type:'number',schema:rootSchema,...(0,_common.getIsExclusiveMin)(rootSchema),...(0,_common.getIsExclusiveMax)(rootSchema),...min,...max,...step,...selected,...(0,_common.getMetaProps)(params,uri)};const items=(0,_common.getAnyOf)(rootSchema);elements={...(0,_common.getTitle)(rootSchema),...(0,_common.getDescription)(rootSchema),anyOf:{items:items.reduce((accumulator,schema,index)=>accumulator.concat(transformArraySchemaNumber(schema,rootSchema,values,{...params,index})),[]),...selected,name:uri}};}else{if((0,_common.hasOneOf)(rootSchema)){const selected=(0,_common.getOneOfSelected)(values,uri);meta={uri,type:'number',schema:rootSchema,...(0,_common.getIsExclusiveMin)(rootSchema),...(0,_common.getIsExclusiveMax)(rootSchema),...min,...max,...step,...selected,...(0,_common.getMetaProps)(params,uri)};const items=(0,_common.getOneOf)(rootSchema);elements={...(0,_common.getTitle)(rootSchema),...(0,_common.getDescription)(rootSchema),oneOf:{items:items.reduce((accumulator,schema,index)=>accumulator.concat(transformArraySchemaNumber(schema,rootSchema,values,{...params,index})),[]),...selected,name:uri}};}else{meta={uri,type:'number',schema:rootSchema,...(0,_common.getIsExclusiveMin)(rootSchema),...(0,_common.getIsExclusiveMax)(rootSchema),...min,...max,...step,...(0,_common.getDefaultValue)(rootSchema,uri),...(0,_common.getValue)(values,uri),...(0,_common.getMetaProps)(params,uri)};elements={...(0,_common.getTitle)(rootSchema),...(0,_common.getDescription)(rootSchema),field:{...min,...max,...step,...(0,_common.getElementsFieldValue)(values,uri,rootSchema),...(0,_common.getElementsFieldProps)(params,uri),name:uri}};}}}return{meta,elements};}function transform(rootSchema={},values={},params={}){const{type}=rootSchema;switch(type){case'null':return transformNull(rootSchema,values,params);case'boolean':return transformBoolean(rootSchema,values,params);case'object':return transformObject(rootSchema,values,params);case'array':return transformArray(rootSchema,values,params);case'number':return transformNumber(rootSchema,values,params);case'string':return transformString(rootSchema,values,params);default:throw new Error('Schema does not conform to Instance Data Model, https://json-schema.org/draft/2019-09/json-schema-core.html#rfc.section.4.2.1');}}