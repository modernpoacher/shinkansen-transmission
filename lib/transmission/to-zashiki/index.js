"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.transformObjectSchemaNull=transformObjectSchemaNull;exports.transformObjectSchemaBoolean=transformObjectSchemaBoolean;exports.transformObjectSchemaObject=transformObjectSchemaObject;exports.transformObjectSchemaArray=transformObjectSchemaArray;exports.transformObjectSchemaNumber=transformObjectSchemaNumber;exports.transformObjectSchemaString=transformObjectSchemaString;exports.transformObjectSchema=transformObjectSchema;exports.transformArraySchemaNull=transformArraySchemaNull;exports.transformArraySchemaBoolean=transformArraySchemaBoolean;exports.transformArraySchemaObject=transformArraySchemaObject;exports.transformArraySchemaArray=transformArraySchemaArray;exports.transformArraySchemaNumber=transformArraySchemaNumber;exports.transformArraySchemaString=transformArraySchemaString;exports.transformArraySchema=transformArraySchema;exports.transformNull=transformNull;exports.transformBoolean=transformBoolean;exports.transformObject=transformObject;exports.transformArray=transformArray;exports.transformNumber=transformNumber;exports.transformString=transformString;exports.default=transform;var _debug=_interopRequireDefault(require("debug"));var _common=require("../common");function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}const{env:{DEBUG='shinkansen-transmission:*'}}=process;_debug.default.enable(DEBUG);const log=(0,_debug.default)('shinkansen-transmission:to-zashiki');function transformObjectSchemaNull(schema,rootSchema,values,params){const{required:isRequired=false,uri:parentUri,key:fieldKey}=params;const uri=(0,_common.getUri)(parentUri,fieldKey);const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(schema);const description=(0,_common.getDescription)(schema);let meta;let elements;if((0,_common.hasEnum)(schema)){const items=(0,_common.getEnum)(schema);const selectedItems=(0,_common.getSelectedItems)(values,uri);meta={uri,name:fieldKey,type:'null',schema,rootSchema,required:isRequired,selectedItems,...metaProps};elements={...title,...description,enum:{items,required:isRequired,selectedItems,name:uri}};}else{if((0,_common.hasAnyOf)(schema)){const{anyOf}=schema;const items=anyOf.map((schema,index)=>transformArraySchemaNull(schema,rootSchema,values,{...params,required:isRequired,parentUri,uri,index}));const selectedItems=(0,_common.getSelectedItems)(values,uri);meta={uri,name:fieldKey,type:'null',schema,rootSchema,required:isRequired,selectedItems,...metaProps};elements={...title,...description,anyOf:{items,required:isRequired,selectedItems,name:uri}};}else{if((0,_common.hasOneOf)(schema)){const{oneOf}=schema;const items=oneOf.map((schema,index)=>transformArraySchemaNull(schema,rootSchema,values,{...params,required:isRequired,parentUri,uri,index}));const selectedItems=(0,_common.getSelectedItems)(values,uri);meta={uri,name:fieldKey,type:'null',schema,rootSchema,required:isRequired,selectedItems,...metaProps};elements={...title,...description,oneOf:{items,required:isRequired,selectedItems,name:uri}};}else{if((0,_common.hasAllOf)(schema)){const{allOf,...rest}=schema;const itemSchema=allOf.reduce((accumulator,schema)=>({...accumulator,...schema}),rest);meta={uri,name:fieldKey,type:'null',schema,rootSchema,required:isRequired,...(0,_common.getMetaDefaultValue)(itemSchema,uri),...(0,_common.getMetaValue)(values,uri),...metaProps};elements={...title,...description,field:{required:isRequired,...(0,_common.getElementsFieldValue)(values,uri,itemSchema),...(0,_common.getElementsFieldProps)(params,uri),name:uri}};}else{meta={uri,name:fieldKey,type:'null',schema,rootSchema,required:isRequired,...(0,_common.getMetaDefaultValue)(schema,uri),...(0,_common.getMetaValue)(values,uri),...metaProps};elements={...title,...description,field:{required:isRequired,...(0,_common.getElementsFieldValue)(values,uri,schema),...(0,_common.getElementsFieldProps)(params,uri),name:uri}};}}}}return{meta,elements};}function transformObjectSchemaBoolean(schema,rootSchema,values,params){const{required:isRequired=false,uri:parentUri,key:fieldKey}=params;const uri=(0,_common.getUri)(parentUri,fieldKey);const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(schema);const description=(0,_common.getDescription)(schema);let meta;let elements;if((0,_common.hasEnum)(schema)){const items=(0,_common.getEnum)(schema);const selectedItems=(0,_common.getSelectedItems)(values,uri);meta={uri,name:fieldKey,type:'boolean',schema,rootSchema,required:isRequired,selectedItems,...metaProps};elements={...title,...description,enum:{items,required:isRequired,selectedItems,name:uri}};}else{if((0,_common.hasAnyOf)(schema)){const{anyOf}=schema;const items=anyOf.map((schema,index)=>transformArraySchemaBoolean(schema,rootSchema,values,{...params,required:isRequired,parentUri,uri,index}));const selectedItems=(0,_common.getSelectedItems)(values,uri);meta={uri,name:fieldKey,type:'boolean',schema,rootSchema,required:isRequired,selectedItems,...metaProps};elements={...title,...description,anyOf:{items,required:isRequired,selectedItems,name:uri}};}else{if((0,_common.hasOneOf)(schema)){const{oneOf}=schema;const items=oneOf.map((schema,index)=>transformArraySchemaBoolean(schema,rootSchema,values,{...params,required:isRequired,parentUri,uri,index}));const selectedItems=(0,_common.getSelectedItems)(values,uri);meta={uri,name:fieldKey,type:'boolean',schema,rootSchema,required:isRequired,selectedItems,...metaProps};elements={...title,...description,oneOf:{items,required:isRequired,selectedItems,name:uri}};}else{if((0,_common.hasAllOf)(schema)){const{allOf,...rest}=schema;const itemSchema=allOf.reduce((accumulator,schema)=>({...accumulator,...schema}),rest);meta={uri,name:fieldKey,type:'boolean',schema,rootSchema,required:isRequired,...(0,_common.getMetaDefaultValue)(itemSchema,uri),...(0,_common.getMetaValue)(values,uri),...metaProps};elements={...title,...description,field:{required:isRequired,...(0,_common.getElementsFieldValue)(values,uri,itemSchema),...(0,_common.getElementsFieldProps)(params,uri),name:uri}};}else{meta={uri,name:fieldKey,type:'boolean',schema,rootSchema,required:isRequired,...(0,_common.getMetaDefaultValue)(schema,uri),...(0,_common.getMetaValue)(values,uri),...metaProps};elements={...title,...description,field:{required:isRequired,...(0,_common.getElementsFieldValue)(values,uri,schema),...(0,_common.getElementsFieldProps)(params,uri),name:uri}};}}}}return{meta,elements};}function transformObjectSchemaObject(schema,rootSchema,values,params){const{required:isRequired=false,uri:parentUri,key:fieldKey}=params;const uri=(0,_common.getUri)(parentUri,fieldKey);const maxProperties=(0,_common.getMaxProperties)(schema);const minProperties=(0,_common.getMinProperties)(schema);const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(schema);const description=(0,_common.getDescription)(schema);let meta;let elements;if((0,_common.hasEnum)(schema)){const items=(0,_common.getEnum)(schema);const selectedItems=(0,_common.getSelectedItems)(values,uri);meta={uri,name:fieldKey,type:'object',schema,rootSchema,...maxProperties,...minProperties,required:isRequired,selectedItems,...metaProps};elements={...title,...description,enum:{items,required:isRequired,selectedItems,name:uri}};}else{if((0,_common.hasAnyOf)(schema)){const{anyOf}=schema;const items=anyOf.map((schema,index)=>transformArraySchemaObject(schema,rootSchema,values,{...params,required:isRequired,parentUri,uri,index}));const selectedItems=(0,_common.getSelectedItems)(values,uri);meta={uri,name:fieldKey,type:'object',schema,rootSchema,...maxProperties,...minProperties,required:isRequired,selectedItems,...metaProps};elements={...title,...description,anyOf:{items,required:isRequired,selectedItems,name:uri}};}else{if((0,_common.hasOneOf)(schema)){const{oneOf}=schema;const items=oneOf.map((schema,index)=>transformArraySchemaObject(schema,rootSchema,values,{...params,required:isRequired,parentUri,uri,index}));const selectedItems=(0,_common.getSelectedItems)(values,uri);meta={uri,name:fieldKey,type:'object',schema,rootSchema,...maxProperties,...minProperties,required:isRequired,selectedItems,...metaProps};elements={...title,...description,oneOf:{items,required:isRequired,selectedItems,name:uri}};}else{if((0,_common.hasAllOf)(schema)){const{allOf,...rest}=schema;const itemSchema=allOf.reduce((accumulator,schema)=>({...accumulator,...schema}),rest);meta={uri,name:fieldKey,type:'object',schema,rootSchema,...maxProperties,...minProperties,required:isRequired,...(0,_common.getMetaDefaultValue)(itemSchema,uri),...(0,_common.getMetaValue)(values,uri),...metaProps};const{properties={},required=[]}=itemSchema;elements={...title,...description,fields:Object.entries(properties).map(([key,schema])=>transformObjectSchema(schema,rootSchema,values,{...params,required:required.includes(key),parentUri,uri,key}))};}else{meta={uri,name:fieldKey,type:'object',schema,rootSchema,...maxProperties,...minProperties,required:isRequired,...(0,_common.getMetaDefaultValue)(schema,uri),...(0,_common.getMetaValue)(values,uri),...metaProps};const{properties={},required=[]}=schema;elements={...title,...description,fields:Object.entries(properties).map(([key,schema])=>transformObjectSchema(schema,rootSchema,values,{...params,required:required.includes(key),parentUri,uri,key}))};}}}}return{meta,elements};}function transformObjectSchemaArray(schema,rootSchema,values,params){const{required:isRequired=false,uri:parentUri,key:fieldKey}=params;const uri=(0,_common.getUri)(parentUri,fieldKey);const minItems=(0,_common.getMinItems)(schema);const maxItems=(0,_common.getMaxItems)(schema);const hasUniqueItems=(0,_common.getHasUniqueItems)(schema);const maxContains=(0,_common.getMaxContains)(schema);const minContains=(0,_common.getMinContains)(schema);const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(schema);const description=(0,_common.getDescription)(schema);let meta;let elements;if((0,_common.hasEnum)(schema)){const items=(0,_common.getEnum)(schema);const selectedItems=(0,_common.getSelectedItems)(values,uri);meta={uri,name:fieldKey,type:'array',schema,rootSchema,...minItems,...maxItems,...hasUniqueItems,...maxContains,...minContains,required:isRequired,selectedItems,...metaProps};elements={...title,...description,enum:{items,selectedItems,name:uri}};}else{if((0,_common.hasAnyOf)(schema)){const{anyOf}=schema;const items=anyOf.map((schema,index)=>transformArraySchemaArray(schema,rootSchema,values,{...params,required:isRequired,parentUri,uri,index}));const selectedItems=(0,_common.getSelectedItems)(values,uri);meta={uri,name:fieldKey,type:'array',schema,rootSchema,...minItems,...maxItems,...hasUniqueItems,...maxContains,...minContains,required:isRequired,selectedItems,...metaProps};elements={...title,...description,anyOf:{items,required:isRequired,selectedItems,name:uri}};}else{if((0,_common.hasOneOf)(schema)){const{oneOf}=schema;const items=oneOf.map((schema,index)=>transformArraySchemaArray(schema,rootSchema,values,{...params,required:isRequired,parentUri,uri,index}));const selectedItems=(0,_common.getSelectedItems)(values,uri);meta={uri,name:fieldKey,type:'array',schema,rootSchema,...minItems,...maxItems,...hasUniqueItems,...maxContains,...minContains,required:isRequired,selectedItems,...metaProps};elements={...title,...description,oneOf:{items,required:isRequired,selectedItems,name:uri}};}else{if((0,_common.hasAllOf)(schema)){const{allOf,...rest}=schema;const itemSchema=allOf.reduce((accumulator,schema)=>({...accumulator,...schema}),rest);meta={uri,name:fieldKey,type:'array',schema,rootSchema,...minItems,...maxItems,...hasUniqueItems,...maxContains,...minContains,required:isRequired,...(0,_common.getMetaDefaultValue)(itemSchema,uri),...(0,_common.getMetaValue)(values,uri),...metaProps};const{items=[]}=itemSchema;const fields=[].concat(items).map((schema,index)=>transformArraySchema(schema,rootSchema,values,{...params,required:isRequired,parentUri,uri,index}));elements={...title,...description,fields};}else{meta={uri,name:fieldKey,type:'array',schema,rootSchema,...minItems,...maxItems,...hasUniqueItems,...maxContains,...minContains,required:isRequired,...(0,_common.getMetaDefaultValue)(schema,uri),...(0,_common.getMetaValue)(values,uri),...metaProps};const{items=[]}=schema;const fields=[].concat(items).map((schema,index)=>transformArraySchema(schema,rootSchema,values,{...params,required:isRequired,parentUri,uri,index}));elements={...title,...description,fields};}}}}return{meta,elements};}function transformObjectSchemaNumber(schema,rootSchema,values,params){const{required:isRequired=false,uri:parentUri,key:fieldKey}=params;const uri=(0,_common.getUri)(parentUri,fieldKey);const min=(0,_common.getMin)(schema);const max=(0,_common.getMax)(schema);const step=(0,_common.getStep)(schema);const isExclusiveMin=(0,_common.getIsExclusiveMin)(schema);const isExclusiveMax=(0,_common.getIsExclusiveMax)(schema);const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(schema);const description=(0,_common.getDescription)(schema);let meta;let elements;if((0,_common.hasEnum)(schema)){const items=(0,_common.getEnum)(schema);const selectedItems=(0,_common.getSelectedItems)(values,uri);meta={uri,name:fieldKey,type:'number',schema,rootSchema,...isExclusiveMin,...isExclusiveMax,...min,...max,...step,required:isRequired,selectedItems,...metaProps};elements={...title,...description,enum:{items,...min,...max,...step,required:isRequired,selectedItems,name:uri}};}else{if((0,_common.hasAnyOf)(schema)){const{anyOf}=schema;const items=anyOf.map((schema,index)=>transformArraySchemaNumber(schema,rootSchema,values,{...params,required:isRequired,parentUri,uri,index}));const selectedItems=(0,_common.getSelectedItems)(values,uri);meta={uri,name:fieldKey,type:'number',schema,rootSchema,...isExclusiveMin,...isExclusiveMax,...min,...max,...step,required:isRequired,selectedItems,...metaProps};elements={...title,...description,anyOf:{items,...min,...max,...step,required:isRequired,selectedItems,name:uri}};}else{if((0,_common.hasOneOf)(schema)){const{oneOf}=schema;const items=oneOf.map((schema,index)=>transformArraySchemaNumber(schema,rootSchema,values,{...params,required:isRequired,parentUri,uri,index}));const selectedItems=(0,_common.getSelectedItems)(values,uri);meta={uri,name:fieldKey,type:'number',schema,rootSchema,...isExclusiveMin,...isExclusiveMax,...min,...max,...step,required:isRequired,selectedItems,...metaProps};elements={...title,...description,oneOf:{items,...min,...max,...step,required:isRequired,selectedItems,name:uri}};}else{if((0,_common.hasAllOf)(schema)){const{allOf,...rest}=schema;const itemSchema=allOf.reduce((accumulator,schema)=>({...accumulator,...schema}),rest);meta={uri,name:fieldKey,type:'number',schema,rootSchema,...isExclusiveMin,...isExclusiveMax,...min,...max,...step,required:isRequired,...(0,_common.getMetaDefaultValue)(itemSchema,uri),...(0,_common.getMetaValue)(values,uri),...metaProps};elements={...title,...description,field:{...min,...max,...step,required:isRequired,...(0,_common.getElementsFieldValue)(values,uri,itemSchema),...(0,_common.getElementsFieldProps)(params,uri),name:uri}};}else{meta={uri,name:fieldKey,type:'number',schema,rootSchema,...isExclusiveMin,...isExclusiveMax,...min,...max,...step,required:isRequired,...(0,_common.getMetaDefaultValue)(schema,uri),...(0,_common.getMetaValue)(values,uri),...metaProps};elements={...title,...description,field:{...min,...max,...step,required:isRequired,...(0,_common.getElementsFieldValue)(values,uri,schema),...(0,_common.getElementsFieldProps)(params,uri),name:uri}};}}}}return{meta,elements};}function transformObjectSchemaString(schema,rootSchema,values,params){const{required:isRequired=false,uri:parentUri,key:fieldKey}=params;const uri=(0,_common.getUri)(parentUri,fieldKey);const minLength=(0,_common.getMinLength)(schema);const maxLength=(0,_common.getMaxLength)(schema);const pattern=(0,_common.getPattern)(schema);const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(schema);const description=(0,_common.getDescription)(schema);let meta;let elements;if((0,_common.hasEnum)(schema)){const items=(0,_common.getEnum)(schema);const selectedItems=(0,_common.getSelectedItems)(values,uri);meta={uri,name:fieldKey,type:'string',schema,rootSchema,...minLength,...maxLength,...pattern,required:isRequired,selectedItems,...metaProps};elements={...title,...description,enum:{items,...minLength,...maxLength,...pattern,required:isRequired,selectedItems,name:uri}};}else{if((0,_common.hasAnyOf)(schema)){const{anyOf}=schema;const items=anyOf.map((schema,index)=>transformArraySchemaString(schema,rootSchema,values,{...params,required:isRequired,parentUri,uri,index}));const selectedItems=(0,_common.getSelectedItems)(values,uri);meta={uri,name:fieldKey,type:'string',schema,rootSchema,...minLength,...maxLength,...pattern,required:isRequired,selectedItems,...metaProps};elements={...title,...description,anyOf:{items,...minLength,...maxLength,...pattern,required:isRequired,selectedItems,name:uri}};}else{if((0,_common.hasOneOf)(schema)){const{oneOf}=schema;const items=oneOf.map((schema,index)=>transformArraySchemaString(schema,rootSchema,values,{...params,required:isRequired,parentUri,uri,index}));const selectedItems=(0,_common.getSelectedItems)(values,uri);meta={uri,name:fieldKey,type:'string',schema,rootSchema,...minLength,...maxLength,...pattern,required:isRequired,selectedItems,...metaProps};elements={...title,...description,oneOf:{items,...minLength,...maxLength,...pattern,required:isRequired,selectedItems,name:uri}};}else{if((0,_common.hasAllOf)(schema)){const{allOf,...rest}=schema;const itemSchema=allOf.reduce((accumulator,schema)=>({...accumulator,...schema}),rest);meta={uri,name:fieldKey,type:'string',schema,rootSchema,...minLength,...maxLength,...pattern,required:isRequired,...(0,_common.getMetaDefaultValue)(itemSchema,uri),...(0,_common.getMetaValue)(values,uri),...metaProps};elements={...title,...description,field:{...minLength,...maxLength,...pattern,required:isRequired,...(0,_common.getElementsFieldValue)(values,uri,itemSchema),...(0,_common.getElementsFieldProps)(params,uri),name:uri}};}else{meta={uri,name:fieldKey,type:'string',schema,rootSchema,...minLength,...maxLength,...pattern,required:isRequired,...(0,_common.getMetaDefaultValue)(schema,uri),...(0,_common.getMetaValue)(values,uri),...metaProps};elements={...title,...description,field:{...minLength,...maxLength,...pattern,required:isRequired,...(0,_common.getElementsFieldValue)(values,uri,schema),...(0,_common.getElementsFieldProps)(params,uri),name:uri}};}}}}return{meta,elements};}function transformObjectSchema(schema={},rootSchema=schema,values={},params={}){const{type}=schema;switch(type){case'null':return transformObjectSchemaNull(schema,rootSchema,values,params);case'boolean':return transformObjectSchemaBoolean(schema,rootSchema,values,params);case'object':return transformObjectSchemaObject(schema,rootSchema,values,params);case'array':return transformObjectSchemaArray(schema,rootSchema,values,params);case'string':return transformObjectSchemaString(schema,rootSchema,values,params);case'number':return transformObjectSchemaNumber(schema,rootSchema,values,params);default:throw new Error('Schema does not conform to Instance Data Model, https://json-schema.org/draft/2019-09/json-schema-core.html#rfc.section.4.2.1');}}function transformArraySchemaNull(schema,rootSchema,values,params){const{required:isRequired=false,uri:parentUri,index:arrayIndex}=params;const uri=(0,_common.getUri)(parentUri,arrayIndex);const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(schema);const description=(0,_common.getDescription)(schema);let meta;let elements;if((0,_common.hasEnum)(schema)){const items=(0,_common.getEnum)(schema);const selectedItems=(0,_common.getSelectedItems)(values,uri);meta={uri,item:arrayIndex,type:'null',schema,rootSchema,required:isRequired,selectedItems,...metaProps};elements={...title,...description,enum:{items,required:isRequired,selectedItems,name:uri}};}else{if((0,_common.hasAnyOf)(schema)){const{anyOf}=schema;const items=anyOf.map((schema,index)=>transformArraySchemaNull(schema,rootSchema,values,{...params,required:isRequired,parentUri,uri,index}));const selectedItems=(0,_common.getSelectedItems)(values,uri);meta={uri,item:arrayIndex,type:'null',schema,rootSchema,required:isRequired,selectedItems,...metaProps};elements={...title,...description,anyOf:{items,required:isRequired,selectedItems,name:uri}};}else{if((0,_common.hasOneOf)(schema)){const{oneOf}=schema;const items=oneOf.map((schema,index)=>transformArraySchemaNull(schema,rootSchema,values,{...params,required:isRequired,parentUri,uri,index}));const selectedItems=(0,_common.getSelectedItems)(values,uri);meta={uri,item:arrayIndex,type:'null',schema,rootSchema,required:isRequired,selectedItems,...metaProps};elements={...title,...description,oneOf:{items,required:isRequired,selectedItems,name:uri}};}else{if((0,_common.hasAllOf)(schema)){const{allOf,...rest}=schema;const itemSchema=allOf.reduce((accumulator,schema)=>({...accumulator,...schema}),rest);meta={uri,item:arrayIndex,type:'null',schema,rootSchema,required:isRequired,...(0,_common.getMetaDefaultValue)(itemSchema,uri),...(0,_common.getMetaValue)(values,uri),...metaProps};elements={...title,...description,field:{required:isRequired,...(0,_common.getElementsFieldValue)(values,uri,itemSchema),...(0,_common.getElementsFieldProps)(params,uri),name:uri}};}else{meta={uri,item:arrayIndex,type:'null',schema,rootSchema,required:isRequired,...(0,_common.getMetaDefaultValue)(schema,uri),...(0,_common.getMetaValue)(values,uri),...metaProps};elements={...title,...description,field:{required:isRequired,...(0,_common.getElementsFieldValue)(values,uri,schema),...(0,_common.getElementsFieldProps)(params,uri),name:uri}};}}}}return{meta,elements};}function transformArraySchemaBoolean(schema,rootSchema,values,params){const{required:isRequired=false,uri:parentUri,index:arrayIndex}=params;const uri=(0,_common.getUri)(parentUri,arrayIndex);const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(schema);const description=(0,_common.getDescription)(schema);let meta;let elements;if((0,_common.hasEnum)(schema)){const items=(0,_common.getEnum)(schema);const selectedItems=(0,_common.getSelectedItems)(values,uri);meta={uri,item:arrayIndex,type:'boolean',schema,rootSchema,required:isRequired,selectedItems,...metaProps};elements={...title,...description,enum:{items,required:isRequired,selectedItems,name:uri}};}else{if((0,_common.hasAnyOf)(schema)){const{anyOf}=schema;const items=anyOf.map((schema,index)=>transformArraySchemaBoolean(schema,rootSchema,values,{...params,required:isRequired,parentUri,uri,index}));const selectedItems=(0,_common.getSelectedItems)(values,uri);meta={uri,item:arrayIndex,type:'boolean',schema,rootSchema,required:isRequired,selectedItems,...metaProps};elements={...title,...description,anyOf:{items,required:isRequired,selectedItems,name:uri}};}else{if((0,_common.hasOneOf)(schema)){const{oneOf}=schema;const items=oneOf.map((schema,index)=>transformArraySchemaBoolean(schema,rootSchema,values,{...params,required:isRequired,parentUri,uri,index}));const selectedItems=(0,_common.getSelectedItems)(values,uri);meta={uri,item:arrayIndex,type:'boolean',schema,rootSchema,required:isRequired,selectedItems,...metaProps};elements={...title,...description,oneOf:{items,required:isRequired,selectedItems,name:uri}};}else{if((0,_common.hasAllOf)(schema)){const{allOf,...rest}=schema;const itemSchema=allOf.reduce((accumulator,schema)=>({...accumulator,...schema}),rest);meta={uri,item:arrayIndex,type:'boolean',schema,rootSchema,required:isRequired,...(0,_common.getMetaDefaultValue)(itemSchema,uri),...(0,_common.getMetaValue)(values,uri),...metaProps};elements={...title,...description,field:{required:isRequired,...(0,_common.getElementsFieldValue)(values,uri,itemSchema),...(0,_common.getElementsFieldProps)(params,uri),name:uri}};}else{meta={uri,item:arrayIndex,type:'boolean',schema,rootSchema,required:isRequired,...(0,_common.getMetaDefaultValue)(schema,uri),...(0,_common.getMetaValue)(values,uri),...metaProps};elements={...title,...description,field:{required:isRequired,...(0,_common.getElementsFieldValue)(values,uri,schema),...(0,_common.getElementsFieldProps)(params,uri),name:uri}};}}}}return{meta,elements};}function transformArraySchemaObject(schema,rootSchema,values,params){const{required:isRequired=false,uri:parentUri,index:arrayIndex}=params;const uri=(0,_common.getUri)(parentUri,arrayIndex);const maxProperties=(0,_common.getMaxProperties)(schema);const minProperties=(0,_common.getMinProperties)(schema);const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(schema);const description=(0,_common.getDescription)(schema);let meta;let elements;if((0,_common.hasEnum)(schema)){const items=(0,_common.getEnum)(schema);const selectedItems=(0,_common.getSelectedItems)(values,uri);meta={uri,item:arrayIndex,type:'object',schema,rootSchema,...maxProperties,...minProperties,required:isRequired,selectedItems,...metaProps};elements={...title,...description,enum:{items,required:isRequired,selectedItems,name:uri}};}else{if((0,_common.hasAnyOf)(schema)){const{anyOf}=schema;const items=anyOf.map((schema,index)=>transformArraySchemaObject(schema,rootSchema,values,{...params,parentUri,uri,index}));const selectedItems=(0,_common.getSelectedItems)(values,uri);meta={uri,item:arrayIndex,type:'object',schema,rootSchema,...maxProperties,...minProperties,required:isRequired,selectedItems,...metaProps};elements={...title,...description,anyOf:{items,required:isRequired,selectedItems,name:uri}};}else{if((0,_common.hasOneOf)(schema)){const{oneOf}=schema;const items=oneOf.map((schema,index)=>transformArraySchemaObject(schema,rootSchema,values,{...params,parentUri,uri,index}));const selectedItems=(0,_common.getSelectedItems)(values,uri);meta={uri,item:arrayIndex,type:'object',schema,rootSchema,...maxProperties,...minProperties,required:isRequired,selectedItems,...metaProps};elements={...title,...description,oneOf:{items,required:isRequired,selectedItems,name:uri}};}else{if((0,_common.hasAllOf)(schema)){const{allOf,...rest}=schema;const itemSchema=allOf.reduce((accumulator,schema)=>({...accumulator,...schema}),rest);meta={uri,item:arrayIndex,type:'object',schema,rootSchema,...maxProperties,...minProperties,required:isRequired,...(0,_common.getMetaDefaultValue)(itemSchema,uri),...(0,_common.getMetaValue)(values,uri),...metaProps};const{properties={},required=[]}=itemSchema;elements={...title,...description,fields:Object.entries(properties).map(([key,schema])=>transformObjectSchema(schema,rootSchema,values,{...params,required:required.includes(key),parentUri,uri,key}))};}else{meta={uri,item:arrayIndex,type:'object',schema,rootSchema,...maxProperties,...minProperties,required:isRequired,...(0,_common.getMetaDefaultValue)(schema,uri),...(0,_common.getMetaValue)(values,uri),...metaProps};const{properties={},required=[]}=schema;elements={...title,...description,fields:Object.entries(properties).map(([key,schema])=>transformObjectSchema(schema,rootSchema,values,{...params,required:required.includes(key),parentUri,uri,key}))};}}}}return{meta,elements};}function transformArraySchemaArray(schema,rootSchema,values,params){const{required:isRequired=false,uri:parentUri,index:arrayIndex}=params;const uri=(0,_common.getUri)(parentUri,arrayIndex);const minItems=(0,_common.getMinItems)(schema);const maxItems=(0,_common.getMaxItems)(schema);const hasUniqueItems=(0,_common.getHasUniqueItems)(schema);const maxContains=(0,_common.getMaxContains)(schema);const minContains=(0,_common.getMinContains)(schema);const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(schema);const description=(0,_common.getDescription)(schema);let meta;let elements;if((0,_common.hasEnum)(schema)){const items=(0,_common.getEnum)(schema);const selectedItems=(0,_common.getSelectedItems)(values,uri);meta={uri,item:arrayIndex,type:'array',schema,rootSchema,...minItems,...maxItems,...hasUniqueItems,...maxContains,...minContains,required:isRequired,selectedItems,...metaProps};elements={...title,...description,enum:{items,required:isRequired,selectedItems,name:uri}};}else{if((0,_common.hasAnyOf)(schema)){const{anyOf}=schema;const items=anyOf.map((schema,index)=>transformArraySchemaArray(schema,rootSchema,values,{...params,required:isRequired,parentUri,uri,index}));const selectedItems=(0,_common.getSelectedItems)(values,uri);meta={uri,item:arrayIndex,type:'array',schema,rootSchema,...minItems,...maxItems,...hasUniqueItems,...maxContains,...minContains,required:isRequired,selectedItems,...metaProps};elements={...title,...description,anyOf:{items,required:isRequired,selectedItems,name:uri}};}else{if((0,_common.hasOneOf)(schema)){const{oneOf}=schema;const items=oneOf.map((schema,index)=>transformArraySchemaArray(schema,rootSchema,values,{...params,required:isRequired,parentUri,uri,index}));const selectedItems=(0,_common.getSelectedItems)(values,uri);meta={uri,item:arrayIndex,type:'array',schema,rootSchema,...minItems,...maxItems,...hasUniqueItems,...maxContains,...minContains,required:isRequired,selectedItems,...metaProps};elements={...title,...description,oneOf:{items,required:isRequired,selectedItems,name:uri}};}else{if((0,_common.hasAllOf)(schema)){const{allOf,...rest}=schema;const itemSchema=allOf.reduce((accumulator,schema)=>({...accumulator,...schema}),rest);meta={uri,item:arrayIndex,type:'array',schema,rootSchema,...minItems,...maxItems,...hasUniqueItems,...maxContains,...minContains,required:isRequired,...(0,_common.getMetaDefaultValue)(itemSchema,uri),...(0,_common.getMetaValue)(values,uri),...metaProps};const{items=[]}=itemSchema;const fields=[].concat(items).map((schema,index)=>transformArraySchema(schema,rootSchema,values,{...params,parentUri,uri,index}));elements={...title,...description,fields};}else{meta={uri,item:arrayIndex,type:'array',schema,rootSchema,...minItems,...maxItems,...hasUniqueItems,...maxContains,...minContains,required:isRequired,...(0,_common.getMetaDefaultValue)(schema,uri),...(0,_common.getMetaValue)(values,uri),...metaProps};const{items=[]}=schema;const fields=[].concat(items).map((schema,index)=>transformArraySchema(schema,rootSchema,values,{...params,parentUri,uri,index}));elements={...title,...description,fields};}}}}return{meta,elements};}function transformArraySchemaNumber(schema,rootSchema,values,params){const{required:isRequired=false,uri:parentUri,index:arrayIndex}=params;const uri=(0,_common.getUri)(parentUri,arrayIndex);const isExclusiveMin=(0,_common.getIsExclusiveMin)(schema);const isExclusiveMax=(0,_common.getIsExclusiveMax)(schema);const min=(0,_common.getMin)(schema);const max=(0,_common.getMax)(schema);const step=(0,_common.getStep)(schema);const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(schema);const description=(0,_common.getDescription)(schema);let meta;let elements;if((0,_common.hasEnum)(schema)){const items=(0,_common.getEnum)(schema);const selectedItems=(0,_common.getSelectedItems)(values,uri);meta={uri,item:arrayIndex,type:'number',schema,rootSchema,...isExclusiveMin,...isExclusiveMax,...min,...max,...step,required:isRequired,selectedItems,...metaProps};elements={...title,...description,enum:{items,...min,...max,...step,required:isRequired,selectedItems,name:uri}};}else{if((0,_common.hasAnyOf)(schema)){const{anyOf}=schema;const items=anyOf.map((schema,index)=>transformArraySchemaNumber(schema,rootSchema,values,{...params,required:isRequired,parentUri,uri,index}));const selectedItems=(0,_common.getSelectedItems)(values,uri);meta={uri,item:arrayIndex,type:'number',schema,rootSchema,...isExclusiveMin,...isExclusiveMax,...min,...max,...step,required:isRequired,selectedItems,...metaProps};elements={...title,...description,anyOf:{items,...min,...max,...step,required:isRequired,selectedItems,name:uri}};}else{if((0,_common.hasOneOf)(schema)){const{oneOf}=schema;const items=oneOf.map((schema,index)=>transformArraySchemaNumber(schema,rootSchema,values,{...params,required:isRequired,parentUri,uri,index}));const selectedItems=(0,_common.getSelectedItems)(values,uri);meta={uri,item:arrayIndex,type:'number',schema,rootSchema,...isExclusiveMin,...isExclusiveMax,...min,...max,...step,required:isRequired,selectedItems,...metaProps};elements={...title,...description,oneOf:{items,...min,...max,...step,required:isRequired,selectedItems,name:uri}};}else{if((0,_common.hasAllOf)(schema)){const{allOf,...rest}=schema;const itemSchema=allOf.reduce((accumulator,schema)=>({...accumulator,...schema}),rest);meta={uri,item:arrayIndex,type:'number',schema,rootSchema,...isExclusiveMin,...isExclusiveMax,...min,...max,...step,required:isRequired,...(0,_common.getMetaDefaultValue)(itemSchema,uri),...(0,_common.getMetaValue)(values,uri),...metaProps};elements={...title,...description,field:{...min,...max,...step,required:isRequired,...(0,_common.getElementsFieldValue)(values,uri,itemSchema),...(0,_common.getElementsFieldProps)(params,uri),name:uri}};}else{meta={uri,item:arrayIndex,type:'number',schema,rootSchema,...isExclusiveMin,...isExclusiveMax,...min,...max,...step,required:isRequired,...(0,_common.getMetaDefaultValue)(schema,uri),...(0,_common.getMetaValue)(values,uri),...metaProps};elements={...title,...description,field:{...min,...max,...step,required:isRequired,...(0,_common.getElementsFieldValue)(values,uri,schema),...(0,_common.getElementsFieldProps)(params,uri),name:uri}};}}}}return{meta,elements};}function transformArraySchemaString(schema,rootSchema,values,params){const{required:isRequired=false,uri:parentUri,index:arrayIndex}=params;const uri=(0,_common.getUri)(parentUri,arrayIndex);const minLength=(0,_common.getMinLength)(schema);const maxLength=(0,_common.getMaxLength)(schema);const pattern=(0,_common.getPattern)(schema);const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(schema);const description=(0,_common.getDescription)(schema);let meta;let elements;if((0,_common.hasEnum)(schema)){const items=(0,_common.getEnum)(schema);const selectedItems=(0,_common.getSelectedItems)(values,uri);meta={uri,item:arrayIndex,type:'string',schema,rootSchema,...minLength,...maxLength,...pattern,required:isRequired,selectedItems,...metaProps};elements={...title,...description,enum:{items,...minLength,...maxLength,...pattern,required:isRequired,selectedItems,name:uri}};}else{if((0,_common.hasAnyOf)(schema)){const{anyOf}=schema;const items=anyOf.map((schema,index)=>transformArraySchemaString(schema,rootSchema,values,{...params,required:isRequired,parentUri,uri,index}));const selectedItems=(0,_common.getSelectedItems)(values,uri);meta={uri,item:arrayIndex,type:'string',schema,rootSchema,...minLength,...maxLength,...pattern,required:isRequired,selectedItems,...metaProps};elements={...title,...description,anyOf:{items,...minLength,...maxLength,...pattern,required:isRequired,selectedItems,name:uri}};}else{if((0,_common.hasOneOf)(schema)){const{oneOf}=schema;const items=oneOf.map((schema,index)=>transformArraySchemaString(schema,rootSchema,values,{...params,required:isRequired,parentUri,uri,index}));const selectedItems=(0,_common.getSelectedItems)(values,uri);meta={uri,item:arrayIndex,type:'string',schema,rootSchema,...minLength,...maxLength,...pattern,required:isRequired,selectedItems,...metaProps};elements={...title,...description,oneOf:{items,...minLength,...maxLength,...pattern,required:isRequired,selectedItems,name:uri}};}else{if((0,_common.hasAllOf)(schema)){const{allOf,...rest}=schema;const itemSchema=allOf.reduce((accumulator,schema)=>({...accumulator,...schema}),rest);meta={uri,item:arrayIndex,type:'string',schema,rootSchema,...minLength,...maxLength,...pattern,required:isRequired,...(0,_common.getMetaDefaultValue)(itemSchema,uri),...(0,_common.getMetaValue)(values,uri),...metaProps};elements={...title,...description,field:{...minLength,...maxLength,...pattern,required:isRequired,...(0,_common.getElementsFieldValue)(values,uri,itemSchema),...(0,_common.getElementsFieldProps)(params,uri),name:uri}};}else{meta={uri,item:arrayIndex,type:'string',schema,rootSchema,...minLength,...maxLength,...pattern,required:isRequired,...(0,_common.getMetaDefaultValue)(schema,uri),...(0,_common.getMetaValue)(values,uri),...metaProps};elements={...title,...description,field:{...minLength,...maxLength,...pattern,required:isRequired,...(0,_common.getElementsFieldValue)(values,uri,schema),...(0,_common.getElementsFieldProps)(params,uri),name:uri}};}}}}return{meta,elements};}function transformArraySchema(schema={},rootSchema=schema,values={},params={}){const{type}=schema;switch(type){case'null':return transformArraySchemaNull(schema,rootSchema,values,params);case'boolean':return transformArraySchemaBoolean(schema,rootSchema,values,params);case'object':return transformArraySchemaObject(schema,rootSchema,values,params);case'array':return transformArraySchemaArray(schema,rootSchema,values,params);case'string':return transformArraySchemaString(schema,rootSchema,values,params);case'number':return transformArraySchemaNumber(schema,rootSchema,values,params);default:throw new Error('Schema does not conform to Instance Data Model, https://json-schema.org/draft/2019-09/json-schema-core.html#rfc.section.4.2.1');}}function transformNull(rootSchema,values,params){const{parentUri='#',uri=(0,_common.getUri)(parentUri)}=params;const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(rootSchema);const description=(0,_common.getDescription)(rootSchema);let meta;let elements;if((0,_common.hasEnum)(rootSchema)){const items=(0,_common.getEnum)(rootSchema);const selectedItems=(0,_common.getSelectedItems)(values,uri);meta={uri,type:'null',schema:rootSchema,selectedItems,...metaProps};elements={...title,...description,enum:{items,selectedItems,name:uri}};}else{if((0,_common.hasAnyOf)(rootSchema)){const{anyOf}=rootSchema;const items=anyOf.map((schema,index)=>transformArraySchemaNull(schema,rootSchema,values,{...params,parentUri,uri:parentUri,index}));const selectedItems=(0,_common.getSelectedItems)(values,uri);meta={uri,type:'null',schema:rootSchema,selectedItems,...metaProps};elements={...title,...description,anyOf:{items,selectedItems,name:uri}};}else{if((0,_common.hasOneOf)(rootSchema)){const{oneOf}=rootSchema;const items=oneOf.map((schema,index)=>transformArraySchemaNull(schema,rootSchema,values,{...params,parentUri,uri:parentUri,index}));const selectedItems=(0,_common.getSelectedItems)(values,uri);meta={uri,type:'null',schema:rootSchema,selectedItems,...metaProps};elements={...title,...description,oneOf:{items,selectedItems,name:uri}};}else{if((0,_common.hasAllOf)(rootSchema)){const{allOf,...rest}=rootSchema;const itemSchema=allOf.reduce((accumulator,schema)=>({...accumulator,...schema}),rest);meta={uri,type:'null',schema:rootSchema,...(0,_common.getMetaDefaultValue)(itemSchema,uri),...(0,_common.getMetaValue)(values,uri),...metaProps};elements={...title,...description,field:{...(0,_common.getElementsFieldValue)(values,uri,itemSchema),...(0,_common.getElementsFieldProps)(params,uri),name:uri}};}else{meta={uri,type:'null',schema:rootSchema,...(0,_common.getMetaDefaultValue)(rootSchema,uri),...(0,_common.getMetaValue)(values,uri),...metaProps};elements={...title,...description,field:{...(0,_common.getElementsFieldValue)(values,uri,rootSchema),...(0,_common.getElementsFieldProps)(params,uri),name:uri}};}}}}return{meta,elements};}function transformBoolean(rootSchema,values,params){const{parentUri='#',uri=(0,_common.getUri)(parentUri)}=params;const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(rootSchema);const description=(0,_common.getDescription)(rootSchema);let meta;let elements;if((0,_common.hasEnum)(rootSchema)){const items=(0,_common.getEnum)(rootSchema);const selectedItems=(0,_common.getSelectedItems)(values,uri);meta={uri,type:'boolean',schema:rootSchema,selectedItems,...metaProps};elements={...title,...description,enum:{items,selectedItems,name:uri}};}else{if((0,_common.hasAnyOf)(rootSchema)){const{anyOf}=rootSchema;const items=anyOf.map((schema,index)=>transformArraySchemaBoolean(schema,rootSchema,values,{...params,parentUri,uri:parentUri,index}));const selectedItems=(0,_common.getSelectedItems)(values,uri);meta={uri,type:'boolean',schema:rootSchema,selectedItems,...metaProps};elements={...title,...description,anyOf:{items,selectedItems,name:uri}};}else{if((0,_common.hasOneOf)(rootSchema)){const{oneOf}=rootSchema;const items=oneOf.map((schema,index)=>transformArraySchemaBoolean(schema,rootSchema,values,{...params,parentUri,uri:parentUri,index}));const selectedItems=(0,_common.getSelectedItems)(values,uri);meta={uri,type:'boolean',schema:rootSchema,selectedItems,...metaProps};elements={...title,...description,oneOf:{items,selectedItems,name:uri}};}else{if((0,_common.hasAllOf)(rootSchema)){const{allOf,...rest}=rootSchema;const itemSchema=allOf.reduce((accumulator,schema)=>({...accumulator,...schema}),rest);meta={uri,type:'boolean',schema:rootSchema,...(0,_common.getMetaDefaultValue)(itemSchema,uri),...(0,_common.getMetaValue)(values,uri),...metaProps};elements={...title,...description,field:{...(0,_common.getElementsFieldValue)(values,uri,itemSchema),...(0,_common.getElementsFieldProps)(params,uri),name:uri}};}else{meta={uri,type:'boolean',schema:rootSchema,...(0,_common.getMetaDefaultValue)(rootSchema,uri),...(0,_common.getMetaValue)(values,uri),...metaProps};elements={...title,...description,field:{...(0,_common.getElementsFieldValue)(values,uri,rootSchema),...(0,_common.getElementsFieldProps)(params,uri),name:uri}};}}}}return{meta,elements};}function transformObject(rootSchema,values,params){const{parentUri='#',uri=(0,_common.getUri)(parentUri)}=params;const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(rootSchema);const description=(0,_common.getDescription)(rootSchema);let meta;let elements;if((0,_common.hasEnum)(rootSchema)){const items=(0,_common.getEnum)(rootSchema);const selectedItems=(0,_common.getSelectedItems)(values,uri);meta={uri,type:'object',schema:rootSchema,selectedItems,...metaProps};elements={...title,...description,enum:{items,selectedItems,name:uri}};}else{if((0,_common.hasAnyOf)(rootSchema)){const{anyOf}=rootSchema;const items=anyOf.map((schema,index)=>transformArraySchemaObject(schema,rootSchema,values,{...params,parentUri,uri:parentUri,index}));const selectedItems=(0,_common.getSelectedItems)(values,uri);meta={uri,type:'object',schema:rootSchema,selectedItems,...metaProps};elements={...title,...description,anyOf:{items,selectedItems,name:uri}};}else{if((0,_common.hasOneOf)(rootSchema)){const{oneOf}=rootSchema;const items=oneOf.map((schema,index)=>transformArraySchemaObject(schema,rootSchema,values,{...params,parentUri,uri:parentUri,index}));const selectedItems=(0,_common.getSelectedItems)(values,uri);meta={uri,type:'object',schema:rootSchema,selectedItems,...metaProps};elements={...title,...description,oneOf:{items,selectedItems,name:uri}};}else{if((0,_common.hasAllOf)(rootSchema)){const{allOf,...rest}=rootSchema;const itemSchema=allOf.reduce((accumulator,schema)=>({...accumulator,...schema}),rest);meta={uri,type:'object',schema:rootSchema,...(0,_common.getMetaDefaultValue)(itemSchema,uri),...(0,_common.getMetaValue)(values,uri),...metaProps};const{properties={},required=[]}=itemSchema;elements={...title,...description,fields:Object.entries(properties).map(([key,schema])=>transformObjectSchema(schema,rootSchema,values,{...params,required:required.includes(key),parentUri,uri:parentUri,key}))};}else{meta={uri,type:'object',schema:rootSchema,...(0,_common.getMetaDefaultValue)(rootSchema,uri),...(0,_common.getMetaValue)(values,uri),...metaProps};const{properties={},required=[]}=rootSchema;elements={...title,...description,fields:Object.entries(properties).map(([key,schema])=>transformObjectSchema(schema,rootSchema,values,{...params,required:required.includes(key),parentUri,uri:parentUri,key}))};}}}}return{meta,elements};}function transformArray(rootSchema,values,params){const{parentUri='#',uri=(0,_common.getUri)(parentUri)}=params;const minItems=(0,_common.getMinItems)(rootSchema);const maxItems=(0,_common.getMaxItems)(rootSchema);const hasUniqueItems=(0,_common.getHasUniqueItems)(rootSchema);const maxContains=(0,_common.getMaxContains)(rootSchema);const minContains=(0,_common.getMinContains)(rootSchema);const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(rootSchema);const description=(0,_common.getDescription)(rootSchema);let meta;let elements;if((0,_common.hasEnum)(rootSchema)){const items=(0,_common.getEnum)(rootSchema);const selectedItems=(0,_common.getSelectedItems)(values,uri);meta={uri,type:'array',schema:rootSchema,...minItems,...maxItems,...hasUniqueItems,...maxContains,...minContains,selectedItems,...metaProps};elements={...title,...description,enum:{items,selectedItems,name:uri}};}else{if((0,_common.hasAnyOf)(rootSchema)){const{anyOf}=rootSchema;const items=anyOf.map((schema,index)=>transformArraySchemaArray(schema,rootSchema,values,{...params,parentUri,uri:parentUri,index}));const selectedItems=(0,_common.getSelectedItems)(values,uri);meta={uri,type:'array',schema:rootSchema,...minItems,...maxItems,...hasUniqueItems,...maxContains,...minContains,selectedItems,...metaProps};elements={...title,...description,anyOf:{items,selectedItems,name:uri}};}else{if((0,_common.hasOneOf)(rootSchema)){const{oneOf}=rootSchema;const items=oneOf.map((schema,index)=>transformArraySchemaArray(schema,rootSchema,values,{...params,parentUri,uri:parentUri,index}));const selectedItems=(0,_common.getSelectedItems)(values,uri);meta={uri,type:'array',schema:rootSchema,...minItems,...maxItems,...hasUniqueItems,...maxContains,...minContains,selectedItems,...metaProps};elements={...title,...description,oneOf:{items,selectedItems,name:uri}};}else{if((0,_common.hasAllOf)(rootSchema)){const{allOf,...rest}=rootSchema;const itemSchema=allOf.reduce((accumulator,schema)=>({...accumulator,...schema}),rest);meta={uri,type:'array',schema:rootSchema,...minItems,...maxItems,...hasUniqueItems,...maxContains,...minContains,...(0,_common.getMetaDefaultValue)(itemSchema,uri),...(0,_common.getMetaValue)(values,uri),...metaProps};const{items=[]}=itemSchema;const fields=[].concat(items).map((schema,index)=>transformArraySchema(schema,rootSchema,values,{...params,parentUri,uri:parentUri,index}));elements={...title,...description,fields};}else{meta={uri,type:'array',schema:rootSchema,...minItems,...maxItems,...hasUniqueItems,...maxContains,...minContains,...(0,_common.getMetaDefaultValue)(rootSchema,uri),...(0,_common.getMetaValue)(values,uri),...metaProps};const{items=[]}=rootSchema;const fields=[].concat(items).map((schema,index)=>transformArraySchema(schema,rootSchema,values,{...params,parentUri,uri:parentUri,index}));elements={...title,...description,fields};}}}}return{meta,elements};}function transformNumber(rootSchema,values,params){const{parentUri='#',uri=(0,_common.getUri)(parentUri)}=params;const isExclusiveMin=(0,_common.getIsExclusiveMin)(rootSchema);const isExclusiveMax=(0,_common.getIsExclusiveMax)(rootSchema);const min=(0,_common.getMin)(rootSchema);const max=(0,_common.getMax)(rootSchema);const step=(0,_common.getStep)(rootSchema);const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(rootSchema);const description=(0,_common.getDescription)(rootSchema);let meta;let elements;if((0,_common.hasEnum)(rootSchema)){const items=(0,_common.getEnum)(rootSchema);const selectedItems=(0,_common.getSelectedItems)(values,uri);meta={uri,type:'number',schema:rootSchema,...isExclusiveMin,...isExclusiveMax,...min,...max,...step,selectedItems,...metaProps};elements={...title,...description,enum:{items,...min,...max,...step,selectedItems,name:uri}};}else{if((0,_common.hasAnyOf)(rootSchema)){const{anyOf}=rootSchema;const items=anyOf.map((schema,index)=>transformArraySchemaNumber(schema,rootSchema,values,{...params,parentUri,uri:parentUri,index}));const selectedItems=(0,_common.getSelectedItems)(values,uri);meta={uri,type:'number',schema:rootSchema,...isExclusiveMin,...isExclusiveMax,...min,...max,...step,selectedItems,...metaProps};elements={...title,...description,anyOf:{items,selectedItems,name:uri}};}else{if((0,_common.hasOneOf)(rootSchema)){const{oneOf}=rootSchema;const items=oneOf.map((schema,index)=>transformArraySchemaNumber(schema,rootSchema,values,{...params,parentUri,uri:parentUri,index}));const selectedItems=(0,_common.getSelectedItems)(values,uri);meta={uri,type:'number',schema:rootSchema,...isExclusiveMin,...isExclusiveMax,...min,...max,...step,selectedItems,...metaProps};elements={...title,...description,oneOf:{items,selectedItems,name:uri}};}else{if((0,_common.hasAllOf)(rootSchema)){const{allOf,...rest}=rootSchema;const itemSchema=allOf.reduce((accumulator,schema)=>({...accumulator,...schema}),rest);meta={uri,type:'number',schema:rootSchema,...isExclusiveMin,...isExclusiveMax,...min,...max,...step,...(0,_common.getMetaDefaultValue)(itemSchema,uri),...(0,_common.getMetaValue)(values,uri),...metaProps};elements={...title,...description,field:{...min,...max,...step,...(0,_common.getElementsFieldValue)(values,uri,itemSchema),...(0,_common.getElementsFieldProps)(params,uri),name:uri}};}else{meta={uri,type:'number',schema:rootSchema,...isExclusiveMin,...isExclusiveMax,...min,...max,...step,...(0,_common.getMetaDefaultValue)(rootSchema,uri),...(0,_common.getMetaValue)(values,uri),...metaProps};elements={...title,...description,field:{...min,...max,...step,...(0,_common.getElementsFieldValue)(values,uri,rootSchema),...(0,_common.getElementsFieldProps)(params,uri),name:uri}};}}}}return{meta,elements};}function transformString(rootSchema,values,params){const{parentUri='#',uri=(0,_common.getUri)(parentUri)}=params;const minLength=(0,_common.getMinLength)(rootSchema);const maxLength=(0,_common.getMaxLength)(rootSchema);const pattern=(0,_common.getPattern)(rootSchema);const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(rootSchema);const description=(0,_common.getDescription)(rootSchema);let meta;let elements;if((0,_common.hasEnum)(rootSchema)){const items=(0,_common.getEnum)(rootSchema);const selectedItems=(0,_common.getSelectedItems)(values,uri);meta={uri,type:'string',schema:rootSchema,...minLength,...maxLength,...pattern,selectedItems,...metaProps};elements={...title,...description,enum:{items,...minLength,...maxLength,...pattern,selectedItems,name:uri}};}else{if((0,_common.hasAnyOf)(rootSchema)){const{anyOf}=rootSchema;const items=anyOf.map((schema,index)=>transformArraySchemaString(schema,rootSchema,values,{...params,parentUri,uri:parentUri,index}));const selectedItems=(0,_common.getSelectedItems)(values,uri);meta={uri,type:'string',schema:rootSchema,...minLength,...maxLength,...pattern,selectedItems,...metaProps};elements={...title,...description,anyOf:{items,selectedItems,name:uri}};}else{if((0,_common.hasOneOf)(rootSchema)){const{oneOf}=rootSchema;const items=oneOf.map((schema,index)=>transformArraySchemaString(schema,rootSchema,values,{...params,parentUri,uri:parentUri,index}));const selectedItems=(0,_common.getSelectedItems)(values,uri);meta={uri,type:'string',schema:rootSchema,...minLength,...maxLength,...pattern,selectedItems,...metaProps};elements={...title,...description,oneOf:{items,selectedItems,name:uri}};}else{if((0,_common.hasAllOf)(rootSchema)){const{allOf,...rest}=rootSchema;const itemSchema=allOf.reduce((accumulator,schema)=>({...accumulator,...schema}),rest);meta={uri,type:'string',schema:rootSchema,...minLength,...maxLength,...pattern,...(0,_common.getMetaDefaultValue)(itemSchema,uri),...(0,_common.getMetaValue)(values,uri),...metaProps};elements={...title,...description,field:{...minLength,...maxLength,...pattern,...(0,_common.getElementsFieldValue)(values,uri,itemSchema),...(0,_common.getElementsFieldProps)(params,uri),name:uri}};}else{meta={uri,type:'string',schema:rootSchema,...minLength,...maxLength,...pattern,...(0,_common.getMetaDefaultValue)(rootSchema,uri),...(0,_common.getMetaValue)(values,uri),...metaProps};elements={...title,...description,field:{...minLength,...maxLength,...pattern,...(0,_common.getElementsFieldValue)(values,uri,rootSchema),...(0,_common.getElementsFieldProps)(params,uri),name:uri}};}}}}return{meta,elements};}function transform(rootSchema={},values={},params={}){log('toZashiki');const{type}=rootSchema;switch(type){case'null':return transformNull(rootSchema,values,params);case'boolean':return transformBoolean(rootSchema,values,params);case'object':return transformObject(rootSchema,values,params);case'array':return transformArray(rootSchema,values,params);case'number':return transformNumber(rootSchema,values,params);case'string':return transformString(rootSchema,values,params);default:throw new Error('Schema does not conform to Instance Data Model, https://json-schema.org/draft/2019-09/json-schema-core.html#rfc.section.4.2.1');}}