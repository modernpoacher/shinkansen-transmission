"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.transformNullForEnum=transformNullForEnum;exports.transformNullForAnyOf=transformNullForAnyOf;exports.transformNullForOneOf=transformNullForOneOf;exports.transformNullForAllOf=transformNullForAllOf;exports.transformNull=transformNull;exports.transformBooleanForEnum=transformBooleanForEnum;exports.transformBooleanForAnyOf=transformBooleanForAnyOf;exports.transformBooleanForOneOf=transformBooleanForOneOf;exports.transformBooleanForAllOf=transformBooleanForAllOf;exports.transformBoolean=transformBoolean;exports.transformObjectForEnum=transformObjectForEnum;exports.transformObjectForAnyOf=transformObjectForAnyOf;exports.transformObjectForOneOf=transformObjectForOneOf;exports.transformObjectForAllOf=transformObjectForAllOf;exports.transformObject=transformObject;exports.transformArrayForEnum=transformArrayForEnum;exports.transformArrayForAnyOf=transformArrayForAnyOf;exports.transformArrayForOneOf=transformArrayForOneOf;exports.transformArrayForAllOf=transformArrayForAllOf;exports.transformArray=transformArray;exports.transformNumberForEnum=transformNumberForEnum;exports.transformNumberForAnyOf=transformNumberForAnyOf;exports.transformNumberForOneOf=transformNumberForOneOf;exports.transformNumberForAllOf=transformNumberForAllOf;exports.transformNumber=transformNumber;exports.transformStringForEnum=transformStringForEnum;exports.transformStringForAnyOf=transformStringForAnyOf;exports.transformStringForOneOf=transformStringForOneOf;exports.transformStringForAllOf=transformStringForAllOf;exports.transformString=transformString;exports.default=toZashiki;var _debug=_interopRequireDefault(require("debug"));var _common=require("../common");var _transformSchema=require("./transform-schema");function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}const log=(0,_debug.default)('shinkansen-transmission:to-zashiki:root-schema');function transformNullForEnum(rootSchema,values,params){const metaProps=(0,_common.getMetaProps)(params,'#/');const title=(0,_common.getTitle)(rootSchema);const description=(0,_common.getDescription)(rootSchema);const items=(0,_common.getEnum)(rootSchema);const selectedItems=(0,_common.getSelectedItems)(values,'#/');const meta={uri:'#/',type:'null',schema:rootSchema,selectedItems,...metaProps};const elements={...title,...description,enum:{items,selectedItems,id:'#/'}};return{meta,elements};}function transformNullForAnyOf(rootSchema,values,params){const metaProps=(0,_common.getMetaProps)(params,'#/');const title=(0,_common.getTitle)(rootSchema);const description=(0,_common.getDescription)(rootSchema);const{anyOf}=rootSchema;const items=anyOf.map((schema,index)=>(0,_transformSchema.transformArraySchemaNull)(schema,rootSchema,values,{...params,parentUri:'#',index}));const selectedItems=(0,_common.getSelectedItems)(values,'#/');const meta={uri:'#/',type:'null',schema:rootSchema,selectedItems,...metaProps};const elements={...title,...description,anyOf:{items,selectedItems,id:'#/'}};return{meta,elements};}function transformNullForOneOf(rootSchema,values,params){const metaProps=(0,_common.getMetaProps)(params,'#/');const title=(0,_common.getTitle)(rootSchema);const description=(0,_common.getDescription)(rootSchema);const{oneOf}=rootSchema;const items=oneOf.map((schema,index)=>(0,_transformSchema.transformArraySchemaNull)(schema,rootSchema,values,{...params,parentUri:'#',index}));const selectedItems=(0,_common.getSelectedItems)(values,'#/');const meta={uri:'#/',type:'null',schema:rootSchema,selectedItems,...metaProps};const elements={...title,...description,oneOf:{items,selectedItems,id:'#/'}};return{meta,elements};}function transformNullForAllOf(rootSchema,values,params){const{allOf,...rest}=rootSchema;const itemSchema=allOf.reduce((accumulator,schema)=>({...accumulator,...schema}),rest);const metaProps=(0,_common.getMetaProps)(params,'#/');const title=(0,_common.getTitle)(rootSchema);const description=(0,_common.getDescription)(rootSchema);const meta={uri:'#/',type:'null',schema:rootSchema,...(0,_common.getMetaDefaultValue)(itemSchema,'#/'),...(0,_common.getMetaValue)(values,'#/',itemSchema),...metaProps};const elements={...title,...description,field:{...(0,_common.getElementsFieldValue)(values,'#/',itemSchema),...(0,_common.getElementsFieldProps)(params,'#/'),id:'#/'}};return{meta,elements};}function transformNull(rootSchema,values,params){if((0,_common.hasEnum)(rootSchema)){return transformNullForEnum(rootSchema,values,params);}else{if((0,_common.hasAnyOf)(rootSchema)){return transformNullForAnyOf(rootSchema,values,params);}else{if((0,_common.hasOneOf)(rootSchema)){return transformNullForOneOf(rootSchema,values,params);}else{if((0,_common.hasAllOf)(rootSchema)){return transformNullForAllOf(rootSchema,values,params);}else{const metaProps=(0,_common.getMetaProps)(params,'#/');const title=(0,_common.getTitle)(rootSchema);const description=(0,_common.getDescription)(rootSchema);const meta={uri:'#/',type:'null',schema:rootSchema,...(0,_common.getMetaDefaultValue)(rootSchema,'#/'),...(0,_common.getMetaValue)(values,'#/',rootSchema),...metaProps};const elements={...title,...description,field:{...(0,_common.getElementsFieldValue)(values,'#/',rootSchema),...(0,_common.getElementsFieldProps)(params,'#/'),id:'#/'}};return{meta,elements};}}}}}function transformBooleanForEnum(rootSchema,values,params){const metaProps=(0,_common.getMetaProps)(params,'#/');const title=(0,_common.getTitle)(rootSchema);const description=(0,_common.getDescription)(rootSchema);const items=(0,_common.getEnum)(rootSchema);const selectedItems=(0,_common.getSelectedItems)(values,'#/');const meta={uri:'#/',type:'boolean',schema:rootSchema,selectedItems,...metaProps};const elements={...title,...description,enum:{items,selectedItems,id:'#/'}};return{meta,elements};}function transformBooleanForAnyOf(rootSchema,values,params){const metaProps=(0,_common.getMetaProps)(params,'#/');const title=(0,_common.getTitle)(rootSchema);const description=(0,_common.getDescription)(rootSchema);const{anyOf}=rootSchema;const items=anyOf.map((schema,index)=>(0,_transformSchema.transformArraySchemaBoolean)(schema,rootSchema,values,{...params,parentUri:'#',index}));const selectedItems=(0,_common.getSelectedItems)(values,'#/');const meta={uri:'#/',type:'boolean',schema:rootSchema,selectedItems,...metaProps};const elements={...title,...description,anyOf:{items,selectedItems,id:'#/'}};return{meta,elements};}function transformBooleanForOneOf(rootSchema,values,params){const metaProps=(0,_common.getMetaProps)(params,'#/');const title=(0,_common.getTitle)(rootSchema);const description=(0,_common.getDescription)(rootSchema);const{oneOf}=rootSchema;const items=oneOf.map((schema,index)=>(0,_transformSchema.transformArraySchemaBoolean)(schema,rootSchema,values,{...params,parentUri:'#',index}));const selectedItems=(0,_common.getSelectedItems)(values,'#/');const meta={uri:'#/',type:'boolean',schema:rootSchema,selectedItems,...metaProps};const elements={...title,...description,oneOf:{items,selectedItems,id:'#/'}};return{meta,elements};}function transformBooleanForAllOf(rootSchema,values,params){const{allOf,...rest}=rootSchema;const itemSchema=allOf.reduce((accumulator,schema)=>({...accumulator,...schema}),rest);const metaProps=(0,_common.getMetaProps)(params,'#/');const title=(0,_common.getTitle)(rootSchema);const description=(0,_common.getDescription)(rootSchema);const meta={uri:'#/',type:'boolean',schema:rootSchema,...(0,_common.getMetaDefaultValue)(itemSchema,'#/'),...(0,_common.getMetaValue)(values,'#/',itemSchema),...metaProps};const elements={...title,...description,field:{...(0,_common.getElementsFieldValue)(values,'#/',itemSchema),...(0,_common.getElementsFieldProps)(params,'#/'),id:'#/'}};return{meta,elements};}function transformBoolean(rootSchema,values,params){if((0,_common.hasEnum)(rootSchema)){return transformBooleanForEnum(rootSchema,values,params);}else{if((0,_common.hasAnyOf)(rootSchema)){return transformBooleanForAnyOf(rootSchema,values,params);}else{if((0,_common.hasOneOf)(rootSchema)){return transformBooleanForOneOf(rootSchema,values,params);}else{if((0,_common.hasAllOf)(rootSchema)){return transformBooleanForAllOf(rootSchema,values,params);}else{const metaProps=(0,_common.getMetaProps)(params,'#/');const title=(0,_common.getTitle)(rootSchema);const description=(0,_common.getDescription)(rootSchema);const meta={uri:'#/',type:'boolean',schema:rootSchema,...(0,_common.getMetaDefaultValue)(rootSchema,'#/'),...(0,_common.getMetaValue)(values,'#/',rootSchema),...metaProps};const elements={...title,...description,field:{...(0,_common.getElementsFieldValue)(values,'#/',rootSchema),...(0,_common.getElementsFieldProps)(params,'#/'),id:'#/'}};return{meta,elements};}}}}}function transformObjectForEnum(rootSchema,values,params){const metaProps=(0,_common.getMetaProps)(params,'#/');const title=(0,_common.getTitle)(rootSchema);const description=(0,_common.getDescription)(rootSchema);const items=(0,_common.getEnum)(rootSchema);const selectedItems=(0,_common.getSelectedItems)(values,'#/');const minProperties=(0,_common.getMinProperties)(rootSchema);const maxProperties=(0,_common.getMaxProperties)(rootSchema);const meta={uri:'#/',type:'object',schema:rootSchema,...minProperties,...maxProperties,...(0,_common.getMetaDefaultValue)(rootSchema,'#/'),...(0,_common.getMetaValue)(values,'#/',rootSchema),selectedItems,...metaProps};const elements={...title,...description,enum:{items,...minProperties,...maxProperties,selectedItems,id:'#/'}};return{meta,elements};}function transformObjectForAnyOf(rootSchema,values,params){const metaProps=(0,_common.getMetaProps)(params,'#/');const title=(0,_common.getTitle)(rootSchema);const description=(0,_common.getDescription)(rootSchema);const{anyOf}=rootSchema;const items=anyOf.map((schema,index)=>(0,_transformSchema.transformArraySchemaObject)(schema,rootSchema,values,{...params,parentUri:'#',index}));const selectedItems=(0,_common.getSelectedItems)(values,'#/');const minProperties=(0,_common.getMinProperties)(rootSchema);const maxProperties=(0,_common.getMaxProperties)(rootSchema);const meta={uri:'#/',type:'object',schema:rootSchema,...minProperties,...maxProperties,...(0,_common.getMetaDefaultValue)(rootSchema,'#/'),...(0,_common.getMetaValue)(values,'#/',rootSchema),selectedItems,...metaProps};const elements={...title,...description,anyOf:{items,...minProperties,...maxProperties,selectedItems,id:'#/'}};return{meta,elements};}function transformObjectForOneOf(rootSchema,values,params){const metaProps=(0,_common.getMetaProps)(params,'#/');const title=(0,_common.getTitle)(rootSchema);const description=(0,_common.getDescription)(rootSchema);const{oneOf}=rootSchema;const items=oneOf.map((schema,index)=>(0,_transformSchema.transformArraySchemaObject)(schema,rootSchema,values,{...params,parentUri:'#',index}));const selectedItems=(0,_common.getSelectedItems)(values,'#/');const minProperties=(0,_common.getMinProperties)(rootSchema);const maxProperties=(0,_common.getMaxProperties)(rootSchema);const meta={uri:'#/',type:'object',schema:rootSchema,...minProperties,...maxProperties,...(0,_common.getMetaDefaultValue)(rootSchema,'#/'),...(0,_common.getMetaValue)(values,'#/',rootSchema),selectedItems,...metaProps};const elements={...title,...description,oneOf:{items,...minProperties,...maxProperties,selectedItems,id:'#/'}};return{meta,elements};}function transformObjectForAllOf(rootSchema,values,params){const{allOf,...rest}=rootSchema;const itemSchema=allOf.reduce((accumulator,schema)=>({...accumulator,...schema}),rest);const metaProps=(0,_common.getMetaProps)(params,'#/');const title=(0,_common.getTitle)(rootSchema);const description=(0,_common.getDescription)(rootSchema);const minProperties=(0,_common.getMinProperties)(itemSchema);const maxProperties=(0,_common.getMaxProperties)(itemSchema);const meta={uri:'#/',type:'object',schema:rootSchema,...minProperties,...maxProperties,...(0,_common.getMetaDefaultValue)(itemSchema,'#/'),...(0,_common.getMetaValue)(values,'#/',itemSchema),...metaProps};const{properties={},required=[]}=itemSchema;const elements={...title,...description,fields:Object.entries(properties).map(([key,schema])=>(0,_transformSchema.transformObjectSchema)(schema,rootSchema,values,{...params,required:required.includes(key),parentUri:'#',key}))};return{meta,elements};}function transformObject(rootSchema,values,params){if((0,_common.hasEnum)(rootSchema)){return transformObjectForEnum(rootSchema,values,params);}else{if((0,_common.hasAnyOf)(rootSchema)){return transformObjectForAnyOf(rootSchema,values,params);}else{if((0,_common.hasOneOf)(rootSchema)){return transformObjectForOneOf(rootSchema,values,params);}else{if((0,_common.hasAllOf)(rootSchema)){return transformObjectForAllOf(rootSchema,values,params);}else{const metaProps=(0,_common.getMetaProps)(params,'#/');const title=(0,_common.getTitle)(rootSchema);const description=(0,_common.getDescription)(rootSchema);const minProperties=(0,_common.getMinProperties)(rootSchema);const maxProperties=(0,_common.getMaxProperties)(rootSchema);const meta={uri:'#/',type:'object',schema:rootSchema,...minProperties,...maxProperties,...(0,_common.getMetaDefaultValue)(rootSchema,'#/'),...(0,_common.getMetaValue)(values,'#/',rootSchema),...metaProps};const{properties={},required=[]}=rootSchema;const elements={...title,...description,fields:Object.entries(properties).map(([key,schema])=>(0,_transformSchema.transformObjectSchema)(schema,rootSchema,values,{...params,required:required.includes(key),parentUri:'#',key}))};return{meta,elements};}}}}}function transformArrayForEnum(rootSchema,values,params){const metaProps=(0,_common.getMetaProps)(params,'#/');const title=(0,_common.getTitle)(rootSchema);const description=(0,_common.getDescription)(rootSchema);const items=(0,_common.getEnum)(rootSchema);const selectedItems=(0,_common.getSelectedItems)(values,'#/');const minItems=(0,_common.getMinItems)(rootSchema);const maxItems=(0,_common.getMaxItems)(rootSchema);const hasUniqueItems=(0,_common.getHasUniqueItems)(rootSchema);const maxContains=(0,_common.getMaxContains)(rootSchema);const minContains=(0,_common.getMinContains)(rootSchema);const meta={uri:'#/',type:'array',schema:rootSchema,...minItems,...maxItems,...hasUniqueItems,...maxContains,...minContains,selectedItems,...metaProps};const elements={...title,...description,enum:{items,...minItems,...maxItems,...hasUniqueItems,...maxContains,...minContains,selectedItems,id:'#/'}};return{meta,elements};}function transformArrayForAnyOf(rootSchema,values,params){const metaProps=(0,_common.getMetaProps)(params,'#/');const title=(0,_common.getTitle)(rootSchema);const description=(0,_common.getDescription)(rootSchema);const{anyOf}=rootSchema;const items=anyOf.map((schema,index)=>(0,_transformSchema.transformArraySchemaArray)(schema,rootSchema,values,{...params,parentUri:'#',index}));const selectedItems=(0,_common.getSelectedItems)(values,'#/');const minItems=(0,_common.getMinItems)(rootSchema);const maxItems=(0,_common.getMaxItems)(rootSchema);const hasUniqueItems=(0,_common.getHasUniqueItems)(rootSchema);const maxContains=(0,_common.getMaxContains)(rootSchema);const minContains=(0,_common.getMinContains)(rootSchema);const meta={uri:'#/',type:'array',schema:rootSchema,...minItems,...maxItems,...hasUniqueItems,...maxContains,...minContains,selectedItems,...metaProps};const elements={...title,...description,anyOf:{items,...minItems,...maxItems,...hasUniqueItems,...maxContains,...minContains,selectedItems,id:'#/'}};return{meta,elements};}function transformArrayForOneOf(rootSchema,values,params){const metaProps=(0,_common.getMetaProps)(params,'#/');const title=(0,_common.getTitle)(rootSchema);const description=(0,_common.getDescription)(rootSchema);const{oneOf}=rootSchema;const items=oneOf.map((schema,index)=>(0,_transformSchema.transformArraySchemaArray)(schema,rootSchema,values,{...params,parentUri:'#',index}));const selectedItems=(0,_common.getSelectedItems)(values,'#/');const minItems=(0,_common.getMinItems)(rootSchema);const maxItems=(0,_common.getMaxItems)(rootSchema);const hasUniqueItems=(0,_common.getHasUniqueItems)(rootSchema);const maxContains=(0,_common.getMaxContains)(rootSchema);const minContains=(0,_common.getMinContains)(rootSchema);const meta={uri:'#/',type:'array',schema:rootSchema,...minItems,...maxItems,...hasUniqueItems,...maxContains,...minContains,selectedItems,...metaProps};const elements={...title,...description,oneOf:{items,...minItems,...maxItems,...hasUniqueItems,...maxContains,...minContains,selectedItems,id:'#/'}};return{meta,elements};}function transformArrayForAllOf(rootSchema,values,params){const{allOf,...rest}=rootSchema;const itemSchema=allOf.reduce((accumulator,schema)=>({...accumulator,...schema}),rest);const metaProps=(0,_common.getMetaProps)(params,'#/');const title=(0,_common.getTitle)(rootSchema);const description=(0,_common.getDescription)(rootSchema);const minItems=(0,_common.getMinItems)(itemSchema);const maxItems=(0,_common.getMaxItems)(itemSchema);const hasUniqueItems=(0,_common.getHasUniqueItems)(itemSchema);const maxContains=(0,_common.getMaxContains)(itemSchema);const minContains=(0,_common.getMinContains)(itemSchema);const meta={uri:'#/',type:'array',schema:rootSchema,...minItems,...maxItems,...hasUniqueItems,...maxContains,...minContains,...(0,_common.getMetaDefaultValue)(itemSchema,'#/'),...(0,_common.getMetaValue)(values,'#/',itemSchema),...metaProps};const{items=[]}=itemSchema;if((0,_common.isArray)(items)){const elements={...title,...description,fields:items.map((schema,index)=>(0,_transformSchema.transformArraySchema)(schema,rootSchema,values,{...params,parentUri:'#',index}))};return{meta,elements};}const elements={...title,...description,fields:[(0,_transformSchema.transformArraySchema)(items,rootSchema,values,{...params,parentUri:'#'})]};return{meta,elements};}function transformArray(rootSchema,values,params){if((0,_common.hasEnum)(rootSchema)){return transformArrayForEnum(rootSchema,values,params);}else{if((0,_common.hasAnyOf)(rootSchema)){return transformArrayForAnyOf(rootSchema,values,params);}else{if((0,_common.hasOneOf)(rootSchema)){return transformArrayForOneOf(rootSchema,values,params);}else{if((0,_common.hasAllOf)(rootSchema)){return transformArrayForAllOf(rootSchema,values,params);}else{const metaProps=(0,_common.getMetaProps)(params,'#/');const title=(0,_common.getTitle)(rootSchema);const description=(0,_common.getDescription)(rootSchema);const minItems=(0,_common.getMinItems)(rootSchema);const maxItems=(0,_common.getMaxItems)(rootSchema);const hasUniqueItems=(0,_common.getHasUniqueItems)(rootSchema);const maxContains=(0,_common.getMaxContains)(rootSchema);const minContains=(0,_common.getMinContains)(rootSchema);const meta={uri:'#/',type:'array',schema:rootSchema,...minItems,...maxItems,...hasUniqueItems,...maxContains,...minContains,...(0,_common.getMetaDefaultValue)(rootSchema,'#/'),...(0,_common.getMetaValue)(values,'#/',rootSchema),...metaProps};const{items=[]}=rootSchema;if((0,_common.isArray)(items)){const elements={...title,...description,fields:items.map((schema,index)=>(0,_transformSchema.transformArraySchema)(schema,rootSchema,values,{...params,parentUri:'#',index}))};return{meta,elements};}const elements={...title,...description,fields:[(0,_transformSchema.transformArraySchema)(items,rootSchema,values,{...params,parentUri:'#'})]};return{meta,elements};}}}}}function transformNumberForEnum(rootSchema,values,params){const metaProps=(0,_common.getMetaProps)(params,'#/');const title=(0,_common.getTitle)(rootSchema);const description=(0,_common.getDescription)(rootSchema);const items=(0,_common.getEnum)(rootSchema);const selectedItems=(0,_common.getSelectedItems)(values,'#/');const isExclusiveMin=(0,_common.getIsExclusiveMin)(rootSchema);const isExclusiveMax=(0,_common.getIsExclusiveMax)(rootSchema);const min=(0,_common.getMin)(rootSchema);const max=(0,_common.getMax)(rootSchema);const step=(0,_common.getStep)(rootSchema);const meta={uri:'#/',type:'number',schema:rootSchema,...isExclusiveMin,...isExclusiveMax,...min,...max,...step,selectedItems,...metaProps};const elements={...title,...description,enum:{items,...min,...max,...step,selectedItems,id:'#/'}};return{meta,elements};}function transformNumberForAnyOf(rootSchema,values,params){const metaProps=(0,_common.getMetaProps)(params,'#/');const title=(0,_common.getTitle)(rootSchema);const description=(0,_common.getDescription)(rootSchema);const{anyOf}=rootSchema;const items=anyOf.map((schema,index)=>(0,_transformSchema.transformArraySchemaNumber)(schema,rootSchema,values,{...params,parentUri:'#',index}));const selectedItems=(0,_common.getSelectedItems)(values,'#/');const isExclusiveMin=(0,_common.getIsExclusiveMin)(rootSchema);const isExclusiveMax=(0,_common.getIsExclusiveMax)(rootSchema);const min=(0,_common.getMin)(rootSchema);const max=(0,_common.getMax)(rootSchema);const step=(0,_common.getStep)(rootSchema);const meta={uri:'#/',type:'number',schema:rootSchema,...isExclusiveMin,...isExclusiveMax,...min,...max,...step,selectedItems,...metaProps};const elements={...title,...description,anyOf:{items,...min,...max,...step,selectedItems,id:'#/'}};return{meta,elements};}function transformNumberForOneOf(rootSchema,values,params){const metaProps=(0,_common.getMetaProps)(params,'#/');const title=(0,_common.getTitle)(rootSchema);const description=(0,_common.getDescription)(rootSchema);const{oneOf}=rootSchema;const items=oneOf.map((schema,index)=>(0,_transformSchema.transformArraySchemaNumber)(schema,rootSchema,values,{...params,parentUri:'#',index}));const selectedItems=(0,_common.getSelectedItems)(values,'#/');const isExclusiveMin=(0,_common.getIsExclusiveMin)(rootSchema);const isExclusiveMax=(0,_common.getIsExclusiveMax)(rootSchema);const min=(0,_common.getMin)(rootSchema);const max=(0,_common.getMax)(rootSchema);const step=(0,_common.getStep)(rootSchema);const meta={uri:'#/',type:'number',schema:rootSchema,...isExclusiveMin,...isExclusiveMax,...min,...max,...step,selectedItems,...metaProps};const elements={...title,...description,oneOf:{items,...min,...max,...step,selectedItems,id:'#/'}};return{meta,elements};}function transformNumberForAllOf(rootSchema,values,params){const{allOf,...rest}=rootSchema;const itemSchema=allOf.reduce((accumulator,schema)=>({...accumulator,...schema}),rest);const metaProps=(0,_common.getMetaProps)(params,'#/');const title=(0,_common.getTitle)(rootSchema);const description=(0,_common.getDescription)(rootSchema);const isExclusiveMin=(0,_common.getIsExclusiveMin)(itemSchema);const isExclusiveMax=(0,_common.getIsExclusiveMax)(itemSchema);const min=(0,_common.getMin)(itemSchema);const max=(0,_common.getMax)(itemSchema);const step=(0,_common.getStep)(itemSchema);const meta={uri:'#/',type:'number',schema:rootSchema,...isExclusiveMin,...isExclusiveMax,...min,...max,...step,...(0,_common.getMetaDefaultValue)(itemSchema,'#/'),...(0,_common.getMetaValue)(values,'#/',itemSchema),...metaProps};const elements={...title,...description,field:{...min,...max,...step,...(0,_common.getElementsFieldValue)(values,'#/',itemSchema),...(0,_common.getElementsFieldProps)(params,'#/'),id:'#/'}};return{meta,elements};}function transformNumber(rootSchema,values,params){if((0,_common.hasEnum)(rootSchema)){return transformNumberForEnum(rootSchema,values,params);}else{if((0,_common.hasAnyOf)(rootSchema)){return transformNumberForAnyOf(rootSchema,values,params);}else{if((0,_common.hasOneOf)(rootSchema)){return transformNumberForOneOf(rootSchema,values,params);}else{if((0,_common.hasAllOf)(rootSchema)){return transformNumberForAllOf(rootSchema,values,params);}else{const metaProps=(0,_common.getMetaProps)(params,'#/');const title=(0,_common.getTitle)(rootSchema);const description=(0,_common.getDescription)(rootSchema);const isExclusiveMin=(0,_common.getIsExclusiveMin)(rootSchema);const isExclusiveMax=(0,_common.getIsExclusiveMax)(rootSchema);const min=(0,_common.getMin)(rootSchema);const max=(0,_common.getMax)(rootSchema);const step=(0,_common.getStep)(rootSchema);const meta={uri:'#/',type:'number',schema:rootSchema,...isExclusiveMin,...isExclusiveMax,...min,...max,...step,...(0,_common.getMetaDefaultValue)(rootSchema,'#/'),...(0,_common.getMetaValue)(values,'#/',rootSchema),...metaProps};const elements={...title,...description,field:{...min,...max,...step,...(0,_common.getElementsFieldValue)(values,'#/',rootSchema),...(0,_common.getElementsFieldProps)(params,'#/'),id:'#/'}};return{meta,elements};}}}}}function transformStringForEnum(rootSchema,values,params){const metaProps=(0,_common.getMetaProps)(params,'#/');const title=(0,_common.getTitle)(rootSchema);const description=(0,_common.getDescription)(rootSchema);const items=(0,_common.getEnum)(rootSchema);const selectedItems=(0,_common.getSelectedItems)(values,'#/');const minLength=(0,_common.getMinLength)(rootSchema);const maxLength=(0,_common.getMaxLength)(rootSchema);const pattern=(0,_common.getPattern)(rootSchema);const meta={uri:'#/',type:'string',schema:rootSchema,...minLength,...maxLength,...pattern,selectedItems,...metaProps};const elements={...title,...description,enum:{items,...minLength,...maxLength,...pattern,selectedItems,id:'#/'}};return{meta,elements};}function transformStringForAnyOf(rootSchema,values,params){const metaProps=(0,_common.getMetaProps)(params,'#/');const title=(0,_common.getTitle)(rootSchema);const description=(0,_common.getDescription)(rootSchema);const{anyOf}=rootSchema;const items=anyOf.map((schema,index)=>(0,_transformSchema.transformArraySchemaString)(schema,rootSchema,values,{...params,parentUri:'#',index}));const selectedItems=(0,_common.getSelectedItems)(values,'#/');const minLength=(0,_common.getMinLength)(rootSchema);const maxLength=(0,_common.getMaxLength)(rootSchema);const pattern=(0,_common.getPattern)(rootSchema);const meta={uri:'#/',type:'string',schema:rootSchema,...minLength,...maxLength,...pattern,selectedItems,...metaProps};const elements={...title,...description,anyOf:{items,...minLength,...maxLength,...pattern,selectedItems,id:'#/'}};return{meta,elements};}function transformStringForOneOf(rootSchema,values,params){const metaProps=(0,_common.getMetaProps)(params,'#/');const title=(0,_common.getTitle)(rootSchema);const description=(0,_common.getDescription)(rootSchema);const{oneOf}=rootSchema;const items=oneOf.map((schema,index)=>(0,_transformSchema.transformArraySchemaString)(schema,rootSchema,values,{...params,parentUri:'#',index}));const selectedItems=(0,_common.getSelectedItems)(values,'#/');const minLength=(0,_common.getMinLength)(rootSchema);const maxLength=(0,_common.getMaxLength)(rootSchema);const pattern=(0,_common.getPattern)(rootSchema);const meta={uri:'#/',type:'string',schema:rootSchema,...minLength,...maxLength,...pattern,selectedItems,...metaProps};const elements={...title,...description,oneOf:{items,...minLength,...maxLength,...pattern,selectedItems,id:'#/'}};return{meta,elements};}function transformStringForAllOf(rootSchema,values,params){const{allOf,...rest}=rootSchema;const itemSchema=allOf.reduce((accumulator,schema)=>({...accumulator,...schema}),rest);const metaProps=(0,_common.getMetaProps)(params,'#/');const title=(0,_common.getTitle)(rootSchema);const description=(0,_common.getDescription)(rootSchema);const minLength=(0,_common.getMinLength)(itemSchema);const maxLength=(0,_common.getMaxLength)(itemSchema);const pattern=(0,_common.getPattern)(itemSchema);const meta={uri:'#/',type:'string',schema:rootSchema,...minLength,...maxLength,...pattern,...(0,_common.getMetaDefaultValue)(itemSchema,'#/'),...(0,_common.getMetaValue)(values,'#/',itemSchema),...metaProps};const elements={...title,...description,field:{...minLength,...maxLength,...pattern,...(0,_common.getElementsFieldValue)(values,'#/',itemSchema),...(0,_common.getElementsFieldProps)(params,'#/'),id:'#/'}};return{meta,elements};}function transformString(rootSchema,values,params){if((0,_common.hasEnum)(rootSchema)){return transformStringForEnum(rootSchema,values,params);}else{if((0,_common.hasAnyOf)(rootSchema)){return transformStringForAnyOf(rootSchema,values,params);}else{if((0,_common.hasOneOf)(rootSchema)){return transformStringForOneOf(rootSchema,values,params);}else{if((0,_common.hasAllOf)(rootSchema)){return transformStringForAllOf(rootSchema,values,params);}else{const metaProps=(0,_common.getMetaProps)(params,'#/');const title=(0,_common.getTitle)(rootSchema);const description=(0,_common.getDescription)(rootSchema);const minLength=(0,_common.getMinLength)(rootSchema);const maxLength=(0,_common.getMaxLength)(rootSchema);const pattern=(0,_common.getPattern)(rootSchema);const meta={uri:'#/',type:'string',schema:rootSchema,...minLength,...maxLength,...pattern,...(0,_common.getMetaDefaultValue)(rootSchema,'#/'),...(0,_common.getMetaValue)(values,'#/',rootSchema),...metaProps};const elements={...title,...description,field:{...minLength,...maxLength,...pattern,...(0,_common.getElementsFieldValue)(values,'#/',rootSchema),...(0,_common.getElementsFieldProps)(params,'#/'),id:'#/'}};return{meta,elements};}}}}}function toZashiki(rootSchema={},values={},params={}){log('toZashiki');const{type}=rootSchema;switch(type){case'null':return transformNull(rootSchema,values,params);case'boolean':return transformBoolean(rootSchema,values,params);case'object':return transformObject(rootSchema,values,params);case'array':return transformArray(rootSchema,values,params);case'number':return transformNumber(rootSchema,values,params);case'string':return transformString(rootSchema,values,params);default:throw new Error('Schema does not conform to Instance Data Model, https://json-schema.org/draft/2019-09/json-schema-core.html#rfc.section.4.2.1');}}