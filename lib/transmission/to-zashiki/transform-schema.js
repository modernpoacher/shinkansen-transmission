"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.transformObjectSchemaNullForEnum=transformObjectSchemaNullForEnum;exports.transformObjectSchemaNullForAnyOf=transformObjectSchemaNullForAnyOf;exports.transformObjectSchemaNullForOneOf=transformObjectSchemaNullForOneOf;exports.transformObjectSchemaNullForAllOf=transformObjectSchemaNullForAllOf;exports.transformObjectSchemaNull=transformObjectSchemaNull;exports.transformObjectSchemaBooleanForEnum=transformObjectSchemaBooleanForEnum;exports.transformObjectSchemaBooleanForAnyOf=transformObjectSchemaBooleanForAnyOf;exports.transformObjectSchemaBooleanForOneOf=transformObjectSchemaBooleanForOneOf;exports.transformObjectSchemaBooleanForAllOf=transformObjectSchemaBooleanForAllOf;exports.transformObjectSchemaBoolean=transformObjectSchemaBoolean;exports.transformObjectSchemaObjectForEnum=transformObjectSchemaObjectForEnum;exports.transformObjectSchemaObjectForAnyOf=transformObjectSchemaObjectForAnyOf;exports.transformObjectSchemaObjectForOneOf=transformObjectSchemaObjectForOneOf;exports.transformObjectSchemaObjectForAllOf=transformObjectSchemaObjectForAllOf;exports.transformObjectSchemaObject=transformObjectSchemaObject;exports.transformObjectSchemaArrayForEnum=transformObjectSchemaArrayForEnum;exports.transformObjectSchemaArrayForAnyOf=transformObjectSchemaArrayForAnyOf;exports.transformObjectSchemaArrayForOneOf=transformObjectSchemaArrayForOneOf;exports.transformObjectSchemaArrayForAllOf=transformObjectSchemaArrayForAllOf;exports.transformObjectSchemaArray=transformObjectSchemaArray;exports.transformObjectSchemaNumberForEnum=transformObjectSchemaNumberForEnum;exports.transformObjectSchemaNumberForAnyOf=transformObjectSchemaNumberForAnyOf;exports.transformObjectSchemaNumberForOneOf=transformObjectSchemaNumberForOneOf;exports.transformObjectSchemaNumberForAllOf=transformObjectSchemaNumberForAllOf;exports.transformObjectSchemaNumber=transformObjectSchemaNumber;exports.transformObjectSchemaStringForEnum=transformObjectSchemaStringForEnum;exports.transformObjectSchemaStringForAnyOf=transformObjectSchemaStringForAnyOf;exports.transformObjectSchemaStringForOneOf=transformObjectSchemaStringForOneOf;exports.transformObjectSchemaStringForAllOf=transformObjectSchemaStringForAllOf;exports.transformObjectSchemaString=transformObjectSchemaString;exports.transformObjectSchema=transformObjectSchema;exports.transformArraySchemaNullForEnum=transformArraySchemaNullForEnum;exports.transformArraySchemaNullForAnyOf=transformArraySchemaNullForAnyOf;exports.transformArraySchemaNullForOneOf=transformArraySchemaNullForOneOf;exports.transformArraySchemaNullForAllOf=transformArraySchemaNullForAllOf;exports.transformArraySchemaNull=transformArraySchemaNull;exports.transformArraySchemaBooleanForEnum=transformArraySchemaBooleanForEnum;exports.transformArraySchemaBooleanForAnyOf=transformArraySchemaBooleanForAnyOf;exports.transformArraySchemaBooleanForOneOf=transformArraySchemaBooleanForOneOf;exports.transformArraySchemaBooleanForAllOf=transformArraySchemaBooleanForAllOf;exports.transformArraySchemaBoolean=transformArraySchemaBoolean;exports.transformArraySchemaObjectForEnum=transformArraySchemaObjectForEnum;exports.transformArraySchemaObjectForAnyOf=transformArraySchemaObjectForAnyOf;exports.transformArraySchemaObjectForOneOf=transformArraySchemaObjectForOneOf;exports.transformArraySchemaObjectForAllOf=transformArraySchemaObjectForAllOf;exports.transformArraySchemaObject=transformArraySchemaObject;exports.transformArraySchemaArrayForEnum=transformArraySchemaArrayForEnum;exports.transformArraySchemaArrayForAnyOf=transformArraySchemaArrayForAnyOf;exports.transformArraySchemaArrayForOneOf=transformArraySchemaArrayForOneOf;exports.transformArraySchemaArrayForAllOf=transformArraySchemaArrayForAllOf;exports.transformArraySchemaArray=transformArraySchemaArray;exports.transformArraySchemaNumberForEnum=transformArraySchemaNumberForEnum;exports.transformArraySchemaNumberForAnyOf=transformArraySchemaNumberForAnyOf;exports.transformArraySchemaNumberForOneOf=transformArraySchemaNumberForOneOf;exports.transformArraySchemaNumberForAllOf=transformArraySchemaNumberForAllOf;exports.transformArraySchemaNumber=transformArraySchemaNumber;exports.transformArraySchemaStringForEnum=transformArraySchemaStringForEnum;exports.transformArraySchemaStringForAnyOf=transformArraySchemaStringForAnyOf;exports.transformArraySchemaStringForOneOf=transformArraySchemaStringForOneOf;exports.transformArraySchemaStringForAllOf=transformArraySchemaStringForAllOf;exports.transformArraySchemaString=transformArraySchemaString;exports.transformArraySchema=transformArraySchema;exports.transformNullForEnum=transformNullForEnum;exports.transformNullForAnyOf=transformNullForAnyOf;exports.transformNullForOneOf=transformNullForOneOf;exports.transformNullForAllOf=transformNullForAllOf;exports.transformNull=transformNull;exports.transformBooleanForEnum=transformBooleanForEnum;exports.transformBooleanForAnyOf=transformBooleanForAnyOf;exports.transformBooleanForOneOf=transformBooleanForOneOf;exports.transformBooleanForAllOf=transformBooleanForAllOf;exports.transformBoolean=transformBoolean;exports.transformObjectForEnum=transformObjectForEnum;exports.transformObjectForAnyOf=transformObjectForAnyOf;exports.transformObjectForOneOf=transformObjectForOneOf;exports.transformObjectForAllOf=transformObjectForAllOf;exports.transformObject=transformObject;exports.transformArrayForEnum=transformArrayForEnum;exports.transformArrayForAnyOf=transformArrayForAnyOf;exports.transformArrayForOneOf=transformArrayForOneOf;exports.transformArrayForAllOf=transformArrayForAllOf;exports.transformArray=transformArray;exports.transformNumberForEnum=transformNumberForEnum;exports.transformNumberForAnyOf=transformNumberForAnyOf;exports.transformNumberForOneOf=transformNumberForOneOf;exports.transformNumberForAllOf=transformNumberForAllOf;exports.transformNumber=transformNumber;exports.transformStringForEnum=transformStringForEnum;exports.transformStringForAnyOf=transformStringForAnyOf;exports.transformStringForOneOf=transformStringForOneOf;exports.transformStringForAllOf=transformStringForAllOf;exports.transformString=transformString;exports.default=toZashiki;var _debug=_interopRequireDefault(require("debug"));var _common=require("../common");function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}const log=(0,_debug.default)('shinkansen-transmission:to-zashiki:schema');function transformObjectSchemaNullForEnum(schema,rootSchema,values,params){const{required:isRequired=false,parentUri:fieldParentUri='#',key:fieldKey=''}=params;const parentUri=(0,_common.getParentUri)(fieldParentUri);const uri=(0,_common.getUri)(fieldParentUri,fieldKey);const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(schema);const description=(0,_common.getDescription)(schema);const items=(0,_common.getEnum)(schema);const selectedItems=(0,_common.getSelectedItems)(values,uri,parentUri);const meta={parentUri,uri,name:fieldKey,type:'null',schema,rootSchema,required:isRequired,selectedItems,...metaProps};const elements={...title,...description,enum:{items,required:isRequired,selectedItems,id:uri}};return{meta,elements};}function transformObjectSchemaNullForAnyOf(schema,rootSchema,values,params){const{required:isRequired=false,parentUri:fieldParentUri='#',key:fieldKey=''}=params;const parentUri=(0,_common.getParentUri)(fieldParentUri);const uri=(0,_common.getUri)(fieldParentUri,fieldKey);const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(schema);const description=(0,_common.getDescription)(schema);const{anyOf}=schema;const items=anyOf.map((schema,index)=>transformArraySchemaNull(schema,rootSchema,values,{...params,parentUri:uri,index}));const selectedItems=(0,_common.getSelectedItems)(values,uri,(0,_common.getParentUri)(parentUri));const meta={parentUri:(0,_common.getParentUri)(parentUri),uri,name:fieldKey,type:'null',schema,rootSchema,required:isRequired,selectedItems,...metaProps};const elements={...title,...description,anyOf:{items,required:isRequired,selectedItems,id:uri}};return{meta,elements};}function transformObjectSchemaNullForOneOf(schema,rootSchema,values,params){const{required:isRequired=false,parentUri:fieldParentUri='#',key:fieldKey=''}=params;const parentUri=(0,_common.getParentUri)(fieldParentUri);const uri=(0,_common.getUri)(fieldParentUri,fieldKey);const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(schema);const description=(0,_common.getDescription)(schema);const{oneOf}=schema;const items=oneOf.map((schema,index)=>transformArraySchemaNull(schema,rootSchema,values,{...params,parentUri:uri,index}));const selectedItems=(0,_common.getSelectedItems)(values,uri,parentUri);const meta={parentUri,uri,name:fieldKey,type:'null',schema,rootSchema,required:isRequired,selectedItems,...metaProps};const elements={...title,...description,oneOf:{items,required:isRequired,selectedItems,id:uri}};return{meta,elements};}function transformObjectSchemaNullForAllOf(schema,rootSchema,values,params){const{allOf,...rest}=schema;const itemSchema=allOf.reduce((accumulator,schema)=>({...accumulator,...schema}),rest);const{required:isRequired=false,parentUri:fieldParentUri='#',key:fieldKey=''}=params;const parentUri=(0,_common.getParentUri)(fieldParentUri);const uri=(0,_common.getUri)(fieldParentUri,fieldKey);const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(schema);const description=(0,_common.getDescription)(schema);const meta={parentUri,uri,name:fieldKey,type:'null',schema,rootSchema,required:isRequired,...(0,_common.getMetaDefaultValue)(itemSchema,uri),...(0,_common.getMetaValue)(values,uri,itemSchema),...metaProps};const elements={...title,...description,field:{required:isRequired,...(0,_common.getElementsFieldValue)(values,uri,itemSchema),...(0,_common.getElementsFieldProps)(params,uri),id:uri}};return{meta,elements};}function transformObjectSchemaNull(schema,rootSchema,values,params){if((0,_common.hasEnum)(schema)){return transformObjectSchemaNullForEnum(schema,rootSchema,values,params);}else{if((0,_common.hasAnyOf)(schema)){return transformObjectSchemaNullForAnyOf(schema,rootSchema,values,params);}else{if((0,_common.hasOneOf)(schema)){return transformObjectSchemaNullForOneOf(schema,rootSchema,values,params);}else{if((0,_common.hasAllOf)(schema)){return transformObjectSchemaNullForAllOf(schema,rootSchema,values,params);}else{const{required:isRequired=false,parentUri:fieldParentUri='#',key:fieldKey=''}=params;const parentUri=(0,_common.getParentUri)(fieldParentUri);const uri=(0,_common.getUri)(fieldParentUri,fieldKey);const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(schema);const description=(0,_common.getDescription)(schema);const meta={parentUri,uri,name:fieldKey,type:'null',schema,rootSchema,required:isRequired,...(0,_common.getMetaDefaultValue)(schema,uri),...(0,_common.getMetaValue)(values,uri,schema),...metaProps};const elements={...title,...description,field:{required:isRequired,...(0,_common.getElementsFieldValue)(values,uri,schema),...(0,_common.getElementsFieldProps)(params,uri),id:uri}};return{meta,elements};}}}}}function transformObjectSchemaBooleanForEnum(schema,rootSchema,values,params){const{required:isRequired=false,parentUri:fieldParentUri='#',key:fieldKey=''}=params;const parentUri=(0,_common.getParentUri)(fieldParentUri);const uri=(0,_common.getUri)(fieldParentUri,fieldKey);const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(schema);const description=(0,_common.getDescription)(schema);const items=(0,_common.getEnum)(schema);const selectedItems=(0,_common.getSelectedItems)(values,uri,parentUri);const meta={parentUri,uri,name:fieldKey,type:'boolean',schema,rootSchema,required:isRequired,selectedItems,...metaProps};const elements={...title,...description,enum:{items,required:isRequired,selectedItems,id:uri}};return{meta,elements};}function transformObjectSchemaBooleanForAnyOf(schema,rootSchema,values,params){const{required:isRequired=false,parentUri:fieldParentUri='#',key:fieldKey=''}=params;const parentUri=(0,_common.getParentUri)(fieldParentUri);const uri=(0,_common.getUri)(fieldParentUri,fieldKey);const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(schema);const description=(0,_common.getDescription)(schema);const{anyOf}=schema;const items=anyOf.map((schema,index)=>transformArraySchemaBoolean(schema,rootSchema,values,{...params,parentUri:uri,index}));const selectedItems=(0,_common.getSelectedItems)(values,uri,parentUri);const meta={parentUri,uri,name:fieldKey,type:'boolean',schema,rootSchema,required:isRequired,selectedItems,...metaProps};const elements={...title,...description,anyOf:{items,required:isRequired,selectedItems,id:uri}};return{meta,elements};}function transformObjectSchemaBooleanForOneOf(schema,rootSchema,values,params){const{required:isRequired=false,parentUri:fieldParentUri='#',key:fieldKey=''}=params;const parentUri=(0,_common.getParentUri)(fieldParentUri);const uri=(0,_common.getUri)(fieldParentUri,fieldKey);const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(schema);const description=(0,_common.getDescription)(schema);const{oneOf}=schema;const items=oneOf.map((schema,index)=>transformArraySchemaBoolean(schema,rootSchema,values,{...params,parentUri:uri,index}));const selectedItems=(0,_common.getSelectedItems)(values,uri,parentUri);const meta={parentUri,uri,name:fieldKey,type:'boolean',schema,rootSchema,required:isRequired,selectedItems,...metaProps};const elements={...title,...description,oneOf:{items,required:isRequired,selectedItems,id:uri}};return{meta,elements};}function transformObjectSchemaBooleanForAllOf(schema,rootSchema,values,params){const{allOf,...rest}=schema;const itemSchema=allOf.reduce((accumulator,schema)=>({...accumulator,...schema}),rest);const{required:isRequired=false,parentUri:fieldParentUri='#',key:fieldKey=''}=params;const parentUri=(0,_common.getParentUri)(fieldParentUri);const uri=(0,_common.getUri)(fieldParentUri,fieldKey);const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(schema);const description=(0,_common.getDescription)(schema);const meta={parentUri,uri,name:fieldKey,type:'boolean',schema,rootSchema,required:isRequired,...(0,_common.getMetaDefaultValue)(itemSchema,uri),...(0,_common.getMetaValue)(values,uri,itemSchema),...metaProps};const elements={...title,...description,field:{required:isRequired,...(0,_common.getElementsFieldValue)(values,uri,itemSchema),...(0,_common.getElementsFieldProps)(params,uri),id:uri}};return{meta,elements};}function transformObjectSchemaBoolean(schema,rootSchema,values,params){if((0,_common.hasEnum)(schema)){return transformObjectSchemaBooleanForEnum(schema,rootSchema,values,params);}else{if((0,_common.hasAnyOf)(schema)){return transformObjectSchemaBooleanForAnyOf(schema,rootSchema,values,params);}else{if((0,_common.hasOneOf)(schema)){return transformObjectSchemaBooleanForOneOf(schema,rootSchema,values,params);}else{if((0,_common.hasAllOf)(schema)){return transformObjectSchemaBooleanForAllOf(schema,rootSchema,values,params);}else{const{required:isRequired=false,parentUri:fieldParentUri='#',key:fieldKey=''}=params;const parentUri=(0,_common.getParentUri)(fieldParentUri);const uri=(0,_common.getUri)(fieldParentUri,fieldKey);const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(schema);const description=(0,_common.getDescription)(schema);const meta={parentUri,uri,name:fieldKey,type:'boolean',schema,rootSchema,required:isRequired,...(0,_common.getMetaDefaultValue)(schema,uri),...(0,_common.getMetaValue)(values,uri,schema),...metaProps};const elements={...title,...description,field:{required:isRequired,...(0,_common.getElementsFieldValue)(values,uri,schema),...(0,_common.getElementsFieldProps)(params,uri),id:uri}};return{meta,elements};}}}}}function transformObjectSchemaObjectForEnum(schema,rootSchema,values,params){const{required:isRequired=false,parentUri:fieldParentUri='#',key:fieldKey=''}=params;const parentUri=(0,_common.getParentUri)(fieldParentUri);const uri=(0,_common.getUri)(fieldParentUri,fieldKey);const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(schema);const description=(0,_common.getDescription)(schema);const items=(0,_common.getEnum)(schema);const selectedItems=(0,_common.getSelectedItems)(values,uri,parentUri);const minProperties=(0,_common.getMinProperties)(schema);const maxProperties=(0,_common.getMaxProperties)(schema);const meta={parentUri,uri,name:fieldKey,type:'object',schema,rootSchema,...minProperties,...maxProperties,required:isRequired,selectedItems,...metaProps};const elements={...title,...description,enum:{items,...minProperties,...maxProperties,required:isRequired,selectedItems,id:uri}};return{meta,elements};}function transformObjectSchemaObjectForAnyOf(schema,rootSchema,values,params){const{required:isRequired=false,parentUri:fieldParentUri='#',key:fieldKey=''}=params;const parentUri=(0,_common.getParentUri)(fieldParentUri);const uri=(0,_common.getUri)(fieldParentUri,fieldKey);const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(schema);const description=(0,_common.getDescription)(schema);const{anyOf}=schema;const items=anyOf.map((schema,index)=>transformArraySchemaObject(schema,rootSchema,values,{...params,parentUri:uri,index}));const selectedItems=(0,_common.getSelectedItems)(values,uri,parentUri);const minProperties=(0,_common.getMinProperties)(schema);const maxProperties=(0,_common.getMaxProperties)(schema);const meta={parentUri,uri,name:fieldKey,type:'object',schema,rootSchema,...minProperties,...maxProperties,required:isRequired,selectedItems,...metaProps};const elements={...title,...description,anyOf:{items,...minProperties,...maxProperties,required:isRequired,selectedItems,id:uri}};return{meta,elements};}function transformObjectSchemaObjectForOneOf(schema,rootSchema,values,params){const{required:isRequired=false,parentUri:fieldParentUri='#',key:fieldKey=''}=params;const parentUri=(0,_common.getParentUri)(fieldParentUri);const uri=(0,_common.getUri)(fieldParentUri,fieldKey);const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(schema);const description=(0,_common.getDescription)(schema);const{oneOf}=schema;const items=oneOf.map((schema,index)=>transformArraySchemaObject(schema,rootSchema,values,{...params,parentUri:uri,index}));const selectedItems=(0,_common.getSelectedItems)(values,uri,parentUri);const minProperties=(0,_common.getMinProperties)(schema);const maxProperties=(0,_common.getMaxProperties)(schema);const meta={parentUri,uri,name:fieldKey,type:'object',schema,rootSchema,...minProperties,...maxProperties,required:isRequired,selectedItems,...metaProps};const elements={...title,...description,oneOf:{items,...minProperties,...maxProperties,required:isRequired,selectedItems,id:uri}};return{meta,elements};}function transformObjectSchemaObjectForAllOf(schema,rootSchema,values,params){const{allOf,...rest}=schema;const itemSchema=allOf.reduce((accumulator,schema)=>({...accumulator,...schema}),rest);const{required:isRequired=false,parentUri:fieldParentUri='#',key:fieldKey=''}=params;const parentUri=(0,_common.getParentUri)(fieldParentUri);const uri=(0,_common.getUri)(fieldParentUri,fieldKey);const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(schema);const description=(0,_common.getDescription)(schema);const minProperties=(0,_common.getMinProperties)(itemSchema);const maxProperties=(0,_common.getMaxProperties)(itemSchema);const meta={parentUri,uri,name:fieldKey,type:'object',schema,rootSchema,...minProperties,...maxProperties,required:isRequired,...(0,_common.getMetaDefaultValue)(itemSchema,uri),...(0,_common.getMetaValue)(values,uri,itemSchema),...metaProps};const{properties={},required=[]}=itemSchema;const elements={...title,...description,fields:Object.entries(properties).map(([key,schema])=>transformObjectSchema(schema,rootSchema,values,{...params,required:required.includes(key),parentUri:uri,key}))};return{meta,elements};}function transformObjectSchemaObject(schema,rootSchema,values,params){if((0,_common.hasEnum)(schema)){return transformObjectSchemaObjectForEnum(schema,rootSchema,values,params);}else{if((0,_common.hasAnyOf)(schema)){return transformObjectSchemaObjectForAnyOf(schema,rootSchema,values,params);}else{if((0,_common.hasOneOf)(schema)){return transformObjectSchemaObjectForOneOf(schema,rootSchema,values,params);}else{if((0,_common.hasAllOf)(schema)){return transformObjectSchemaObjectForAllOf(schema,rootSchema,values,params);}else{const{required:isRequired=false,parentUri:fieldParentUri='#',key:fieldKey=''}=params;const parentUri=(0,_common.getParentUri)(fieldParentUri);const uri=(0,_common.getUri)(fieldParentUri,fieldKey);const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(schema);const description=(0,_common.getDescription)(schema);const minProperties=(0,_common.getMinProperties)(schema);const maxProperties=(0,_common.getMaxProperties)(schema);const meta={parentUri,uri,name:fieldKey,type:'object',schema,rootSchema,...maxProperties,...minProperties,required:isRequired,...(0,_common.getMetaDefaultValue)(schema,uri),...(0,_common.getMetaValue)(values,uri,schema),...metaProps};const{properties={},required=[]}=schema;const elements={...title,...description,fields:Object.entries(properties).map(([key,schema])=>transformObjectSchema(schema,rootSchema,values,{...params,required:required.includes(key),parentUri:uri,key}))};return{meta,elements};}}}}}function transformObjectSchemaArrayForEnum(schema,rootSchema,values,params){const{required:isRequired=false,parentUri:fieldParentUri='#',key:fieldKey=''}=params;const parentUri=(0,_common.getParentUri)(fieldParentUri);const uri=(0,_common.getUri)(fieldParentUri,fieldKey);const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(schema);const description=(0,_common.getDescription)(schema);const items=(0,_common.getEnum)(schema);const selectedItems=(0,_common.getSelectedItems)(values,uri,parentUri);const minItems=(0,_common.getMinItems)(schema);const maxItems=(0,_common.getMaxItems)(schema);const hasUniqueItems=(0,_common.getHasUniqueItems)(schema);const maxContains=(0,_common.getMaxContains)(schema);const minContains=(0,_common.getMinContains)(schema);const meta={parentUri,uri,name:fieldKey,type:'array',schema,rootSchema,...minItems,...maxItems,...hasUniqueItems,...maxContains,...minContains,required:isRequired,selectedItems,...metaProps};const elements={...title,...description,enum:{items,required:isRequired,selectedItems,id:uri}};return{meta,elements};}function transformObjectSchemaArrayForAnyOf(schema,rootSchema,values,params){const{required:isRequired=false,parentUri:fieldParentUri='#',key:fieldKey=''}=params;const parentUri=(0,_common.getParentUri)(fieldParentUri);const uri=(0,_common.getUri)(fieldParentUri,fieldKey);const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(schema);const description=(0,_common.getDescription)(schema);const{anyOf}=schema;const items=anyOf.map((schema,index)=>transformArraySchemaArray(schema,rootSchema,values,{...params,parentUri:uri,index}));const selectedItems=(0,_common.getSelectedItems)(values,uri,parentUri);const minItems=(0,_common.getMinItems)(schema);const maxItems=(0,_common.getMaxItems)(schema);const hasUniqueItems=(0,_common.getHasUniqueItems)(schema);const maxContains=(0,_common.getMaxContains)(schema);const minContains=(0,_common.getMinContains)(schema);const meta={parentUri,uri,name:fieldKey,type:'array',schema,rootSchema,...minItems,...maxItems,...hasUniqueItems,...maxContains,...minContains,required:isRequired,selectedItems,...metaProps};const elements={...title,...description,anyOf:{items,required:isRequired,selectedItems,id:uri}};return{meta,elements};}function transformObjectSchemaArrayForOneOf(schema,rootSchema,values,params){const{required:isRequired=false,parentUri:fieldParentUri='#',key:fieldKey=''}=params;const parentUri=(0,_common.getParentUri)(fieldParentUri);const uri=(0,_common.getUri)(fieldParentUri,fieldKey);const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(schema);const description=(0,_common.getDescription)(schema);const{oneOf}=schema;const items=oneOf.map((schema,index)=>transformArraySchemaArray(schema,rootSchema,values,{...params,parentUri:uri,index}));const selectedItems=(0,_common.getSelectedItems)(values,uri,parentUri);const minItems=(0,_common.getMinItems)(schema);const maxItems=(0,_common.getMaxItems)(schema);const hasUniqueItems=(0,_common.getHasUniqueItems)(schema);const maxContains=(0,_common.getMaxContains)(schema);const minContains=(0,_common.getMinContains)(schema);const meta={parentUri,uri,name:fieldKey,type:'array',schema,rootSchema,...minItems,...maxItems,...hasUniqueItems,...maxContains,...minContains,required:isRequired,selectedItems,...metaProps};const elements={...title,...description,oneOf:{items,required:isRequired,selectedItems,id:uri}};return{meta,elements};}function transformObjectSchemaArrayForAllOf(schema,rootSchema,values,params){const{allOf,...rest}=schema;const itemSchema=allOf.reduce((accumulator,schema)=>({...accumulator,...schema}),rest);const{required:isRequired=false,parentUri:fieldParentUri='#',key:fieldKey=''}=params;const parentUri=(0,_common.getParentUri)(fieldParentUri);const uri=(0,_common.getUri)(fieldParentUri,fieldKey);const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(schema);const description=(0,_common.getDescription)(schema);const minItems=(0,_common.getMinItems)(itemSchema);const maxItems=(0,_common.getMaxItems)(itemSchema);const hasUniqueItems=(0,_common.getHasUniqueItems)(itemSchema);const maxContains=(0,_common.getMaxContains)(itemSchema);const minContains=(0,_common.getMinContains)(itemSchema);const meta={parentUri,uri,name:fieldKey,type:'array',schema,rootSchema,...minItems,...maxItems,...hasUniqueItems,...maxContains,...minContains,required:isRequired,...(0,_common.getMetaDefaultValue)(itemSchema,uri),...(0,_common.getMetaValue)(values,uri,itemSchema),...metaProps};const{items=[]}=itemSchema;if((0,_common.isArray)(items)){const elements={...title,...description,fields:items.map((schema,index)=>transformArraySchema(schema,rootSchema,values,{...params,parentUri:uri,index}))};return{meta,elements};}const elements={...title,...description,fields:[transformArraySchema(items,rootSchema,values,{...params,parentUri:uri})]};return{meta,elements};}function transformObjectSchemaArray(schema,rootSchema,values,params){if((0,_common.hasEnum)(schema)){return transformObjectSchemaArrayForEnum(schema,rootSchema,values,params);}else{if((0,_common.hasAnyOf)(schema)){return transformObjectSchemaArrayForAnyOf(schema,rootSchema,values,params);}else{if((0,_common.hasOneOf)(schema)){return transformObjectSchemaArrayForOneOf(schema,rootSchema,values,params);}else{if((0,_common.hasAllOf)(schema)){return transformObjectSchemaArrayForAllOf(schema,rootSchema,values,params);}else{const{required:isRequired=false,parentUri:fieldParentUri='#',key:fieldKey=''}=params;const parentUri=(0,_common.getParentUri)(fieldParentUri);const uri=(0,_common.getUri)(fieldParentUri,fieldKey);const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(schema);const description=(0,_common.getDescription)(schema);const minItems=(0,_common.getMinItems)(schema);const maxItems=(0,_common.getMaxItems)(schema);const hasUniqueItems=(0,_common.getHasUniqueItems)(schema);const maxContains=(0,_common.getMaxContains)(schema);const minContains=(0,_common.getMinContains)(schema);const meta={parentUri,uri,name:fieldKey,type:'array',schema,rootSchema,...minItems,...maxItems,...hasUniqueItems,...maxContains,...minContains,required:isRequired,...(0,_common.getMetaDefaultValue)(schema,uri),...(0,_common.getMetaValue)(values,uri,schema),...metaProps};const{items=[]}=schema;if((0,_common.isArray)(items)){const elements={...title,...description,fields:items.map((schema,index)=>transformArraySchema(schema,rootSchema,values,{...params,parentUri:uri,index}))};return{meta,elements};}const elements={...title,...description,fields:[transformArraySchema(items,rootSchema,values,{...params,parentUri:uri})]};return{meta,elements};}}}}}function transformObjectSchemaNumberForEnum(schema,rootSchema,values,params){const{required:isRequired=false,parentUri:fieldParentUri='#',key:fieldKey=''}=params;const parentUri=(0,_common.getParentUri)(fieldParentUri);const uri=(0,_common.getUri)(fieldParentUri,fieldKey);const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(schema);const description=(0,_common.getDescription)(schema);const items=(0,_common.getEnum)(schema);const selectedItems=(0,_common.getSelectedItems)(values,uri,parentUri);const min=(0,_common.getMin)(schema);const max=(0,_common.getMax)(schema);const step=(0,_common.getStep)(schema);const isExclusiveMin=(0,_common.getIsExclusiveMin)(schema);const isExclusiveMax=(0,_common.getIsExclusiveMax)(schema);const meta={parentUri,uri,name:fieldKey,type:'number',schema,rootSchema,...isExclusiveMin,...isExclusiveMax,...min,...max,...step,required:isRequired,selectedItems,...metaProps};const elements={...title,...description,enum:{items,...min,...max,...step,required:isRequired,selectedItems,id:uri}};return{meta,elements};}function transformObjectSchemaNumberForAnyOf(schema,rootSchema,values,params){const{required:isRequired=false,parentUri:fieldParentUri='#',key:fieldKey=''}=params;const parentUri=(0,_common.getParentUri)(fieldParentUri);const uri=(0,_common.getUri)(fieldParentUri,fieldKey);const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(schema);const description=(0,_common.getDescription)(schema);const{anyOf}=schema;const items=anyOf.map((schema,index)=>transformArraySchemaNumber(schema,rootSchema,values,{...params,parentUri:uri,index}));const selectedItems=(0,_common.getSelectedItems)(values,uri,parentUri);const min=(0,_common.getMin)(schema);const max=(0,_common.getMax)(schema);const step=(0,_common.getStep)(schema);const isExclusiveMin=(0,_common.getIsExclusiveMin)(schema);const isExclusiveMax=(0,_common.getIsExclusiveMax)(schema);const meta={parentUri,uri,name:fieldKey,type:'number',schema,rootSchema,...isExclusiveMin,...isExclusiveMax,...min,...max,...step,required:isRequired,selectedItems,...metaProps};const elements={...title,...description,anyOf:{items,...min,...max,...step,required:isRequired,selectedItems,id:uri}};return{meta,elements};}function transformObjectSchemaNumberForOneOf(schema,rootSchema,values,params){const{required:isRequired=false,parentUri:fieldParentUri='#',key:fieldKey=''}=params;const parentUri=(0,_common.getParentUri)(fieldParentUri);const uri=(0,_common.getUri)(fieldParentUri,fieldKey);const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(schema);const description=(0,_common.getDescription)(schema);const{oneOf}=schema;const items=oneOf.map((schema,index)=>transformArraySchemaNumber(schema,rootSchema,values,{...params,parentUri:uri,index}));const selectedItems=(0,_common.getSelectedItems)(values,uri,parentUri);const min=(0,_common.getMin)(schema);const max=(0,_common.getMax)(schema);const step=(0,_common.getStep)(schema);const isExclusiveMin=(0,_common.getIsExclusiveMin)(schema);const isExclusiveMax=(0,_common.getIsExclusiveMax)(schema);const meta={parentUri,uri,name:fieldKey,type:'number',schema,rootSchema,...isExclusiveMin,...isExclusiveMax,...min,...max,...step,required:isRequired,selectedItems,...metaProps};const elements={...title,...description,oneOf:{items,...min,...max,...step,required:isRequired,selectedItems,id:uri}};return{meta,elements};}function transformObjectSchemaNumberForAllOf(schema,rootSchema,values,params){const{allOf,...rest}=schema;const itemSchema=allOf.reduce((accumulator,schema)=>({...accumulator,...schema}),rest);const{required:isRequired=false,parentUri:fieldParentUri='#',key:fieldKey=''}=params;const parentUri=(0,_common.getParentUri)(fieldParentUri);const uri=(0,_common.getUri)(fieldParentUri,fieldKey);const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(schema);const description=(0,_common.getDescription)(schema);const min=(0,_common.getMin)(itemSchema);const max=(0,_common.getMax)(itemSchema);const step=(0,_common.getStep)(itemSchema);const isExclusiveMin=(0,_common.getIsExclusiveMin)(itemSchema);const isExclusiveMax=(0,_common.getIsExclusiveMax)(itemSchema);const meta={parentUri,uri,name:fieldKey,type:'number',schema,rootSchema,...isExclusiveMin,...isExclusiveMax,...min,...max,...step,required:isRequired,...(0,_common.getMetaDefaultValue)(itemSchema,uri),...(0,_common.getMetaValue)(values,uri,itemSchema),...metaProps};const elements={...title,...description,field:{...min,...max,...step,required:isRequired,...(0,_common.getElementsFieldValue)(values,uri,itemSchema),...(0,_common.getElementsFieldProps)(params,uri),id:uri}};return{meta,elements};}function transformObjectSchemaNumber(schema,rootSchema,values,params){if((0,_common.hasEnum)(schema)){return transformObjectSchemaNumberForEnum(schema,rootSchema,values,params);}else{if((0,_common.hasAnyOf)(schema)){return transformObjectSchemaNumberForAnyOf(schema,rootSchema,values,params);}else{if((0,_common.hasOneOf)(schema)){return transformObjectSchemaNumberForOneOf(schema,rootSchema,values,params);}else{if((0,_common.hasAllOf)(schema)){return transformObjectSchemaNumberForAllOf(schema,rootSchema,values,params);}else{const{required:isRequired=false,parentUri:fieldParentUri='#',key:fieldKey=''}=params;const parentUri=(0,_common.getParentUri)(fieldParentUri);const uri=(0,_common.getUri)(fieldParentUri,fieldKey);const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(schema);const description=(0,_common.getDescription)(schema);const min=(0,_common.getMin)(schema);const max=(0,_common.getMax)(schema);const step=(0,_common.getStep)(schema);const isExclusiveMin=(0,_common.getIsExclusiveMin)(schema);const isExclusiveMax=(0,_common.getIsExclusiveMax)(schema);const meta={parentUri,uri,name:fieldKey,type:'number',schema,rootSchema,...isExclusiveMin,...isExclusiveMax,...min,...max,...step,required:isRequired,...(0,_common.getMetaDefaultValue)(schema,uri),...(0,_common.getMetaValue)(values,uri,schema),...metaProps};const elements={...title,...description,field:{...min,...max,...step,required:isRequired,...(0,_common.getElementsFieldValue)(values,uri,schema),...(0,_common.getElementsFieldProps)(params,uri),id:uri}};return{meta,elements};}}}}}function transformObjectSchemaStringForEnum(schema,rootSchema,values,params){const{required:isRequired=false,parentUri:fieldParentUri='#',key:fieldKey=''}=params;const parentUri=(0,_common.getParentUri)(fieldParentUri);const uri=(0,_common.getUri)(fieldParentUri,fieldKey);const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(schema);const description=(0,_common.getDescription)(schema);const items=(0,_common.getEnum)(schema);const selectedItems=(0,_common.getSelectedItems)(values,uri,parentUri);const minLength=(0,_common.getMinLength)(schema);const maxLength=(0,_common.getMaxLength)(schema);const pattern=(0,_common.getPattern)(schema);const meta={parentUri,uri,name:fieldKey,type:'string',schema,rootSchema,...minLength,...maxLength,...pattern,required:isRequired,selectedItems,...metaProps};const elements={...title,...description,enum:{items,...minLength,...maxLength,...pattern,required:isRequired,selectedItems,id:uri}};return{meta,elements};}function transformObjectSchemaStringForAnyOf(schema,rootSchema,values,params){const{required:isRequired=false,parentUri:fieldParentUri='#',key:fieldKey=''}=params;const parentUri=(0,_common.getParentUri)(fieldParentUri);const uri=(0,_common.getUri)(fieldParentUri,fieldKey);const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(schema);const description=(0,_common.getDescription)(schema);const{anyOf}=schema;const items=anyOf.map((schema,index)=>transformArraySchemaString(schema,rootSchema,values,{...params,parentUri:uri,index}));const selectedItems=(0,_common.getSelectedItems)(values,uri,parentUri);const minLength=(0,_common.getMinLength)(schema);const maxLength=(0,_common.getMaxLength)(schema);const pattern=(0,_common.getPattern)(schema);const meta={parentUri,uri,name:fieldKey,type:'string',schema,rootSchema,...minLength,...maxLength,...pattern,required:isRequired,selectedItems,...metaProps};const elements={...title,...description,anyOf:{items,...minLength,...maxLength,...pattern,required:isRequired,selectedItems,id:uri}};return{meta,elements};}function transformObjectSchemaStringForOneOf(schema,rootSchema,values,params){const{required:isRequired=false,parentUri:fieldParentUri='#',key:fieldKey=''}=params;const parentUri=(0,_common.getParentUri)(fieldParentUri);const uri=(0,_common.getUri)(fieldParentUri,fieldKey);const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(schema);const description=(0,_common.getDescription)(schema);const{oneOf}=schema;const items=oneOf.map((schema,index)=>transformArraySchemaString(schema,rootSchema,values,{...params,parentUri:uri,index}));const selectedItems=(0,_common.getSelectedItems)(values,uri,parentUri);const minLength=(0,_common.getMinLength)(schema);const maxLength=(0,_common.getMaxLength)(schema);const pattern=(0,_common.getPattern)(schema);const meta={parentUri,uri,name:fieldKey,type:'string',schema,rootSchema,...minLength,...maxLength,...pattern,required:isRequired,selectedItems,...metaProps};const elements={...title,...description,oneOf:{items,...minLength,...maxLength,...pattern,required:isRequired,selectedItems,id:uri}};return{meta,elements};}function transformObjectSchemaStringForAllOf(schema,rootSchema,values,params){const{allOf,...rest}=schema;const itemSchema=allOf.reduce((accumulator,schema)=>({...accumulator,...schema}),rest);const{required:isRequired=false,parentUri:fieldParentUri='#',key:fieldKey=''}=params;const parentUri=(0,_common.getParentUri)(fieldParentUri);const uri=(0,_common.getUri)(fieldParentUri,fieldKey);const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(schema);const description=(0,_common.getDescription)(schema);const minLength=(0,_common.getMinLength)(itemSchema);const maxLength=(0,_common.getMaxLength)(itemSchema);const pattern=(0,_common.getPattern)(itemSchema);const meta={parentUri,uri,name:fieldKey,type:'string',schema,rootSchema,...minLength,...maxLength,...pattern,required:isRequired,...(0,_common.getMetaDefaultValue)(itemSchema,uri),...(0,_common.getMetaValue)(values,uri,itemSchema),...metaProps};const elements={...title,...description,field:{...minLength,...maxLength,...pattern,required:isRequired,...(0,_common.getElementsFieldValue)(values,uri,itemSchema),...(0,_common.getElementsFieldProps)(params,uri),id:uri}};return{meta,elements};}function transformObjectSchemaString(schema,rootSchema,values,params){if((0,_common.hasEnum)(schema)){return transformObjectSchemaStringForEnum(schema,rootSchema,values,params);}else{if((0,_common.hasAnyOf)(schema)){return transformObjectSchemaStringForAnyOf(schema,rootSchema,values,params);}else{if((0,_common.hasOneOf)(schema)){return transformObjectSchemaStringForOneOf(schema,rootSchema,values,params);}else{if((0,_common.hasAllOf)(schema)){return transformObjectSchemaStringForAllOf(schema,rootSchema,values,params);}else{const{required:isRequired=false,parentUri:fieldParentUri='#',key:fieldKey=''}=params;const parentUri=(0,_common.getParentUri)(fieldParentUri);const uri=(0,_common.getUri)(fieldParentUri,fieldKey);const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(schema);const description=(0,_common.getDescription)(schema);const minLength=(0,_common.getMinLength)(schema);const maxLength=(0,_common.getMaxLength)(schema);const pattern=(0,_common.getPattern)(schema);const meta={parentUri,uri,name:fieldKey,type:'string',schema,rootSchema,...minLength,...maxLength,...pattern,required:isRequired,...(0,_common.getMetaDefaultValue)(schema,uri),...(0,_common.getMetaValue)(values,uri,schema),...metaProps};const elements={...title,...description,field:{...minLength,...maxLength,...pattern,required:isRequired,...(0,_common.getElementsFieldValue)(values,uri,schema),...(0,_common.getElementsFieldProps)(params,uri),id:uri}};return{meta,elements};}}}}}function transformObjectSchema(schema={},rootSchema=schema,values={},params={}){const{type}=schema;switch(type){case'null':return transformObjectSchemaNull(schema,rootSchema,values,params);case'boolean':return transformObjectSchemaBoolean(schema,rootSchema,values,params);case'object':return transformObjectSchemaObject(schema,rootSchema,values,params);case'array':return transformObjectSchemaArray(schema,rootSchema,values,params);case'number':return transformObjectSchemaNumber(schema,rootSchema,values,params);case'string':return transformObjectSchemaString(schema,rootSchema,values,params);default:throw new Error('Schema does not conform to Instance Data Model, https://json-schema.org/draft/2019-09/json-schema-core.html#rfc.section.4.2.1');}}function transformArraySchemaNullForEnum(schema,rootSchema,values,params){const{required:isRequired=false,parentUri:arrayParentUri='#',index:arrayIndex=0}=params;const parentUri=(0,_common.getParentUri)(arrayParentUri);const uri=(0,_common.getUri)(arrayParentUri,arrayIndex);const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(schema);const description=(0,_common.getDescription)(schema);const items=(0,_common.getEnum)(schema);const selectedItems=(0,_common.getSelectedItems)(values,uri,parentUri);const meta={parentUri,uri,item:arrayIndex,type:'null',schema,rootSchema,required:isRequired,selectedItems,...metaProps};const elements={...title,...description,enum:{items,required:isRequired,selectedItems,id:uri}};return{meta,elements};}function transformArraySchemaNullForAnyOf(schema,rootSchema,values,params){const{required:isRequired=false,parentUri:arrayParentUri='#',index:arrayIndex=0}=params;const parentUri=(0,_common.getParentUri)(arrayParentUri);const uri=(0,_common.getUri)(arrayParentUri,arrayIndex);const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(schema);const description=(0,_common.getDescription)(schema);const{anyOf}=schema;const items=anyOf.map((schema,index)=>transformArraySchemaNull(schema,rootSchema,values,params));const selectedItems=(0,_common.getSelectedItems)(values,uri,parentUri);const meta={parentUri,uri,item:arrayIndex,type:'null',schema,rootSchema,required:isRequired,selectedItems,...metaProps};const elements={...title,...description,anyOf:{items,required:isRequired,selectedItems,id:uri}};return{meta,elements};}function transformArraySchemaNullForOneOf(schema,rootSchema,values,params){const{required:isRequired=false,parentUri:arrayParentUri='#',index:arrayIndex=0}=params;const parentUri=(0,_common.getParentUri)(arrayParentUri);const uri=(0,_common.getUri)(arrayParentUri,arrayIndex);const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(schema);const description=(0,_common.getDescription)(schema);const{oneOf}=schema;const items=oneOf.map((schema,index)=>transformArraySchemaNull(schema,rootSchema,values,params));const selectedItems=(0,_common.getSelectedItems)(values,uri,parentUri);const meta={parentUri,uri,item:arrayIndex,type:'null',schema,rootSchema,required:isRequired,selectedItems,...metaProps};const elements={...title,...description,oneOf:{items,required:isRequired,selectedItems,id:uri}};return{meta,elements};}function transformArraySchemaNullForAllOf(schema,rootSchema,values,params){const{allOf,...rest}=schema;const itemSchema=allOf.reduce((accumulator,schema)=>({...accumulator,...schema}),rest);const{required:isRequired=false,parentUri:arrayParentUri='#',index:arrayIndex=0}=params;const parentUri=(0,_common.getParentUri)(arrayParentUri);const uri=(0,_common.getUri)(arrayParentUri,arrayIndex);const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(schema);const description=(0,_common.getDescription)(schema);const meta={parentUri,uri,item:arrayIndex,type:'null',schema,rootSchema,required:isRequired,...(0,_common.getMetaDefaultValue)(itemSchema,uri),...(0,_common.getMetaValue)(values,uri,itemSchema),...metaProps};const elements={...title,...description,field:{required:isRequired,...(0,_common.getElementsFieldValue)(values,uri,itemSchema),...(0,_common.getElementsFieldProps)(params,uri),id:uri}};return{meta,elements};}function transformArraySchemaNull(schema,rootSchema,values,params){if((0,_common.hasEnum)(schema)){return transformArraySchemaNullForEnum(schema,rootSchema,values,params);}else{if((0,_common.hasAnyOf)(schema)){return transformArraySchemaNullForAnyOf(schema,rootSchema,values,params);}else{if((0,_common.hasOneOf)(schema)){return transformArraySchemaNullForOneOf(schema,rootSchema,values,params);}else{if((0,_common.hasAllOf)(schema)){return transformArraySchemaNullForAllOf(schema,rootSchema,values,params);}else{const{required:isRequired=false,parentUri:arrayParentUri='#',index:arrayIndex=0}=params;const parentUri=(0,_common.getParentUri)(arrayParentUri);const uri=(0,_common.getUri)(arrayParentUri,arrayIndex);const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(schema);const description=(0,_common.getDescription)(schema);const meta={parentUri,uri,item:arrayIndex,type:'null',schema,rootSchema,required:isRequired,...(0,_common.getMetaDefaultValue)(schema,uri),...(0,_common.getMetaValue)(values,uri,schema),...metaProps};const elements={...title,...description,field:{required:isRequired,...(0,_common.getElementsFieldValue)(values,uri,schema),...(0,_common.getElementsFieldProps)(params,uri),id:uri}};return{meta,elements};}}}}}function transformArraySchemaBooleanForEnum(schema,rootSchema,values,params){const{required:isRequired=false,parentUri:arrayParentUri='#',index:arrayIndex=0}=params;const parentUri=(0,_common.getParentUri)(arrayParentUri);const uri=(0,_common.getUri)(arrayParentUri,arrayIndex);const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(schema);const description=(0,_common.getDescription)(schema);const items=(0,_common.getEnum)(schema);const selectedItems=(0,_common.getSelectedItems)(values,uri,parentUri);const meta={parentUri,uri,item:arrayIndex,type:'boolean',schema,rootSchema,required:isRequired,selectedItems,...metaProps};const elements={...title,...description,enum:{items,required:isRequired,selectedItems,id:uri}};return{meta,elements};}function transformArraySchemaBooleanForAnyOf(schema,rootSchema,values,params){const{required:isRequired=false,parentUri:arrayParentUri='#',index:arrayIndex=0}=params;const parentUri=(0,_common.getParentUri)(arrayParentUri);const uri=(0,_common.getUri)(arrayParentUri,arrayIndex);const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(schema);const description=(0,_common.getDescription)(schema);const{anyOf}=schema;const items=anyOf.map((schema,index)=>transformArraySchemaBoolean(schema,rootSchema,values,{...params,parentUri:uri,index}));const selectedItems=(0,_common.getSelectedItems)(values,uri,parentUri);const meta={parentUri,uri,item:arrayIndex,type:'boolean',schema,rootSchema,required:isRequired,selectedItems,...metaProps};const elements={...title,...description,anyOf:{items,required:isRequired,selectedItems,id:uri}};return{meta,elements};}function transformArraySchemaBooleanForOneOf(schema,rootSchema,values,params){const{required:isRequired=false,parentUri:arrayParentUri='#',index:arrayIndex=0}=params;const parentUri=(0,_common.getParentUri)(arrayParentUri);const uri=(0,_common.getUri)(arrayParentUri,arrayIndex);const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(schema);const description=(0,_common.getDescription)(schema);const{oneOf}=schema;const items=oneOf.map((schema,index)=>transformArraySchemaBoolean(schema,rootSchema,values,{...params,parentUri:uri,index}));const selectedItems=(0,_common.getSelectedItems)(values,uri,parentUri);const meta={parentUri,uri,item:arrayIndex,type:'boolean',schema,rootSchema,required:isRequired,selectedItems,...metaProps};const elements={...title,...description,oneOf:{items,required:isRequired,selectedItems,id:uri}};return{meta,elements};}function transformArraySchemaBooleanForAllOf(schema,rootSchema,values,params){const{allOf,...rest}=schema;const itemSchema=allOf.reduce((accumulator,schema)=>({...accumulator,...schema}),rest);const{required:isRequired=false,parentUri:arrayParentUri='#',index:arrayIndex=0}=params;const parentUri=(0,_common.getParentUri)(arrayParentUri);const uri=(0,_common.getUri)(arrayParentUri,arrayIndex);const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(schema);const description=(0,_common.getDescription)(schema);const meta={parentUri,uri,item:arrayIndex,type:'boolean',schema,rootSchema,required:isRequired,...(0,_common.getMetaDefaultValue)(itemSchema,uri),...(0,_common.getMetaValue)(values,uri,itemSchema),...metaProps};const elements={...title,...description,field:{required:isRequired,...(0,_common.getElementsFieldValue)(values,uri,itemSchema),...(0,_common.getElementsFieldProps)(params,uri),id:uri}};return{meta,elements};}function transformArraySchemaBoolean(schema,rootSchema,values,params){if((0,_common.hasEnum)(schema)){return transformArraySchemaBooleanForEnum(schema,rootSchema,values,params);}else{if((0,_common.hasAnyOf)(schema)){return transformArraySchemaBooleanForAnyOf(schema,rootSchema,values,params);}else{if((0,_common.hasOneOf)(schema)){return transformArraySchemaBooleanForOneOf(schema,rootSchema,values,params);}else{if((0,_common.hasAllOf)(schema)){return transformArraySchemaBooleanForAllOf(schema,rootSchema,values,params);}else{const{required:isRequired=false,parentUri:arrayParentUri='#',index:arrayIndex=0}=params;const parentUri=(0,_common.getParentUri)(arrayParentUri);const uri=(0,_common.getUri)(arrayParentUri,arrayIndex);const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(schema);const description=(0,_common.getDescription)(schema);const meta={parentUri,uri,item:arrayIndex,type:'boolean',schema,rootSchema,required:isRequired,...(0,_common.getMetaDefaultValue)(schema,uri),...(0,_common.getMetaValue)(values,uri,schema),...metaProps};const elements={...title,...description,field:{required:isRequired,...(0,_common.getElementsFieldValue)(values,uri,schema),...(0,_common.getElementsFieldProps)(params,uri),id:uri}};return{meta,elements};}}}}}function transformArraySchemaObjectForEnum(schema,rootSchema,values,params){const{required:isRequired=false,parentUri:arrayParentUri='#',index:arrayIndex=0}=params;const parentUri=(0,_common.getParentUri)(arrayParentUri);const uri=(0,_common.getUri)(arrayParentUri,arrayIndex);const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(schema);const description=(0,_common.getDescription)(schema);const items=(0,_common.getEnum)(schema);const selectedItems=(0,_common.getSelectedItems)(values,uri,parentUri);const minProperties=(0,_common.getMinProperties)(schema);const maxProperties=(0,_common.getMaxProperties)(schema);const meta={parentUri,uri,item:arrayIndex,type:'object',schema,rootSchema,...minProperties,...maxProperties,required:isRequired,selectedItems,...metaProps};const elements={...title,...description,enum:{items,...minProperties,...maxProperties,required:isRequired,selectedItems,id:uri}};return{meta,elements};}function transformArraySchemaObjectForAnyOf(schema,rootSchema,values,params){const{required:isRequired=false,parentUri:arrayParentUri='#',index:arrayIndex=0}=params;const parentUri=(0,_common.getParentUri)(arrayParentUri);const uri=(0,_common.getUri)(arrayParentUri,arrayIndex);const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(schema);const description=(0,_common.getDescription)(schema);const{anyOf}=schema;const items=anyOf.map((schema,index)=>transformArraySchemaObject(schema,rootSchema,values,{...params,parentUri:uri,index}));const selectedItems=(0,_common.getSelectedItems)(values,uri,parentUri);const minProperties=(0,_common.getMinProperties)(schema);const maxProperties=(0,_common.getMaxProperties)(schema);const meta={parentUri,uri,item:arrayIndex,type:'object',schema,rootSchema,...minProperties,...maxProperties,required:isRequired,selectedItems,...metaProps};const elements={...title,...description,anyOf:{items,...minProperties,...maxProperties,required:isRequired,selectedItems,id:uri}};return{meta,elements};}function transformArraySchemaObjectForOneOf(schema,rootSchema,values,params){const{required:isRequired=false,parentUri:arrayParentUri='#',index:arrayIndex=0}=params;const parentUri=(0,_common.getParentUri)(arrayParentUri);const uri=(0,_common.getUri)(arrayParentUri,arrayIndex);const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(schema);const description=(0,_common.getDescription)(schema);const{oneOf}=schema;const items=oneOf.map((schema,index)=>transformArraySchemaObject(schema,rootSchema,values,{...params,parentUri:uri,index}));const selectedItems=(0,_common.getSelectedItems)(values,uri,parentUri);const minProperties=(0,_common.getMinProperties)(schema);const maxProperties=(0,_common.getMaxProperties)(schema);const meta={parentUri,uri,item:arrayIndex,type:'object',schema,rootSchema,...maxProperties,...minProperties,required:isRequired,selectedItems,...metaProps};const elements={...title,...description,oneOf:{items,...maxProperties,...minProperties,required:isRequired,selectedItems,id:uri}};return{meta,elements};}function transformArraySchemaObjectForAllOf(schema,rootSchema,values,params){const{allOf,...rest}=schema;const itemSchema=allOf.reduce((accumulator,schema)=>({...accumulator,...schema}),rest);const{required:isRequired=false,parentUri:arrayParentUri='#',index:arrayIndex=0}=params;const parentUri=(0,_common.getParentUri)(arrayParentUri);const uri=(0,_common.getUri)(arrayParentUri,arrayIndex);const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(schema);const description=(0,_common.getDescription)(schema);const minProperties=(0,_common.getMinProperties)(schema);const maxProperties=(0,_common.getMaxProperties)(schema);const meta={parentUri,uri,item:arrayIndex,type:'object',schema,rootSchema,...maxProperties,...minProperties,required:isRequired,...(0,_common.getMetaDefaultValue)(itemSchema,uri),...(0,_common.getMetaValue)(values,uri,itemSchema),...metaProps};const{properties={},required=[]}=itemSchema;const elements={...title,...description,fields:Object.entries(properties).map(([key,schema])=>transformObjectSchema(schema,rootSchema,values,{...params,required:required.includes(key),parentUri:uri,key}))};return{meta,elements};}function transformArraySchemaObject(schema,rootSchema,values,params){if((0,_common.hasEnum)(schema)){return transformArraySchemaObjectForEnum(schema,rootSchema,values,params);}else{if((0,_common.hasAnyOf)(schema)){return transformArraySchemaObjectForAnyOf(schema,rootSchema,values,params);}else{if((0,_common.hasOneOf)(schema)){return transformArraySchemaObjectForOneOf(schema,rootSchema,values,params);}else{if((0,_common.hasAllOf)(schema)){return transformArraySchemaObjectForAllOf(schema,rootSchema,values,params);}else{const{required:isRequired=false,parentUri:arrayParentUri='#',index:arrayIndex=0}=params;const parentUri=(0,_common.getParentUri)(arrayParentUri);const uri=(0,_common.getUri)(arrayParentUri,arrayIndex);const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(schema);const description=(0,_common.getDescription)(schema);const minProperties=(0,_common.getMinProperties)(schema);const maxProperties=(0,_common.getMaxProperties)(schema);const meta={parentUri,uri,item:arrayIndex,type:'object',schema,rootSchema,...maxProperties,...minProperties,required:isRequired,...(0,_common.getMetaDefaultValue)(schema,uri),...(0,_common.getMetaValue)(values,uri,schema),...metaProps};const{properties={},required=[]}=schema;const elements={...title,...description,fields:Object.entries(properties).map(([key,schema])=>transformObjectSchema(schema,rootSchema,values,{...params,required:required.includes(key),parentUri:uri,key}))};return{meta,elements};}}}}}function transformArraySchemaArrayForEnum(schema,rootSchema,values,params){const{required:isRequired=false,parentUri:arrayParentUri='#',index:arrayIndex=0}=params;const parentUri=(0,_common.getParentUri)(arrayParentUri);const uri=(0,_common.getUri)(arrayParentUri,arrayIndex);const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(schema);const description=(0,_common.getDescription)(schema);const items=(0,_common.getEnum)(schema);const selectedItems=(0,_common.getSelectedItems)(values,uri,parentUri);const minItems=(0,_common.getMinItems)(schema);const maxItems=(0,_common.getMaxItems)(schema);const hasUniqueItems=(0,_common.getHasUniqueItems)(schema);const maxContains=(0,_common.getMaxContains)(schema);const minContains=(0,_common.getMinContains)(schema);const meta={parentUri,uri,item:arrayIndex,type:'array',schema,rootSchema,...minItems,...maxItems,...hasUniqueItems,...maxContains,...minContains,required:isRequired,selectedItems,...metaProps};const elements={...title,...description,enum:{items,required:isRequired,selectedItems,id:uri}};return{meta,elements};}function transformArraySchemaArrayForAnyOf(schema,rootSchema,values,params){const{required:isRequired=false,parentUri:arrayParentUri='#',index:arrayIndex=0}=params;const parentUri=(0,_common.getParentUri)(arrayParentUri);const uri=(0,_common.getUri)(arrayParentUri,arrayIndex);const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(schema);const description=(0,_common.getDescription)(schema);const{anyOf}=schema;const items=anyOf.map((schema,index)=>transformArraySchemaArray(schema,rootSchema,values,{...params,parentUri:uri,index}));const selectedItems=(0,_common.getSelectedItems)(values,uri,parentUri);const minItems=(0,_common.getMinItems)(schema);const maxItems=(0,_common.getMaxItems)(schema);const hasUniqueItems=(0,_common.getHasUniqueItems)(schema);const maxContains=(0,_common.getMaxContains)(schema);const minContains=(0,_common.getMinContains)(schema);const meta={parentUri,uri,item:arrayIndex,type:'array',schema,rootSchema,...minItems,...maxItems,...hasUniqueItems,...maxContains,...minContains,required:isRequired,selectedItems,...metaProps};const elements={...title,...description,anyOf:{items,required:isRequired,selectedItems,id:uri}};return{meta,elements};}function transformArraySchemaArrayForOneOf(schema,rootSchema,values,params){const{required:isRequired=false,parentUri:arrayParentUri='#',index:arrayIndex=0}=params;const parentUri=(0,_common.getParentUri)(arrayParentUri);const uri=(0,_common.getUri)(arrayParentUri,arrayIndex);const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(schema);const description=(0,_common.getDescription)(schema);const{oneOf}=schema;const items=oneOf.map((schema,index)=>transformArraySchemaArray(schema,rootSchema,values,{...params,parentUri:uri,index}));const selectedItems=(0,_common.getSelectedItems)(values,uri,parentUri);const minItems=(0,_common.getMinItems)(schema);const maxItems=(0,_common.getMaxItems)(schema);const hasUniqueItems=(0,_common.getHasUniqueItems)(schema);const maxContains=(0,_common.getMaxContains)(schema);const minContains=(0,_common.getMinContains)(schema);const meta={parentUri,uri,item:arrayIndex,type:'array',schema,rootSchema,...minItems,...maxItems,...hasUniqueItems,...maxContains,...minContains,required:isRequired,selectedItems,...metaProps};const elements={...title,...description,oneOf:{items,required:isRequired,selectedItems,id:uri}};return{meta,elements};}function transformArraySchemaArrayForAllOf(schema,rootSchema,values,params){const{allOf,...rest}=schema;const itemSchema=allOf.reduce((accumulator,schema)=>({...accumulator,...schema}),rest);const{required:isRequired=false,parentUri:arrayParentUri='#',index:arrayIndex=0}=params;const parentUri=(0,_common.getParentUri)(arrayParentUri);const uri=(0,_common.getUri)(arrayParentUri,arrayIndex);const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(schema);const description=(0,_common.getDescription)(schema);const minItems=(0,_common.getMinItems)(itemSchema);const maxItems=(0,_common.getMaxItems)(itemSchema);const hasUniqueItems=(0,_common.getHasUniqueItems)(itemSchema);const maxContains=(0,_common.getMaxContains)(itemSchema);const minContains=(0,_common.getMinContains)(itemSchema);const meta={parentUri,uri,item:arrayIndex,type:'array',schema,rootSchema,...minItems,...maxItems,...hasUniqueItems,...maxContains,...minContains,required:isRequired,...(0,_common.getMetaDefaultValue)(itemSchema,uri),...(0,_common.getMetaValue)(values,uri,itemSchema),...metaProps};const{items=[]}=itemSchema;if((0,_common.isArray)(items)){const elements={...title,...description,fields:items.map((schema,index)=>transformArraySchema(schema,rootSchema,values,{...params,parentUri:uri,index}))};return{meta,elements};}const elements={...title,...description,fields:[transformArraySchema(items,rootSchema,values,{...params,parentUri:uri})]};return{meta,elements};}function transformArraySchemaArray(schema,rootSchema,values,params){if((0,_common.hasEnum)(schema)){return transformArraySchemaArrayForEnum(schema,rootSchema,values,params);}else{if((0,_common.hasAnyOf)(schema)){return transformArraySchemaArrayForAnyOf(schema,rootSchema,values,params);}else{if((0,_common.hasOneOf)(schema)){return transformArraySchemaArrayForOneOf(schema,rootSchema,values,params);}else{if((0,_common.hasAllOf)(schema)){return transformArraySchemaArrayForAllOf(schema,rootSchema,values,params);}else{const{required:isRequired=false,parentUri:arrayParentUri='#',index:arrayIndex=0}=params;const parentUri=(0,_common.getParentUri)(arrayParentUri);const uri=(0,_common.getUri)(arrayParentUri,arrayIndex);const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(schema);const description=(0,_common.getDescription)(schema);const minItems=(0,_common.getMinItems)(schema);const maxItems=(0,_common.getMaxItems)(schema);const hasUniqueItems=(0,_common.getHasUniqueItems)(schema);const maxContains=(0,_common.getMaxContains)(schema);const minContains=(0,_common.getMinContains)(schema);const meta={parentUri,uri,item:arrayIndex,type:'array',schema,rootSchema,...minItems,...maxItems,...hasUniqueItems,...maxContains,...minContains,required:isRequired,...(0,_common.getMetaDefaultValue)(schema,uri),...(0,_common.getMetaValue)(values,uri,schema),...metaProps};const{items=[]}=schema;if((0,_common.isArray)(items)){const elements={...title,...description,fields:items.map((schema,index)=>transformArraySchema(schema,rootSchema,values,{...params,parentUri:uri,index}))};return{meta,elements};}const elements={...title,...description,fields:[transformArraySchema(items,rootSchema,values,{...params,parentUri:uri})]};return{meta,elements};}}}}}function transformArraySchemaNumberForEnum(schema,rootSchema,values,params){const{required:isRequired=false,parentUri:arrayParentUri='#',index:arrayIndex=0}=params;const parentUri=(0,_common.getParentUri)(arrayParentUri);const uri=(0,_common.getUri)(arrayParentUri,arrayIndex);const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(schema);const description=(0,_common.getDescription)(schema);const items=(0,_common.getEnum)(schema);const selectedItems=(0,_common.getSelectedItems)(values,uri,parentUri);const isExclusiveMin=(0,_common.getIsExclusiveMin)(schema);const isExclusiveMax=(0,_common.getIsExclusiveMax)(schema);const min=(0,_common.getMin)(schema);const max=(0,_common.getMax)(schema);const step=(0,_common.getStep)(schema);const meta={parentUri,uri,item:arrayIndex,type:'number',schema,rootSchema,...isExclusiveMin,...isExclusiveMax,...min,...max,...step,required:isRequired,selectedItems,...metaProps};const elements={...title,...description,enum:{items,...min,...max,...step,required:isRequired,selectedItems,id:uri}};return{meta,elements};}function transformArraySchemaNumberForAnyOf(schema,rootSchema,values,params){const{required:isRequired=false,parentUri:arrayParentUri='#',index:arrayIndex=0}=params;const parentUri=(0,_common.getParentUri)(arrayParentUri);const uri=(0,_common.getUri)(arrayParentUri,arrayIndex);const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(schema);const description=(0,_common.getDescription)(schema);const{anyOf}=schema;const items=anyOf.map((schema,index)=>transformArraySchemaNumber(schema,rootSchema,values,{...params,parentUri:uri,index}));const selectedItems=(0,_common.getSelectedItems)(values,uri,parentUri);const isExclusiveMin=(0,_common.getIsExclusiveMin)(schema);const isExclusiveMax=(0,_common.getIsExclusiveMax)(schema);const min=(0,_common.getMin)(schema);const max=(0,_common.getMax)(schema);const step=(0,_common.getStep)(schema);const meta={parentUri,uri,item:arrayIndex,type:'number',schema,rootSchema,...isExclusiveMin,...isExclusiveMax,...min,...max,...step,required:isRequired,selectedItems,...metaProps};const elements={...title,...description,anyOf:{items,...min,...max,...step,required:isRequired,selectedItems,id:uri}};return{meta,elements};}function transformArraySchemaNumberForOneOf(schema,rootSchema,values,params){const{required:isRequired=false,parentUri:arrayParentUri='#',index:arrayIndex=0}=params;const parentUri=(0,_common.getParentUri)(arrayParentUri);const uri=(0,_common.getUri)(arrayParentUri,arrayIndex);const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(schema);const description=(0,_common.getDescription)(schema);const{oneOf}=schema;const items=oneOf.map((schema,index)=>transformArraySchemaNumber(schema,rootSchema,values,{...params,parentUri:uri,index}));const selectedItems=(0,_common.getSelectedItems)(values,uri,parentUri);const isExclusiveMin=(0,_common.getIsExclusiveMin)(schema);const isExclusiveMax=(0,_common.getIsExclusiveMax)(schema);const min=(0,_common.getMin)(schema);const max=(0,_common.getMax)(schema);const step=(0,_common.getStep)(schema);const meta={parentUri,uri,item:arrayIndex,type:'number',schema,rootSchema,...isExclusiveMin,...isExclusiveMax,...min,...max,...step,required:isRequired,selectedItems,...metaProps};const elements={...title,...description,oneOf:{items,...min,...max,...step,required:isRequired,selectedItems,id:uri}};return{meta,elements};}function transformArraySchemaNumberForAllOf(schema,rootSchema,values,params){const{allOf,...rest}=schema;const itemSchema=allOf.reduce((accumulator,schema)=>({...accumulator,...schema}),rest);const{required:isRequired=false,parentUri:arrayParentUri='#',index:arrayIndex=0}=params;const parentUri=(0,_common.getParentUri)(arrayParentUri);const uri=(0,_common.getUri)(arrayParentUri,arrayIndex);const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(schema);const description=(0,_common.getDescription)(schema);const isExclusiveMin=(0,_common.getIsExclusiveMin)(itemSchema);const isExclusiveMax=(0,_common.getIsExclusiveMax)(itemSchema);const min=(0,_common.getMin)(itemSchema);const max=(0,_common.getMax)(itemSchema);const step=(0,_common.getStep)(itemSchema);const meta={parentUri,uri,item:arrayIndex,type:'number',schema,rootSchema,...isExclusiveMin,...isExclusiveMax,...min,...max,...step,required:isRequired,...(0,_common.getMetaDefaultValue)(itemSchema,uri),...(0,_common.getMetaValue)(values,uri,itemSchema),...metaProps};const elements={...title,...description,field:{...min,...max,...step,required:isRequired,...(0,_common.getElementsFieldValue)(values,uri,itemSchema),...(0,_common.getElementsFieldProps)(params,uri),id:uri}};return{meta,elements};}function transformArraySchemaNumber(schema,rootSchema,values,params){if((0,_common.hasEnum)(schema)){return transformArraySchemaNumberForEnum(schema,rootSchema,values,params);}else{if((0,_common.hasAnyOf)(schema)){return transformArraySchemaNumberForAnyOf(schema,rootSchema,values,params);}else{if((0,_common.hasOneOf)(schema)){return transformArraySchemaNumberForOneOf(schema,rootSchema,values,params);}else{if((0,_common.hasAllOf)(schema)){return transformArraySchemaNumberForAllOf(schema,rootSchema,values,params);}else{const{required:isRequired=false,parentUri:arrayParentUri='#',index:arrayIndex=0}=params;const parentUri=(0,_common.getParentUri)(arrayParentUri);const uri=(0,_common.getUri)(arrayParentUri,arrayIndex);const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(schema);const description=(0,_common.getDescription)(schema);const isExclusiveMin=(0,_common.getIsExclusiveMin)(schema);const isExclusiveMax=(0,_common.getIsExclusiveMax)(schema);const min=(0,_common.getMin)(schema);const max=(0,_common.getMax)(schema);const step=(0,_common.getStep)(schema);const meta={parentUri,uri,item:arrayIndex,type:'number',schema,rootSchema,...isExclusiveMin,...isExclusiveMax,...min,...max,...step,required:isRequired,...(0,_common.getMetaDefaultValue)(schema,uri),...(0,_common.getMetaValue)(values,uri,schema),...metaProps};const elements={...title,...description,field:{...min,...max,...step,required:isRequired,...(0,_common.getElementsFieldValue)(values,uri,schema),...(0,_common.getElementsFieldProps)(params,uri),id:uri}};return{meta,elements};}}}}}function transformArraySchemaStringForEnum(schema,rootSchema,values,params){const{required:isRequired=false,parentUri:arrayParentUri='#',index:arrayIndex=0}=params;const parentUri=(0,_common.getParentUri)(arrayParentUri);const uri=(0,_common.getUri)(arrayParentUri,arrayIndex);const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(schema);const description=(0,_common.getDescription)(schema);const items=(0,_common.getEnum)(schema);const selectedItems=(0,_common.getSelectedItems)(values,uri,parentUri);const minLength=(0,_common.getMinLength)(schema);const maxLength=(0,_common.getMaxLength)(schema);const pattern=(0,_common.getPattern)(schema);const meta={parentUri,uri,item:arrayIndex,type:'string',schema,rootSchema,...minLength,...maxLength,...pattern,required:isRequired,selectedItems,...metaProps};const elements={...title,...description,enum:{items,...minLength,...maxLength,...pattern,required:isRequired,selectedItems,id:uri}};return{meta,elements};}function transformArraySchemaStringForAnyOf(schema,rootSchema,values,params){const{required:isRequired=false,parentUri:arrayParentUri='#',index:arrayIndex=0}=params;const parentUri=(0,_common.getParentUri)(arrayParentUri);const uri=(0,_common.getUri)(arrayParentUri,arrayIndex);const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(schema);const description=(0,_common.getDescription)(schema);const{anyOf}=schema;const items=anyOf.map((schema,index)=>transformArraySchemaString(schema,rootSchema,values,{...params,parentUri:uri,index}));const selectedItems=(0,_common.getSelectedItems)(values,uri,parentUri);const minLength=(0,_common.getMinLength)(schema);const maxLength=(0,_common.getMaxLength)(schema);const pattern=(0,_common.getPattern)(schema);const meta={parentUri,uri,item:arrayIndex,type:'string',schema,rootSchema,...minLength,...maxLength,...pattern,required:isRequired,selectedItems,...metaProps};const elements={...title,...description,anyOf:{items,...minLength,...maxLength,...pattern,required:isRequired,selectedItems,id:uri}};return{meta,elements};}function transformArraySchemaStringForOneOf(schema,rootSchema,values,params){const{required:isRequired=false,parentUri:arrayParentUri='#',index:arrayIndex=0}=params;const parentUri=(0,_common.getParentUri)(arrayParentUri);const uri=(0,_common.getUri)(arrayParentUri,arrayIndex);const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(schema);const description=(0,_common.getDescription)(schema);const{oneOf}=schema;const items=oneOf.map((schema,index)=>transformArraySchemaString(schema,rootSchema,values,{...params,parentUri:uri,index}));const selectedItems=(0,_common.getSelectedItems)(values,uri,parentUri);const minLength=(0,_common.getMinLength)(schema);const maxLength=(0,_common.getMaxLength)(schema);const pattern=(0,_common.getPattern)(schema);const meta={parentUri,uri,item:arrayIndex,type:'string',schema,rootSchema,...minLength,...maxLength,...pattern,required:isRequired,selectedItems,...metaProps};const elements={...title,...description,oneOf:{items,...minLength,...maxLength,...pattern,required:isRequired,selectedItems,id:uri}};return{meta,elements};}function transformArraySchemaStringForAllOf(schema,rootSchema,values,params){const{allOf,...rest}=schema;const itemSchema=allOf.reduce((accumulator,schema)=>({...accumulator,...schema}),rest);const{required:isRequired=false,parentUri:arrayParentUri='#',index:arrayIndex=0}=params;const parentUri=(0,_common.getParentUri)(arrayParentUri);const uri=(0,_common.getUri)(arrayParentUri,arrayIndex);const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(schema);const description=(0,_common.getDescription)(schema);const minLength=(0,_common.getMinLength)(itemSchema);const maxLength=(0,_common.getMaxLength)(itemSchema);const pattern=(0,_common.getPattern)(itemSchema);const meta={parentUri,uri,item:arrayIndex,type:'string',schema,rootSchema,...minLength,...maxLength,...pattern,required:isRequired,...(0,_common.getMetaDefaultValue)(itemSchema,uri),...(0,_common.getMetaValue)(values,uri,itemSchema),...metaProps};const elements={...title,...description,field:{...minLength,...maxLength,...pattern,required:isRequired,...(0,_common.getElementsFieldValue)(values,uri,itemSchema),...(0,_common.getElementsFieldProps)(params,uri),id:uri}};return{meta,elements};}function transformArraySchemaString(schema,rootSchema,values,params){if((0,_common.hasEnum)(schema)){return transformArraySchemaStringForEnum(schema,rootSchema,values,params);}else{if((0,_common.hasAnyOf)(schema)){return transformArraySchemaStringForAnyOf(schema,rootSchema,values,params);}else{if((0,_common.hasOneOf)(schema)){return transformArraySchemaStringForOneOf(schema,rootSchema,values,params);}else{if((0,_common.hasAllOf)(schema)){return transformArraySchemaStringForAllOf(schema,rootSchema,values,params);}else{const{required:isRequired=false,parentUri:arrayParentUri='#',index:arrayIndex=0}=params;const parentUri=(0,_common.getParentUri)(arrayParentUri);const uri=(0,_common.getUri)(arrayParentUri,arrayIndex);const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(schema);const description=(0,_common.getDescription)(schema);const minLength=(0,_common.getMinLength)(schema);const maxLength=(0,_common.getMaxLength)(schema);const pattern=(0,_common.getPattern)(schema);const meta={parentUri,uri,item:arrayIndex,type:'string',schema,rootSchema,...minLength,...maxLength,...pattern,required:isRequired,...(0,_common.getMetaDefaultValue)(schema,uri),...(0,_common.getMetaValue)(values,uri,schema),...metaProps};const elements={...title,...description,field:{...minLength,...maxLength,...pattern,required:isRequired,...(0,_common.getElementsFieldValue)(values,uri,schema),...(0,_common.getElementsFieldProps)(params,uri),id:uri}};return{meta,elements};}}}}}function transformArraySchema(schema={},rootSchema=schema,values={},params={}){const{type}=schema;switch(type){case'null':return transformArraySchemaNull(schema,rootSchema,values,params);case'boolean':return transformArraySchemaBoolean(schema,rootSchema,values,params);case'object':return transformArraySchemaObject(schema,rootSchema,values,params);case'array':return transformArraySchemaArray(schema,rootSchema,values,params);case'number':return transformArraySchemaNumber(schema,rootSchema,values,params);case'string':return transformArraySchemaString(schema,rootSchema,values,params);default:throw new Error('Schema does not conform to Instance Data Model, https://json-schema.org/draft/2019-09/json-schema-core.html#rfc.section.4.2.1');}}function transformNullForEnum(schema,rootSchema,values,params){const{parentUri='#',uri='#/'}=params;const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(schema);const description=(0,_common.getDescription)(schema);const items=(0,_common.getEnum)(schema);const selectedItems=(0,_common.getSelectedItems)(values,uri,(0,_common.getParentUri)(parentUri));const meta={parentUri:(0,_common.getParentUri)(parentUri),uri,type:'null',rootSchema,schema,selectedItems,...metaProps};const elements={...title,...description,enum:{items,selectedItems,id:uri}};return{meta,elements};}function transformNullForAnyOf(schema,rootSchema,values,params){const{parentUri:schemaParentUri='#',uri='#/'}=params;const parentUri=(0,_common.getParentUri)(schemaParentUri);const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(schema);const description=(0,_common.getDescription)(schema);const{anyOf}=schema;const items=anyOf.map((schema,index)=>transformArraySchemaNull(schema,rootSchema,values,{...params,parentUri:schemaParentUri,index}));const selectedItems=(0,_common.getSelectedItems)(values,uri,parentUri);const meta={parentUri,uri,type:'null',rootSchema,schema,selectedItems,...metaProps};const elements={...title,...description,anyOf:{items,selectedItems,id:uri}};return{meta,elements};}function transformNullForOneOf(schema,rootSchema,values,params){const{parentUri:schemaParentUri='#',uri='#/'}=params;const parentUri=(0,_common.getParentUri)(schemaParentUri);const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(schema);const description=(0,_common.getDescription)(schema);const{oneOf}=schema;const items=oneOf.map((schema,index)=>transformArraySchemaNull(schema,rootSchema,values,{...params,parentUri:schemaParentUri,index}));const selectedItems=(0,_common.getSelectedItems)(values,uri,parentUri);const meta={parentUri,uri,type:'null',rootSchema,schema,selectedItems,...metaProps};const elements={...title,...description,oneOf:{items,selectedItems,id:uri}};return{meta,elements};}function transformNullForAllOf(schema,rootSchema,values,params){const{parentUri='#',uri='#/'}=params;const{allOf,...rest}=schema;const itemSchema=allOf.reduce((accumulator,schema)=>({...accumulator,...schema}),rest);const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(schema);const description=(0,_common.getDescription)(schema);const meta={parentUri:(0,_common.getParentUri)(parentUri),uri,type:'null',rootSchema,schema,...(0,_common.getMetaDefaultValue)(itemSchema,uri),...(0,_common.getMetaValue)(values,uri,itemSchema),...metaProps};const elements={...title,...description,field:{...(0,_common.getElementsFieldValue)(values,uri,itemSchema),...(0,_common.getElementsFieldProps)(params,uri),id:uri}};return{meta,elements};}function transformNull(schema,rootSchema,values,params){if((0,_common.hasEnum)(schema)){return transformNullForEnum(schema,rootSchema,values,params);}else{if((0,_common.hasAnyOf)(schema)){return transformNullForAnyOf(schema,rootSchema,values,params);}else{if((0,_common.hasOneOf)(schema)){return transformNullForOneOf(schema,rootSchema,values,params);}else{if((0,_common.hasAllOf)(schema)){return transformNullForAllOf(schema,rootSchema,values,params);}else{const{parentUri='#',uri='#/'}=params;const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(schema);const description=(0,_common.getDescription)(schema);const meta={parentUri:(0,_common.getParentUri)(parentUri),uri,type:'null',rootSchema,schema,...(0,_common.getMetaDefaultValue)(schema,uri),...(0,_common.getMetaValue)(values,uri,schema),...metaProps};const elements={...title,...description,field:{...(0,_common.getElementsFieldValue)(values,uri,schema),...(0,_common.getElementsFieldProps)(params,uri),id:uri}};return{meta,elements};}}}}}function transformBooleanForEnum(schema,rootSchema,values,params){const{parentUri:schemaParentUri='#',uri='#/'}=params;const parentUri=(0,_common.getParentUri)(schemaParentUri);const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(schema);const description=(0,_common.getDescription)(schema);const items=(0,_common.getEnum)(schema);const selectedItems=(0,_common.getSelectedItems)(values,uri,parentUri);const meta={parentUri,uri,type:'boolean',rootSchema,schema,selectedItems,...metaProps};const elements={...title,...description,enum:{items,selectedItems,id:uri}};return{meta,elements};}function transformBooleanForAnyOf(schema,rootSchema,values,params){const{parentUri:schemaParentUri='#',uri='#/'}=params;const parentUri=(0,_common.getParentUri)(schemaParentUri);const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(schema);const description=(0,_common.getDescription)(schema);const{anyOf}=schema;const items=anyOf.map((schema,index)=>transformArraySchemaBoolean(schema,rootSchema,values,{...params,parentUri:schemaParentUri,index}));const selectedItems=(0,_common.getSelectedItems)(values,uri,parentUri);const meta={parentUri,uri,type:'boolean',rootSchema,schema,selectedItems,...metaProps};const elements={...title,...description,anyOf:{items,selectedItems,id:uri}};return{meta,elements};}function transformBooleanForOneOf(schema,rootSchema,values,params){const{parentUri:schemaParentUri='#',uri='#/'}=params;const parentUri=(0,_common.getParentUri)(schemaParentUri);const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(schema);const description=(0,_common.getDescription)(schema);const{oneOf}=schema;const items=oneOf.map((schema,index)=>transformArraySchemaBoolean(schema,rootSchema,values,{...params,parentUri:schemaParentUri,index}));const selectedItems=(0,_common.getSelectedItems)(values,uri,parentUri);const meta={parentUri,uri,type:'boolean',rootSchema,schema,selectedItems,...metaProps};const elements={...title,...description,oneOf:{items,selectedItems,id:uri}};return{meta,elements};}function transformBooleanForAllOf(schema,rootSchema,values,params){const{parentUri='#',uri='#/'}=params;const{allOf,...rest}=schema;const itemSchema=allOf.reduce((accumulator,schema)=>({...accumulator,...schema}),rest);const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(schema);const description=(0,_common.getDescription)(schema);const meta={parentUri:(0,_common.getParentUri)(parentUri),uri,type:'boolean',rootSchema,schema,...(0,_common.getMetaDefaultValue)(itemSchema,uri),...(0,_common.getMetaValue)(values,uri,itemSchema),...metaProps};const elements={...title,...description,field:{...(0,_common.getElementsFieldValue)(values,uri,itemSchema),...(0,_common.getElementsFieldProps)(params,uri),id:uri}};return{meta,elements};}function transformBoolean(schema,rootSchema,values,params){if((0,_common.hasEnum)(schema)){return transformBooleanForEnum(schema,rootSchema,values,params);}else{if((0,_common.hasAnyOf)(schema)){return transformBooleanForAnyOf(schema,rootSchema,values,params);}else{if((0,_common.hasOneOf)(schema)){return transformBooleanForOneOf(schema,rootSchema,values,params);}else{if((0,_common.hasAllOf)(schema)){return transformBooleanForAllOf(schema,rootSchema,values,params);}else{const{parentUri='#',uri='#/'}=params;const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(schema);const description=(0,_common.getDescription)(schema);const meta={parentUri:(0,_common.getParentUri)(parentUri),uri,type:'boolean',rootSchema,schema,...(0,_common.getMetaDefaultValue)(schema,uri),...(0,_common.getMetaValue)(values,uri,schema),...metaProps};const elements={...title,...description,field:{...(0,_common.getElementsFieldValue)(values,uri,schema),...(0,_common.getElementsFieldProps)(params,uri),id:uri}};return{meta,elements};}}}}}function transformObjectForEnum(schema,rootSchema,values,params){const{parentUri:schemaParentUri='#',uri='#/'}=params;const parentUri=(0,_common.getParentUri)(schemaParentUri);const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(schema);const description=(0,_common.getDescription)(schema);const items=(0,_common.getEnum)(schema);const selectedItems=(0,_common.getSelectedItems)(values,uri,parentUri);const minProperties=(0,_common.getMinProperties)(schema);const maxProperties=(0,_common.getMaxProperties)(schema);const meta={parentUri,uri,type:'object',rootSchema,schema,...minProperties,...maxProperties,...(0,_common.getMetaDefaultValue)(schema,uri),...(0,_common.getMetaValue)(values,uri,schema),selectedItems,...metaProps};const elements={...title,...description,enum:{items,...minProperties,...maxProperties,selectedItems,id:uri}};return{meta,elements};}function transformObjectForAnyOf(schema,rootSchema,values,params){const{parentUri:schemaParentUri='#',uri='#/'}=params;const parentUri=(0,_common.getParentUri)(schemaParentUri);const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(schema);const description=(0,_common.getDescription)(schema);const{anyOf}=schema;const items=anyOf.map((schema,index)=>transformArraySchemaObject(schema,rootSchema,values,{...params,parentUri:schemaParentUri,index}));const selectedItems=(0,_common.getSelectedItems)(values,uri,parentUri);const minProperties=(0,_common.getMinProperties)(schema);const maxProperties=(0,_common.getMaxProperties)(schema);const meta={parentUri,uri,type:'object',rootSchema,schema,...minProperties,...maxProperties,...(0,_common.getMetaDefaultValue)(schema,uri),...(0,_common.getMetaValue)(values,uri,schema),selectedItems,...metaProps};const elements={...title,...description,anyOf:{items,...minProperties,...maxProperties,selectedItems,id:uri}};return{meta,elements};}function transformObjectForOneOf(schema,rootSchema,values,params){const{parentUri:schemaParentUri='#',uri='#/'}=params;const parentUri=(0,_common.getParentUri)(schemaParentUri);const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(schema);const description=(0,_common.getDescription)(schema);const{oneOf}=schema;const items=oneOf.map((schema,index)=>transformArraySchemaObject(schema,rootSchema,values,{...params,parentUri:schemaParentUri,index}));const selectedItems=(0,_common.getSelectedItems)(values,uri,parentUri);const minProperties=(0,_common.getMinProperties)(schema);const maxProperties=(0,_common.getMaxProperties)(schema);const meta={parentUri,uri,type:'object',rootSchema,schema,...minProperties,...maxProperties,...(0,_common.getMetaDefaultValue)(schema,uri),...(0,_common.getMetaValue)(values,uri,schema),selectedItems,...metaProps};const elements={...title,...description,oneOf:{items,...minProperties,...maxProperties,selectedItems,id:uri}};return{meta,elements};}function transformObjectForAllOf(schema,rootSchema,values,params){const{parentUri='#',uri='#/'}=params;const{allOf,...rest}=schema;const itemSchema=allOf.reduce((accumulator,schema)=>({...accumulator,...schema}),rest);const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(schema);const description=(0,_common.getDescription)(schema);const minProperties=(0,_common.getMinProperties)(itemSchema);const maxProperties=(0,_common.getMaxProperties)(itemSchema);const meta={parentUri:(0,_common.getParentUri)(parentUri),uri,type:'object',rootSchema,schema,...minProperties,...maxProperties,...(0,_common.getMetaDefaultValue)(itemSchema,uri),...(0,_common.getMetaValue)(values,uri,itemSchema),...metaProps};const{properties={},required=[]}=itemSchema;const elements={...title,...description,fields:Object.entries(properties).map(([key,schema])=>transformObjectSchema(schema,rootSchema,values,{...params,required:required.includes(key),parentUri,key}))};return{meta,elements};}function transformObject(schema,rootSchema,values,params){if((0,_common.hasEnum)(schema)){return transformObjectForEnum(schema,rootSchema,values,params);}else{if((0,_common.hasAnyOf)(schema)){return transformObjectForAnyOf(schema,rootSchema,values,params);}else{if((0,_common.hasOneOf)(schema)){return transformObjectForOneOf(schema,rootSchema,values,params);}else{if((0,_common.hasAllOf)(schema)){return transformObjectForAllOf(schema,rootSchema,values,params);}else{const{parentUri='#',uri='#/'}=params;const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(schema);const description=(0,_common.getDescription)(schema);const minProperties=(0,_common.getMinProperties)(schema);const maxProperties=(0,_common.getMaxProperties)(schema);const meta={parentUri:(0,_common.getParentUri)(parentUri),uri,type:'object',rootSchema,schema,...minProperties,...maxProperties,...(0,_common.getMetaDefaultValue)(schema,uri),...(0,_common.getMetaValue)(values,uri,schema),...metaProps};const{properties={},required=[]}=schema;const elements={...title,...description,fields:Object.entries(properties).map(([key,schema])=>transformObjectSchema(schema,rootSchema,values,{...params,required:required.includes(key),parentUri,key}))};return{meta,elements};}}}}}function transformArrayForEnum(schema,rootSchema,values,params){const{parentUri:schemaParentUri='#',uri='#/'}=params;const parentUri=(0,_common.getParentUri)(schemaParentUri);const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(schema);const description=(0,_common.getDescription)(schema);const items=(0,_common.getEnum)(schema);const selectedItems=(0,_common.getSelectedItems)(values,uri,parentUri);const minItems=(0,_common.getMinItems)(schema);const maxItems=(0,_common.getMaxItems)(schema);const hasUniqueItems=(0,_common.getHasUniqueItems)(schema);const maxContains=(0,_common.getMaxContains)(schema);const minContains=(0,_common.getMinContains)(schema);const meta={parentUri,uri,type:'array',rootSchema,schema,...minItems,...maxItems,...hasUniqueItems,...maxContains,...minContains,selectedItems,...metaProps};const elements={...title,...description,enum:{items,...minItems,...maxItems,...hasUniqueItems,...maxContains,...minContains,selectedItems,id:uri}};return{meta,elements};}function transformArrayForAnyOf(schema,rootSchema,values,params){const{parentUri:schemaParentUri='#',uri='#/'}=params;const parentUri=(0,_common.getParentUri)(schemaParentUri);const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(schema);const description=(0,_common.getDescription)(schema);const{anyOf}=schema;const items=anyOf.map((schema,index)=>transformArraySchemaArray(schema,rootSchema,values,{...params,parentUri:schemaParentUri,index}));const selectedItems=(0,_common.getSelectedItems)(values,uri,parentUri);const minItems=(0,_common.getMinItems)(schema);const maxItems=(0,_common.getMaxItems)(schema);const hasUniqueItems=(0,_common.getHasUniqueItems)(schema);const maxContains=(0,_common.getMaxContains)(schema);const minContains=(0,_common.getMinContains)(schema);const meta={parentUri,uri,type:'array',rootSchema,schema,...minItems,...maxItems,...hasUniqueItems,...maxContains,...minContains,selectedItems,...metaProps};const elements={...title,...description,anyOf:{items,...minItems,...maxItems,...hasUniqueItems,...maxContains,...minContains,selectedItems,id:uri}};return{meta,elements};}function transformArrayForOneOf(schema,rootSchema,values,params){const{parentUri:schemaParentUri='#',uri='#/'}=params;const parentUri=(0,_common.getParentUri)(schemaParentUri);const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(schema);const description=(0,_common.getDescription)(schema);const{oneOf}=schema;const items=oneOf.map((schema,index)=>transformArraySchemaArray(schema,rootSchema,values,{...params,parentUri:schemaParentUri,index}));const selectedItems=(0,_common.getSelectedItems)(values,uri,parentUri);const minItems=(0,_common.getMinItems)(schema);const maxItems=(0,_common.getMaxItems)(schema);const hasUniqueItems=(0,_common.getHasUniqueItems)(schema);const maxContains=(0,_common.getMaxContains)(schema);const minContains=(0,_common.getMinContains)(schema);const meta={parentUri,uri,type:'array',rootSchema,schema,...minItems,...maxItems,...hasUniqueItems,...maxContains,...minContains,selectedItems,...metaProps};const elements={...title,...description,oneOf:{items,...minItems,...maxItems,...hasUniqueItems,...maxContains,...minContains,selectedItems,id:uri}};return{meta,elements};}function transformArrayForAllOf(schema,rootSchema,values,params){const{parentUri='#',uri='#/'}=params;const{allOf,...rest}=schema;const itemSchema=allOf.reduce((accumulator,schema)=>({...accumulator,...schema}),rest);const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(schema);const description=(0,_common.getDescription)(schema);const minItems=(0,_common.getMinItems)(itemSchema);const maxItems=(0,_common.getMaxItems)(itemSchema);const hasUniqueItems=(0,_common.getHasUniqueItems)(itemSchema);const maxContains=(0,_common.getMaxContains)(itemSchema);const minContains=(0,_common.getMinContains)(itemSchema);const meta={parentUri:(0,_common.getParentUri)(parentUri),uri,type:'array',rootSchema,schema,...minItems,...maxItems,...hasUniqueItems,...maxContains,...minContains,...(0,_common.getMetaDefaultValue)(itemSchema,uri),...(0,_common.getMetaValue)(values,uri,itemSchema),...metaProps};const{items=[]}=itemSchema;if((0,_common.isArray)(items)){const elements={...title,...description,fields:items.map((schema,index)=>transformArraySchema(schema,rootSchema,values,{...params,parentUri:uri,index}))};return{meta,elements};}const elements={...title,...description,fields:[transformArraySchema(items,rootSchema,values,{...params,parentUri:uri})]};return{meta,elements};}function transformArray(schema,rootSchema,values,params){if((0,_common.hasEnum)(schema)){return transformArrayForEnum(schema,rootSchema,values,params);}else{if((0,_common.hasAnyOf)(schema)){return transformArrayForAnyOf(schema,rootSchema,values,params);}else{if((0,_common.hasOneOf)(schema)){return transformArrayForOneOf(schema,rootSchema,values,params);}else{if((0,_common.hasAllOf)(schema)){return transformArrayForAllOf(schema,rootSchema,values,params);}else{const{parentUri='#',uri='#/'}=params;const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(schema);const description=(0,_common.getDescription)(schema);const minItems=(0,_common.getMinItems)(schema);const maxItems=(0,_common.getMaxItems)(schema);const hasUniqueItems=(0,_common.getHasUniqueItems)(schema);const maxContains=(0,_common.getMaxContains)(schema);const minContains=(0,_common.getMinContains)(schema);const meta={parentUri:(0,_common.getParentUri)(parentUri),uri,type:'array',rootSchema,schema,...minItems,...maxItems,...hasUniqueItems,...maxContains,...minContains,...(0,_common.getMetaDefaultValue)(schema,uri),...(0,_common.getMetaValue)(values,uri,schema),...metaProps};const{items=[]}=schema;if((0,_common.isArray)(items)){const elements={...title,...description,fields:items.map((schema,index)=>transformArraySchema(schema,rootSchema,values,{...params,parentUri:uri,index}))};return{meta,elements};}const elements={...title,...description,fields:[transformArraySchema(items,rootSchema,values,{...params,parentUri:uri})]};return{meta,elements};}}}}}function transformNumberForEnum(schema,rootSchema,values,params){const{parentUri:schemaParentUri='#',uri='#/'}=params;const parentUri=(0,_common.getParentUri)(schemaParentUri);const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(schema);const description=(0,_common.getDescription)(schema);const items=(0,_common.getEnum)(schema);const selectedItems=(0,_common.getSelectedItems)(values,uri,parentUri);const isExclusiveMin=(0,_common.getIsExclusiveMin)(schema);const isExclusiveMax=(0,_common.getIsExclusiveMax)(schema);const min=(0,_common.getMin)(schema);const max=(0,_common.getMax)(schema);const step=(0,_common.getStep)(schema);const meta={parentUri,uri,type:'number',rootSchema,schema,...isExclusiveMin,...isExclusiveMax,...min,...max,...step,selectedItems,...metaProps};const elements={...title,...description,enum:{items,...min,...max,...step,selectedItems,id:uri}};return{meta,elements};}function transformNumberForAnyOf(schema,rootSchema,values,params){const{parentUri:schemaParentUri='#',uri='#/'}=params;const parentUri=(0,_common.getParentUri)(schemaParentUri);const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(schema);const description=(0,_common.getDescription)(schema);const{anyOf}=schema;const items=anyOf.map((schema,index)=>transformArraySchemaNumber(schema,rootSchema,values,{...params,parentUri:schemaParentUri,index}));const selectedItems=(0,_common.getSelectedItems)(values,uri,parentUri);const isExclusiveMin=(0,_common.getIsExclusiveMin)(schema);const isExclusiveMax=(0,_common.getIsExclusiveMax)(schema);const min=(0,_common.getMin)(schema);const max=(0,_common.getMax)(schema);const step=(0,_common.getStep)(schema);const meta={parentUri,uri,type:'number',rootSchema,schema,...isExclusiveMin,...isExclusiveMax,...min,...max,...step,selectedItems,...metaProps};const elements={...title,...description,anyOf:{items,...min,...max,...step,selectedItems,id:uri}};return{meta,elements};}function transformNumberForOneOf(schema,rootSchema,values,params){const{parentUri:schemaParentUri='#',uri='#/'}=params;const parentUri=(0,_common.getParentUri)(schemaParentUri);const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(schema);const description=(0,_common.getDescription)(schema);const{oneOf}=schema;const items=oneOf.map((schema,index)=>transformArraySchemaNumber(schema,rootSchema,values,{...params,parentUri:schemaParentUri,index}));const selectedItems=(0,_common.getSelectedItems)(values,uri,parentUri);const isExclusiveMin=(0,_common.getIsExclusiveMin)(schema);const isExclusiveMax=(0,_common.getIsExclusiveMax)(schema);const min=(0,_common.getMin)(schema);const max=(0,_common.getMax)(schema);const step=(0,_common.getStep)(schema);const meta={parentUri,uri,type:'number',rootSchema,schema,...isExclusiveMin,...isExclusiveMax,...min,...max,...step,selectedItems,...metaProps};const elements={...title,...description,oneOf:{items,...min,...max,...step,selectedItems,id:uri}};return{meta,elements};}function transformNumberForAllOf(schema,rootSchema,values,params){const{parentUri='#',uri='#/'}=params;const{allOf,...rest}=schema;const itemSchema=allOf.reduce((accumulator,schema)=>({...accumulator,...schema}),rest);const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(schema);const description=(0,_common.getDescription)(schema);const isExclusiveMin=(0,_common.getIsExclusiveMin)(itemSchema);const isExclusiveMax=(0,_common.getIsExclusiveMax)(itemSchema);const min=(0,_common.getMin)(itemSchema);const max=(0,_common.getMax)(itemSchema);const step=(0,_common.getStep)(itemSchema);const meta={parentUri:(0,_common.getParentUri)(parentUri),uri,type:'number',rootSchema,schema,...isExclusiveMin,...isExclusiveMax,...min,...max,...step,...(0,_common.getMetaDefaultValue)(itemSchema,uri),...(0,_common.getMetaValue)(values,uri,itemSchema),...metaProps};const elements={...title,...description,field:{...min,...max,...step,...(0,_common.getElementsFieldValue)(values,uri,itemSchema),...(0,_common.getElementsFieldProps)(params,uri),id:uri}};return{meta,elements};}function transformNumber(schema,rootSchema,values,params){if((0,_common.hasEnum)(schema)){return transformNumberForEnum(schema,rootSchema,values,params);}else{if((0,_common.hasAnyOf)(schema)){return transformNumberForAnyOf(schema,rootSchema,values,params);}else{if((0,_common.hasOneOf)(schema)){return transformNumberForOneOf(schema,rootSchema,values,params);}else{if((0,_common.hasAllOf)(schema)){return transformNumberForAllOf(schema,rootSchema,values,params);}else{const{parentUri='#',uri='#/'}=params;const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(schema);const description=(0,_common.getDescription)(schema);const isExclusiveMin=(0,_common.getIsExclusiveMin)(schema);const isExclusiveMax=(0,_common.getIsExclusiveMax)(schema);const min=(0,_common.getMin)(schema);const max=(0,_common.getMax)(schema);const step=(0,_common.getStep)(schema);const meta={parentUri:(0,_common.getParentUri)(parentUri),uri,type:'number',rootSchema,schema,...isExclusiveMin,...isExclusiveMax,...min,...max,...step,...(0,_common.getMetaDefaultValue)(schema,uri),...(0,_common.getMetaValue)(values,uri,schema),...metaProps};const elements={...title,...description,field:{...min,...max,...step,...(0,_common.getElementsFieldValue)(values,uri,schema),...(0,_common.getElementsFieldProps)(params,uri),id:uri}};return{meta,elements};}}}}}function transformStringForEnum(schema,rootSchema,values,params){const{parentUri:schemaParentUri='#',uri='#/'}=params;const parentUri=(0,_common.getParentUri)(schemaParentUri);const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(schema);const description=(0,_common.getDescription)(schema);const items=(0,_common.getEnum)(schema);const selectedItems=(0,_common.getSelectedItems)(values,uri,parentUri);const minLength=(0,_common.getMinLength)(schema);const maxLength=(0,_common.getMaxLength)(schema);const pattern=(0,_common.getPattern)(schema);const meta={parentUri,uri,type:'string',rootSchema,schema,...minLength,...maxLength,...pattern,selectedItems,...metaProps};const elements={...title,...description,enum:{items,...minLength,...maxLength,...pattern,selectedItems,id:uri}};return{meta,elements};}function transformStringForAnyOf(schema,rootSchema,values,params){const{parentUri:schemaParentUri='#',uri='#/'}=params;const parentUri=(0,_common.getParentUri)(schemaParentUri);const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(schema);const description=(0,_common.getDescription)(schema);const{anyOf}=schema;const items=anyOf.map((schema,index)=>transformArraySchemaString(schema,rootSchema,values,{...params,parentUri:schemaParentUri,index}));const selectedItems=(0,_common.getSelectedItems)(values,uri,parentUri);const minLength=(0,_common.getMinLength)(schema);const maxLength=(0,_common.getMaxLength)(schema);const pattern=(0,_common.getPattern)(schema);const meta={parentUri,uri,type:'string',rootSchema,schema,...minLength,...maxLength,...pattern,selectedItems,...metaProps};const elements={...title,...description,anyOf:{items,...minLength,...maxLength,...pattern,selectedItems,id:uri}};return{meta,elements};}function transformStringForOneOf(schema,rootSchema,values,params){const{parentUri:schemaParentUri='#',uri='#/'}=params;const parentUri=(0,_common.getParentUri)(schemaParentUri);const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(schema);const description=(0,_common.getDescription)(schema);const{oneOf}=schema;const items=oneOf.map((schema,index)=>transformArraySchemaString(schema,rootSchema,values,{...params,parentUri:schemaParentUri,index}));const selectedItems=(0,_common.getSelectedItems)(values,uri,parentUri);const minLength=(0,_common.getMinLength)(schema);const maxLength=(0,_common.getMaxLength)(schema);const pattern=(0,_common.getPattern)(schema);const meta={parentUri,uri,type:'string',rootSchema,schema,...minLength,...maxLength,...pattern,selectedItems,...metaProps};const elements={...title,...description,oneOf:{items,...minLength,...maxLength,...pattern,selectedItems,id:uri}};return{meta,elements};}function transformStringForAllOf(schema,rootSchema,values,params){const{parentUri='#',uri='#/'}=params;const{allOf,...rest}=schema;const itemSchema=allOf.reduce((accumulator,schema)=>({...accumulator,...schema}),rest);const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(schema);const description=(0,_common.getDescription)(schema);const minLength=(0,_common.getMinLength)(itemSchema);const maxLength=(0,_common.getMaxLength)(itemSchema);const pattern=(0,_common.getPattern)(itemSchema);const meta={parentUri:(0,_common.getParentUri)(parentUri),uri,type:'string',rootSchema,schema,...minLength,...maxLength,...pattern,...(0,_common.getMetaDefaultValue)(itemSchema,uri),...(0,_common.getMetaValue)(values,uri,itemSchema),...metaProps};const elements={...title,...description,field:{...minLength,...maxLength,...pattern,...(0,_common.getElementsFieldValue)(values,uri,itemSchema),...(0,_common.getElementsFieldProps)(params,uri),id:uri}};return{meta,elements};}function transformString(schema,rootSchema,values,params){if((0,_common.hasEnum)(schema)){return transformStringForEnum(schema,rootSchema,values,params);}else{if((0,_common.hasAnyOf)(schema)){return transformStringForAnyOf(schema,rootSchema,values,params);}else{if((0,_common.hasOneOf)(schema)){return transformStringForOneOf(schema,rootSchema,values,params);}else{if((0,_common.hasAllOf)(schema)){return transformStringForAllOf(schema,rootSchema,values,params);}else{const{parentUri='#',uri='#/'}=params;const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(schema);const description=(0,_common.getDescription)(schema);const minLength=(0,_common.getMinLength)(schema);const maxLength=(0,_common.getMaxLength)(schema);const pattern=(0,_common.getPattern)(schema);const meta={parentUri:(0,_common.getParentUri)(parentUri),uri,type:'string',rootSchema,schema,...minLength,...maxLength,...pattern,...(0,_common.getMetaDefaultValue)(schema,uri),...(0,_common.getMetaValue)(values,uri,schema),...metaProps};const elements={...title,...description,field:{...minLength,...maxLength,...pattern,...(0,_common.getElementsFieldValue)(values,uri,schema),...(0,_common.getElementsFieldProps)(params,uri),id:uri}};return{meta,elements};}}}}}function toZashiki(schema={},rootSchema={},values={},params={}){log('toZashiki');const{type}=schema;switch(type){case'null':return transformNull(schema,rootSchema,values,params);case'boolean':return transformBoolean(schema,rootSchema,values,params);case'object':return transformObject(schema,rootSchema,values,params);case'array':return transformArray(schema,rootSchema,values,params);case'number':return transformNumber(schema,rootSchema,values,params);case'string':return transformString(schema,rootSchema,values,params);default:throw new Error('Schema does not conform to Instance Data Model, https://json-schema.org/draft/2019-09/json-schema-core.html#rfc.section.4.2.1');}}