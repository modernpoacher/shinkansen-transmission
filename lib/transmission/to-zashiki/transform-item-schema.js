"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.transformNullForEnum=transformNullForEnum;exports.transformNullForAnyOf=transformNullForAnyOf;exports.transformNullForOneOf=transformNullForOneOf;exports.transformNullForAllOf=transformNullForAllOf;exports.transformNull=transformNull;exports.transformBooleanForEnum=transformBooleanForEnum;exports.transformBooleanForAnyOf=transformBooleanForAnyOf;exports.transformBooleanForOneOf=transformBooleanForOneOf;exports.transformBooleanForAllOf=transformBooleanForAllOf;exports.transformBoolean=transformBoolean;exports.transformObjectForEnum=transformObjectForEnum;exports.transformObjectForAnyOf=transformObjectForAnyOf;exports.transformObjectForOneOf=transformObjectForOneOf;exports.transformObjectForAllOf=transformObjectForAllOf;exports.transformObject=transformObject;exports.transformArrayForEnum=transformArrayForEnum;exports.transformArrayForAnyOf=transformArrayForAnyOf;exports.transformArrayForOneOf=transformArrayForOneOf;exports.transformArrayForAllOf=transformArrayForAllOf;exports.transformArray=transformArray;exports.transformNumberForEnum=transformNumberForEnum;exports.transformNumberForAnyOf=transformNumberForAnyOf;exports.transformNumberForOneOf=transformNumberForOneOf;exports.transformNumberForAllOf=transformNumberForAllOf;exports.transformNumber=transformNumber;exports.transformStringForEnum=transformStringForEnum;exports.transformStringForAnyOf=transformStringForAnyOf;exports.transformStringForOneOf=transformStringForOneOf;exports.transformStringForAllOf=transformStringForAllOf;exports.transformString=transformString;exports.default=transform;var _debug=_interopRequireDefault(require("debug"));var _common=require("../common");var _transformSchema=require("./transform-schema");function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}const log=(0,_debug.default)('shinkansen-transmission:to-zashiki:item-schema');function transformNullForEnum(itemSchema,schema,rootSchema,values,{parentUri='#',uri='#/',...params}){log('transformNullForEnum');const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(itemSchema);const description=(0,_common.getDescription)(itemSchema);const items=(0,_common.getEnum)(itemSchema);const selectedItems=(0,_common.getSelectedItems)(values,uri);const meta={parentUri:(0,_common.getParentUri)(parentUri),uri,type:'null',itemSchema,rootSchema,schema,selectedItems,...metaProps};const elements={...title,...description,enum:{items,selectedItems,id:uri}};return{meta,elements};}function transformNullForAnyOf(itemSchema,schema,rootSchema,values,{parentUri='#',uri='#/',...params}){log('transformNullForAnyOf');const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(itemSchema);const description=(0,_common.getDescription)(itemSchema);const{anyOf}=itemSchema;const items=anyOf.map((schema,index)=>(0,_transformSchema.transformArraySchemaNull)(itemSchema,rootSchema,values,{...params,parentUri,index}));const selectedItems=(0,_common.getSelectedItems)(values,uri);const meta={parentUri:(0,_common.getParentUri)(parentUri),uri,type:'null',itemSchema,rootSchema,schema,selectedItems,...metaProps};const elements={...title,...description,anyOf:{items,selectedItems,id:uri}};return{meta,elements};}function transformNullForOneOf(itemSchema,schema,rootSchema,values,{parentUri='#',uri='#/',...params}){log('transformNullForOneOf');const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(itemSchema);const description=(0,_common.getDescription)(itemSchema);const{oneOf}=itemSchema;const items=oneOf.map((schema,index)=>(0,_transformSchema.transformArraySchemaNull)(itemSchema,rootSchema,values,{...params,parentUri,index}));const selectedItems=(0,_common.getSelectedItems)(values,uri);const meta={parentUri:(0,_common.getParentUri)(parentUri),uri,type:'null',itemSchema,rootSchema,schema,selectedItems,...metaProps};const elements={...title,...description,oneOf:{items,selectedItems,id:uri}};return{meta,elements};}function transformNullForAllOf(itemSchema,schema,rootSchema,values,{parentUri='#',uri='#/',...params}){log('transformNullForAllOf');const{allOf,...rest}=itemSchema;const item=allOf.reduce((accumulator,schema)=>({...accumulator,...schema}),rest);const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(item);const description=(0,_common.getDescription)(item);const meta={parentUri:(0,_common.getParentUri)(parentUri),uri,type:'null',itemSchema,rootSchema,schema,...(0,_common.getMetaDefaultValue)(item,uri),...(0,_common.getMetaValue)(values,uri,item),...metaProps};const elements={...title,...description,field:{...(0,_common.getElementsFieldValue)(values,uri,item),...(0,_common.getElementsFieldProps)(params,uri),id:uri}};return{meta,elements};}function transformNull(itemSchema,schema,rootSchema,values,{parentUri='#',uri='#/',...params}){log('transformNull');if((0,_common.hasEnum)(itemSchema)){return transformNullForEnum(itemSchema,schema,rootSchema,values,{parentUri,...params});}else{if((0,_common.hasAnyOf)(itemSchema)){return transformNullForAnyOf(itemSchema,schema,rootSchema,values,{parentUri,...params});}else{if((0,_common.hasOneOf)(itemSchema)){return transformNullForOneOf(itemSchema,schema,rootSchema,values,{parentUri,...params});}else{if((0,_common.hasAllOf)(itemSchema)){return transformNullForAllOf(itemSchema,schema,rootSchema,values,{parentUri,...params});}else{const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(itemSchema);const description=(0,_common.getDescription)(itemSchema);const meta={parentUri:(0,_common.getParentUri)(parentUri),uri,type:'null',itemSchema,rootSchema,schema,...(0,_common.getMetaDefaultValue)(itemSchema,uri),...(0,_common.getMetaValue)(values,uri,itemSchema),...metaProps};const elements={...title,...description,field:{...(0,_common.getElementsFieldValue)(values,uri,itemSchema),...(0,_common.getElementsFieldProps)(params,uri),id:uri}};return{meta,elements};}}}}}function transformBooleanForEnum(itemSchema,schema,rootSchema,values,{parentUri='#',uri='#/',...params}){log('transformBooleanForEnum');const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(itemSchema);const description=(0,_common.getDescription)(itemSchema);const items=(0,_common.getEnum)(itemSchema);const selectedItems=(0,_common.getSelectedItems)(values,uri);const meta={parentUri:(0,_common.getParentUri)(parentUri),uri,type:'boolean',itemSchema,rootSchema,schema,selectedItems,...metaProps};const elements={...title,...description,enum:{items,selectedItems,id:uri}};return{meta,elements};}function transformBooleanForAnyOf(itemSchema,schema,rootSchema,values,{parentUri='#',uri='#/',...params}){log('transformBooleanForAnyOf');const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(itemSchema);const description=(0,_common.getDescription)(itemSchema);const{anyOf}=itemSchema;const items=anyOf.map((schema,index)=>(0,_transformSchema.transformArraySchemaBoolean)(itemSchema,rootSchema,values,{...params,parentUri,index}));const selectedItems=(0,_common.getSelectedItems)(values,uri);const meta={parentUri:(0,_common.getParentUri)(parentUri),uri,type:'boolean',itemSchema,rootSchema,schema,selectedItems,...metaProps};const elements={...title,...description,anyOf:{items,selectedItems,id:uri}};return{meta,elements};}function transformBooleanForOneOf(itemSchema,schema,rootSchema,values,{parentUri='#',uri='#/',...params}){log('transformBooleanForOneOf');const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(itemSchema);const description=(0,_common.getDescription)(itemSchema);const{oneOf}=itemSchema;const items=oneOf.map((schema,index)=>(0,_transformSchema.transformArraySchemaBoolean)(itemSchema,rootSchema,values,{...params,parentUri,index}));const selectedItems=(0,_common.getSelectedItems)(values,uri);const meta={parentUri:(0,_common.getParentUri)(parentUri),uri,type:'boolean',itemSchema,rootSchema,schema,selectedItems,...metaProps};const elements={...title,...description,oneOf:{items,selectedItems,id:uri}};return{meta,elements};}function transformBooleanForAllOf(itemSchema,schema,rootSchema,values,{parentUri='#',uri='#/',...params}){log('transformBooleanForAllOf');const{allOf,...rest}=itemSchema;const item=allOf.reduce((accumulator,schema)=>({...accumulator,...schema}),rest);const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(item);const description=(0,_common.getDescription)(item);const meta={parentUri:(0,_common.getParentUri)(parentUri),uri,type:'boolean',itemSchema,rootSchema,schema,...(0,_common.getMetaDefaultValue)(item,uri),...(0,_common.getMetaValue)(values,uri,item),...metaProps};const elements={...title,...description,field:{...(0,_common.getElementsFieldValue)(values,uri,item),...(0,_common.getElementsFieldProps)(params,uri),id:uri}};return{meta,elements};}function transformBoolean(itemSchema,schema,rootSchema,values,{parentUri='#',uri='#/',...params}){log('transformBoolean');if((0,_common.hasEnum)(itemSchema)){return transformBooleanForEnum(itemSchema,schema,rootSchema,values,{parentUri,...params});}else{if((0,_common.hasAnyOf)(itemSchema)){return transformBooleanForAnyOf(itemSchema,schema,rootSchema,values,{parentUri,...params});}else{if((0,_common.hasOneOf)(itemSchema)){return transformBooleanForOneOf(itemSchema,schema,rootSchema,values,{parentUri,...params});}else{if((0,_common.hasAllOf)(itemSchema)){return transformBooleanForAllOf(itemSchema,schema,rootSchema,values,{parentUri,...params});}else{const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(itemSchema);const description=(0,_common.getDescription)(itemSchema);const meta={parentUri:(0,_common.getParentUri)(parentUri),uri,type:'boolean',itemSchema,rootSchema,schema,...(0,_common.getMetaDefaultValue)(itemSchema,uri),...(0,_common.getMetaValue)(values,uri,itemSchema),...metaProps};const elements={...title,...description,field:{...(0,_common.getElementsFieldValue)(values,uri,itemSchema),...(0,_common.getElementsFieldProps)(params,uri),id:uri}};return{meta,elements};}}}}}function transformObjectForEnum(itemSchema,schema,rootSchema,values,{parentUri='#',uri='#/',...params}){log('transformObjectForEnum');const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(itemSchema);const description=(0,_common.getDescription)(itemSchema);const items=(0,_common.getEnum)(itemSchema);const selectedItems=(0,_common.getSelectedItems)(values,uri);const minProperties=(0,_common.getMinProperties)(itemSchema);const maxProperties=(0,_common.getMaxProperties)(itemSchema);const meta={parentUri:(0,_common.getParentUri)(parentUri),uri,type:'object',itemSchema,rootSchema,schema,...minProperties,...maxProperties,...(0,_common.getMetaDefaultValue)(itemSchema,uri),...(0,_common.getMetaValue)(values,uri,itemSchema),selectedItems,...metaProps};const elements={...title,...description,enum:{items,...minProperties,...maxProperties,selectedItems,id:uri}};return{meta,elements};}function transformObjectForAnyOf(itemSchema,schema,rootSchema,values,{parentUri='#',uri='#/',...params}){log('transformObjectForAnyOf');const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(itemSchema);const description=(0,_common.getDescription)(itemSchema);const{anyOf}=itemSchema;const items=anyOf.map((schema,index)=>(0,_transformSchema.transformArraySchemaObject)(itemSchema,rootSchema,values,{...params,parentUri,index}));const selectedItems=(0,_common.getSelectedItems)(values,uri);const minProperties=(0,_common.getMinProperties)(itemSchema);const maxProperties=(0,_common.getMaxProperties)(itemSchema);const meta={parentUri:(0,_common.getParentUri)(parentUri),uri,type:'object',itemSchema,rootSchema,schema,...minProperties,...maxProperties,...(0,_common.getMetaDefaultValue)(itemSchema,uri),...(0,_common.getMetaValue)(values,uri,itemSchema),selectedItems,...metaProps};const elements={...title,...description,anyOf:{items,...minProperties,...maxProperties,selectedItems,id:uri}};return{meta,elements};}function transformObjectForOneOf(itemSchema,schema,rootSchema,values,{parentUri='#',uri='#/',...params}){log('transformObjectForOneOf');const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(itemSchema);const description=(0,_common.getDescription)(itemSchema);const{oneOf}=itemSchema;const items=oneOf.map((schema,index)=>(0,_transformSchema.transformArraySchemaObject)(itemSchema,rootSchema,values,{...params,parentUri,index}));const selectedItems=(0,_common.getSelectedItems)(values,uri);const minProperties=(0,_common.getMinProperties)(itemSchema);const maxProperties=(0,_common.getMaxProperties)(itemSchema);const meta={parentUri:(0,_common.getParentUri)(parentUri),uri,type:'object',itemSchema,rootSchema,schema,...minProperties,...maxProperties,...(0,_common.getMetaDefaultValue)(itemSchema,uri),...(0,_common.getMetaValue)(values,uri,itemSchema),selectedItems,...metaProps};const elements={...title,...description,oneOf:{items,...minProperties,...maxProperties,selectedItems,id:uri}};return{meta,elements};}function transformObjectForAllOf(itemSchema,schema,rootSchema,values,{parentUri='#',uri='#/',...params}){log('transformObjectForAllOf');const{allOf,...rest}=itemSchema;const item=allOf.reduce((accumulator,schema)=>({...accumulator,...schema}),rest);const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(item);const description=(0,_common.getDescription)(item);const minProperties=(0,_common.getMinProperties)(item);const maxProperties=(0,_common.getMaxProperties)(item);const meta={parentUri:(0,_common.getParentUri)(parentUri),uri,type:'object',itemSchema,rootSchema,schema,...minProperties,...maxProperties,...(0,_common.getMetaDefaultValue)(item,uri),...(0,_common.getMetaValue)(values,uri,item),...metaProps};const{properties={},required=[]}=item;const elements={...title,...description,fields:Object.entries(properties).map(([key,schema])=>(0,_transformSchema.transformObjectSchema)(item,rootSchema,values,{...params,required:required.includes(key),parentUri,key}))};return{meta,elements};}function transformObject(itemSchema,schema,rootSchema,values,{parentUri='#',uri='#/',...params}){log('transformObject');if((0,_common.hasEnum)(itemSchema)){return transformObjectForEnum(itemSchema,schema,rootSchema,values,{parentUri,...params});}else{if((0,_common.hasAnyOf)(itemSchema)){return transformObjectForAnyOf(itemSchema,schema,rootSchema,values,{parentUri,...params});}else{if((0,_common.hasOneOf)(itemSchema)){return transformObjectForOneOf(itemSchema,schema,rootSchema,values,{parentUri,...params});}else{if((0,_common.hasAllOf)(itemSchema)){return transformObjectForAllOf(itemSchema,schema,rootSchema,values,{parentUri,...params});}else{const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(itemSchema);const description=(0,_common.getDescription)(itemSchema);const minProperties=(0,_common.getMinProperties)(itemSchema);const maxProperties=(0,_common.getMaxProperties)(itemSchema);const meta={parentUri:(0,_common.getParentUri)(parentUri),uri,type:'object',itemSchema,rootSchema,schema,...minProperties,...maxProperties,...(0,_common.getMetaDefaultValue)(itemSchema,uri),...(0,_common.getMetaValue)(values,uri,itemSchema),...metaProps};const{properties={},required=[]}=schema;const elements={...title,...description,fields:Object.entries(properties).map(([key,schema])=>(0,_transformSchema.transformObjectSchema)(itemSchema,rootSchema,values,{...params,required:required.includes(key),parentUri,key}))};return{meta,elements};}}}}}function transformArrayForEnum(itemSchema,schema,rootSchema,values,{parentUri='#',uri='#/',...params}){log('transformArrayForEnum');const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(itemSchema);const description=(0,_common.getDescription)(itemSchema);const items=(0,_common.getEnum)(itemSchema);const selectedItems=(0,_common.getSelectedItems)(values,uri);const minItems=(0,_common.getMinItems)(schema);const maxItems=(0,_common.getMaxItems)(schema);const hasUniqueItems=(0,_common.getHasUniqueItems)(schema);const maxContains=(0,_common.getMaxContains)(schema);const minContains=(0,_common.getMinContains)(schema);const meta={parentUri:(0,_common.getParentUri)(parentUri),uri,type:'array',itemSchema,rootSchema,schema,...minItems,...maxItems,...hasUniqueItems,...maxContains,...minContains,selectedItems,...metaProps};const elements={...title,...description,enum:{items,...minItems,...maxItems,...hasUniqueItems,...maxContains,...minContains,selectedItems,id:uri}};return{meta,elements};}function transformArrayForAnyOf(itemSchema,schema,rootSchema,values,{parentUri='#',uri='#/',...params}){log('transformArrayForAnyOf');const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(itemSchema);const description=(0,_common.getDescription)(itemSchema);const{anyOf}=itemSchema;const items=anyOf.map((schema,index)=>(0,_transformSchema.transformArraySchemaArray)(itemSchema,rootSchema,values,{...params,parentUri,index}));const selectedItems=(0,_common.getSelectedItems)(values,uri);const minItems=(0,_common.getMinItems)(schema);const maxItems=(0,_common.getMaxItems)(schema);const hasUniqueItems=(0,_common.getHasUniqueItems)(schema);const maxContains=(0,_common.getMaxContains)(schema);const minContains=(0,_common.getMinContains)(schema);const meta={parentUri:(0,_common.getParentUri)(parentUri),uri,type:'array',itemSchema,rootSchema,schema,...minItems,...maxItems,...hasUniqueItems,...maxContains,...minContains,selectedItems,...metaProps};const elements={...title,...description,anyOf:{items,...minItems,...maxItems,...hasUniqueItems,...maxContains,...minContains,selectedItems,id:uri}};return{meta,elements};}function transformArrayForOneOf(itemSchema,schema,rootSchema,values,{parentUri='#',uri='#/',...params}){log('transformArrayForOneOf');const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(itemSchema);const description=(0,_common.getDescription)(itemSchema);const{oneOf}=itemSchema;const items=oneOf.map((schema,index)=>(0,_transformSchema.transformArraySchemaArray)(itemSchema,rootSchema,values,{...params,parentUri,index}));const selectedItems=(0,_common.getSelectedItems)(values,uri);const minItems=(0,_common.getMinItems)(schema);const maxItems=(0,_common.getMaxItems)(schema);const hasUniqueItems=(0,_common.getHasUniqueItems)(schema);const maxContains=(0,_common.getMaxContains)(schema);const minContains=(0,_common.getMinContains)(schema);const meta={parentUri:(0,_common.getParentUri)(parentUri),uri,type:'array',itemSchema,rootSchema,schema,...minItems,...maxItems,...hasUniqueItems,...maxContains,...minContains,selectedItems,...metaProps};const elements={...title,...description,oneOf:{items,...minItems,...maxItems,...hasUniqueItems,...maxContains,...minContains,selectedItems,id:uri}};return{meta,elements};}function transformArrayForAllOf(itemSchema,schema,rootSchema,values,{parentUri='#',uri='#/',...params}){log('transformArrayForAllOf');const{allOf,...rest}=itemSchema;const item=allOf.reduce((accumulator,schema)=>({...accumulator,...schema}),rest);const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(item);const description=(0,_common.getDescription)(item);const minItems=(0,_common.getMinItems)(item);const maxItems=(0,_common.getMaxItems)(item);const hasUniqueItems=(0,_common.getHasUniqueItems)(item);const maxContains=(0,_common.getMaxContains)(item);const minContains=(0,_common.getMinContains)(item);const meta={parentUri:(0,_common.getParentUri)(parentUri),uri,type:'array',itemSchema,rootSchema,schema,...minItems,...maxItems,...hasUniqueItems,...maxContains,...minContains,...(0,_common.getMetaDefaultValue)(item,uri),...(0,_common.getMetaValue)(values,uri,item),...metaProps};const{items=[]}=item;if((0,_common.isArray)(items)){const elements={...title,...description,fields:items.map((schema,index)=>(0,_transformSchema.transformArraySchema)(item,rootSchema,values,{...params,parentUri:uri,index}))};return{meta,elements};}const elements={...title,...description,fields:[transform(items,rootSchema,values,params)]};return{meta,elements};}function transformArray(itemSchema,schema,rootSchema,values,{parentUri='#',uri='#/',...params}){log('transformArray',schema);if((0,_common.hasEnum)(itemSchema)){return transformArrayForEnum(itemSchema,schema,rootSchema,values,{parentUri,...params});}else{if((0,_common.hasAnyOf)(itemSchema)){return transformArrayForAnyOf(itemSchema,schema,rootSchema,values,{parentUri,...params});}else{if((0,_common.hasOneOf)(itemSchema)){return transformArrayForOneOf(itemSchema,schema,rootSchema,values,{parentUri,...params});}else{if((0,_common.hasAllOf)(itemSchema)){return transformArrayForAllOf(itemSchema,schema,rootSchema,values,{parentUri,...params});}else{const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(itemSchema);const description=(0,_common.getDescription)(itemSchema);const minItems=(0,_common.getMinItems)(schema);const maxItems=(0,_common.getMaxItems)(schema);const hasUniqueItems=(0,_common.getHasUniqueItems)(schema);const maxContains=(0,_common.getMaxContains)(schema);const minContains=(0,_common.getMinContains)(schema);const meta={parentUri:(0,_common.getParentUri)(parentUri),uri,type:'array',itemSchema,rootSchema,schema,...minItems,...maxItems,...hasUniqueItems,...maxContains,...minContains,...(0,_common.getMetaDefaultValue)(itemSchema,uri),...(0,_common.getMetaValue)(values,uri,itemSchema),...metaProps};const{items=[]}=schema;if((0,_common.isArray)(items)){const elements={...title,...description,fields:items.map((schema,index)=>(0,_transformSchema.transformArraySchema)(itemSchema,rootSchema,values,{...params,parentUri:uri,index}))};return{meta,elements};}const elements={...title,...description,fields:[transform(items,rootSchema,values,params)]};return{meta,elements};}}}}}function transformNumberForEnum(itemSchema,schema,rootSchema,values,{parentUri='#',uri='#/',...params}){log('transformNumberForEnum');const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(itemSchema);const description=(0,_common.getDescription)(itemSchema);const items=(0,_common.getEnum)(itemSchema);const selectedItems=(0,_common.getSelectedItems)(values,uri);const isExclusiveMin=(0,_common.getIsExclusiveMin)(schema);const isExclusiveMax=(0,_common.getIsExclusiveMax)(schema);const min=(0,_common.getMin)(schema);const max=(0,_common.getMax)(schema);const step=(0,_common.getStep)(schema);const meta={parentUri:(0,_common.getParentUri)(parentUri),uri,type:'number',itemSchema,rootSchema,schema,...isExclusiveMin,...isExclusiveMax,...min,...max,...step,selectedItems,...metaProps};const elements={...title,...description,enum:{items,...min,...max,...step,selectedItems,id:uri}};return{meta,elements};}function transformNumberForAnyOf(itemSchema,schema,rootSchema,values,{parentUri='#',uri='#/',...params}){log('transformNumberForAnyOf');const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(itemSchema);const description=(0,_common.getDescription)(itemSchema);const{anyOf}=itemSchema;const items=anyOf.map((schema,index)=>(0,_transformSchema.transformArraySchemaNumber)(itemSchema,rootSchema,values,{...params,parentUri,index}));const selectedItems=(0,_common.getSelectedItems)(values,uri);const isExclusiveMin=(0,_common.getIsExclusiveMin)(schema);const isExclusiveMax=(0,_common.getIsExclusiveMax)(schema);const min=(0,_common.getMin)(schema);const max=(0,_common.getMax)(schema);const step=(0,_common.getStep)(schema);const meta={parentUri:(0,_common.getParentUri)(parentUri),uri,type:'number',itemSchema,rootSchema,schema,...isExclusiveMin,...isExclusiveMax,...min,...max,...step,selectedItems,...metaProps};const elements={...title,...description,anyOf:{items,...min,...max,...step,selectedItems,id:uri}};return{meta,elements};}function transformNumberForOneOf(itemSchema,schema,rootSchema,values,{parentUri='#',uri='#/',...params}){log('transformNumberForOneOf');const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(itemSchema);const description=(0,_common.getDescription)(itemSchema);const{oneOf}=itemSchema;const items=oneOf.map((schema,index)=>(0,_transformSchema.transformArraySchemaNumber)(itemSchema,rootSchema,values,{...params,parentUri,index}));const selectedItems=(0,_common.getSelectedItems)(values,uri);const isExclusiveMin=(0,_common.getIsExclusiveMin)(schema);const isExclusiveMax=(0,_common.getIsExclusiveMax)(schema);const min=(0,_common.getMin)(schema);const max=(0,_common.getMax)(schema);const step=(0,_common.getStep)(schema);const meta={parentUri:(0,_common.getParentUri)(parentUri),uri,type:'number',itemSchema,rootSchema,schema,...isExclusiveMin,...isExclusiveMax,...min,...max,...step,selectedItems,...metaProps};const elements={...title,...description,oneOf:{items,...min,...max,...step,selectedItems,id:uri}};return{meta,elements};}function transformNumberForAllOf(itemSchema,schema,rootSchema,values,{parentUri='#',uri='#/',...params}){log('transformNumberForAllOf');const{allOf,...rest}=itemSchema;const item=allOf.reduce((accumulator,schema)=>({...accumulator,...schema}),rest);const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(item);const description=(0,_common.getDescription)(item);const isExclusiveMin=(0,_common.getIsExclusiveMin)(item);const isExclusiveMax=(0,_common.getIsExclusiveMax)(item);const min=(0,_common.getMin)(item);const max=(0,_common.getMax)(item);const step=(0,_common.getStep)(item);const meta={parentUri:(0,_common.getParentUri)(parentUri),uri,type:'number',itemSchema,rootSchema,schema,...isExclusiveMin,...isExclusiveMax,...min,...max,...step,...(0,_common.getMetaDefaultValue)(item,uri),...(0,_common.getMetaValue)(values,uri,item),...metaProps};const elements={...title,...description,field:{...min,...max,...step,...(0,_common.getElementsFieldValue)(values,uri,item),...(0,_common.getElementsFieldProps)(params,uri),id:uri}};return{meta,elements};}function transformNumber(itemSchema,schema,rootSchema,values,{parentUri='#',uri='#/',...params}){log('transformNumber');if((0,_common.hasEnum)(itemSchema)){return transformNumberForEnum(itemSchema,schema,rootSchema,values,{parentUri,...params});}else{if((0,_common.hasAnyOf)(itemSchema)){return transformNumberForAnyOf(itemSchema,schema,rootSchema,values,{parentUri,...params});}else{if((0,_common.hasOneOf)(itemSchema)){return transformNumberForOneOf(itemSchema,schema,rootSchema,values,{parentUri,...params});}else{if((0,_common.hasAllOf)(itemSchema)){return transformNumberForAllOf(itemSchema,schema,rootSchema,values,{parentUri,...params});}else{const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(itemSchema);const description=(0,_common.getDescription)(itemSchema);const isExclusiveMin=(0,_common.getIsExclusiveMin)(schema);const isExclusiveMax=(0,_common.getIsExclusiveMax)(schema);const min=(0,_common.getMin)(schema);const max=(0,_common.getMax)(schema);const step=(0,_common.getStep)(schema);const meta={parentUri:(0,_common.getParentUri)(parentUri),uri,type:'number',itemSchema,rootSchema,schema,...isExclusiveMin,...isExclusiveMax,...min,...max,...step,...(0,_common.getMetaDefaultValue)(itemSchema,uri),...(0,_common.getMetaValue)(values,uri,itemSchema),...metaProps};const elements={...title,...description,field:{...min,...max,...step,...(0,_common.getElementsFieldValue)(values,uri,itemSchema),...(0,_common.getElementsFieldProps)(params,uri),id:uri}};return{meta,elements};}}}}}function transformStringForEnum(itemSchema,schema,rootSchema,values,{parentUri='#',uri='#/',...params}){log('transformStringForEnum');const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(itemSchema);const description=(0,_common.getDescription)(itemSchema);const items=(0,_common.getEnum)(itemSchema);const selectedItems=(0,_common.getSelectedItems)(values,uri);const minLength=(0,_common.getMinLength)(schema);const maxLength=(0,_common.getMaxLength)(schema);const pattern=(0,_common.getPattern)(schema);const meta={parentUri:(0,_common.getParentUri)(parentUri),uri,type:'string',itemSchema,rootSchema,schema,...minLength,...maxLength,...pattern,selectedItems,...metaProps};const elements={...title,...description,enum:{items,...minLength,...maxLength,...pattern,selectedItems,id:uri}};return{meta,elements};}function transformStringForAnyOf(itemSchema,schema,rootSchema,values,{parentUri='#',uri='#/',...params}){log('transformStringForAnyOf');const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(itemSchema);const description=(0,_common.getDescription)(itemSchema);const{anyOf}=itemSchema;const items=anyOf.map((schema,index)=>(0,_transformSchema.transformArraySchemaString)(itemSchema,rootSchema,values,{...params,parentUri,index}));const selectedItems=(0,_common.getSelectedItems)(values,uri);const minLength=(0,_common.getMinLength)(schema);const maxLength=(0,_common.getMaxLength)(schema);const pattern=(0,_common.getPattern)(schema);const meta={parentUri:(0,_common.getParentUri)(parentUri),uri,type:'string',itemSchema,rootSchema,schema,...minLength,...maxLength,...pattern,selectedItems,...metaProps};const elements={...title,...description,anyOf:{items,...minLength,...maxLength,...pattern,selectedItems,id:uri}};return{meta,elements};}function transformStringForOneOf(itemSchema,schema,rootSchema,values,{parentUri='#',uri='#/',...params}){log('transformStringForOneOf');const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(itemSchema);const description=(0,_common.getDescription)(itemSchema);const{oneOf}=itemSchema;const items=oneOf.map((schema,index)=>(0,_transformSchema.transformArraySchemaString)(itemSchema,rootSchema,values,{...params,parentUri,index}));const selectedItems=(0,_common.getSelectedItems)(values,uri);const minLength=(0,_common.getMinLength)(schema);const maxLength=(0,_common.getMaxLength)(schema);const pattern=(0,_common.getPattern)(schema);const meta={parentUri:(0,_common.getParentUri)(parentUri),uri,type:'string',itemSchema,rootSchema,schema,...minLength,...maxLength,...pattern,selectedItems,...metaProps};const elements={...title,...description,oneOf:{items,...minLength,...maxLength,...pattern,selectedItems,id:uri}};return{meta,elements};}function transformStringForAllOf(itemSchema,schema,rootSchema,values,{parentUri='#',uri='#/',...params}){log('transformStringForAllOf');const{allOf,...rest}=itemSchema;const item=allOf.reduce((accumulator,schema)=>({...accumulator,...schema}),rest);const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(item);const description=(0,_common.getDescription)(item);const minLength=(0,_common.getMinLength)(item);const maxLength=(0,_common.getMaxLength)(item);const pattern=(0,_common.getPattern)(item);const meta={parentUri:(0,_common.getParentUri)(parentUri),uri,type:'string',itemSchema,rootSchema,schema,...minLength,...maxLength,...pattern,...(0,_common.getMetaDefaultValue)(item,uri),...(0,_common.getMetaValue)(values,uri,item),...metaProps};const elements={...title,...description,field:{...minLength,...maxLength,...pattern,...(0,_common.getElementsFieldValue)(values,uri,item),...(0,_common.getElementsFieldProps)(params,uri),id:uri}};return{meta,elements};}function transformString(itemSchema,schema,rootSchema,values,{parentUri='#',uri='#/',...params}){log('transformString');if((0,_common.hasEnum)(itemSchema)){return transformStringForEnum(itemSchema,schema,rootSchema,values,{parentUri,...params});}else{if((0,_common.hasAnyOf)(itemSchema)){return transformStringForAnyOf(itemSchema,schema,rootSchema,values,{parentUri,...params});}else{if((0,_common.hasOneOf)(itemSchema)){return transformStringForOneOf(itemSchema,schema,rootSchema,values,{parentUri,...params});}else{if((0,_common.hasAllOf)(itemSchema)){return transformStringForAllOf(itemSchema,schema,rootSchema,values,{parentUri,...params});}else{const metaProps=(0,_common.getMetaProps)(params,uri);const title=(0,_common.getTitle)(itemSchema);const description=(0,_common.getDescription)(itemSchema);const minLength=(0,_common.getMinLength)(schema);const maxLength=(0,_common.getMaxLength)(schema);const pattern=(0,_common.getPattern)(schema);const meta={parentUri:(0,_common.getParentUri)(parentUri),uri,type:'string',itemSchema,rootSchema,schema,...minLength,...maxLength,...pattern,...(0,_common.getMetaDefaultValue)(itemSchema,uri),...(0,_common.getMetaValue)(values,uri,itemSchema),...metaProps};const elements={...title,...description,field:{...minLength,...maxLength,...pattern,...(0,_common.getElementsFieldValue)(values,uri,itemSchema),...(0,_common.getElementsFieldProps)(params,uri),id:uri}};return{meta,elements};}}}}}function transform(itemSchema={},schema={},rootSchema={},values={},params={}){log('transform');const{type}=schema;switch(type){case'null':return transformNull(itemSchema,schema,rootSchema,values,params);case'boolean':return transformBoolean(itemSchema,schema,rootSchema,values,params);case'object':return transformObject(itemSchema,schema,rootSchema,values,params);case'array':return transformArray(itemSchema,schema,rootSchema,values,params);case'number':return transformNumber(itemSchema,schema,rootSchema,values,params);case'string':return transformString(itemSchema,schema,rootSchema,values,params);default:throw new Error('Schema does not conform to Instance Data Model, https://json-schema.org/draft/2019-09/json-schema-core.html#rfc.section.4.2.1');}}