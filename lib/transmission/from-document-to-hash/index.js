"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.getObject=getObject;exports.getArray=getArray;exports.getSchema=getSchema;exports.default=transform;exports.transformValue=void 0;var _debug=_interopRequireDefault(require("debug"));var _common=require("../common");function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}const{env:{DEBUG='shinkansen-transmission:*'}}=process;_debug.default.enable(DEBUG);const log=(0,_debug.default)('shinkansen-transmission:from-document-to-hash');function getObject({properties={}},parentUri,uri){return Reflect.get(properties,Object.keys(properties).find(key=>{const schemaUri=(0,_common.getUri)(parentUri,key);return uri===schemaUri;}));}function getArray({items=[]},parentUri,uri){return[].concat(items).find((schema,index)=>{const schemaUri=(0,_common.getUri)(parentUri,index);return uri===schemaUri;});}function getSchema(schema={},parentUri,uri){const{type}=schema;switch(type){case'object':return getObject(schema,parentUri,uri);case'array':return getArray(schema,parentUri,uri);default:return schema;}}const transformValue=schema=>(0,_common.isObject)(schema)?(0,_common.isConstValue)(schema)?(0,_common.toConstValue)(schema):(0,_common.isDefaultValue)(schema)?(0,_common.toDefaultValue)(schema):schema:schema;exports.transformValue=transformValue;function transformIndexFor(value,items){if(items.some(schema=>value===transformValue(schema))){const index=items.findIndex(schema=>value===transformValue(schema));return String(index);}return String(value);}function transform(document,schema={},values={},params={},parentUri='#',uri=(0,_common.getUri)(parentUri)){log('fromDocumentToHash');if((0,_common.isObject)(document)){return Object.entries(document).reduce((values,[key,value])=>{const schemaUri=(0,_common.getUri)(parentUri,key);return transform(value,getSchema(schema,parentUri,schemaUri),values,params,schemaUri,schemaUri);},values);}else{if((0,_common.isArray)(document)){return document.reduce((values,value,index)=>{const schemaUri=(0,_common.getUri)(parentUri,index);return transform(value,getSchema(schema,parentUri,schemaUri),values,params,schemaUri,schemaUri);},values);}else{if((0,_common.hasEnum)(schema)){const items=(0,_common.getEnum)(schema);return{...values,[uri]:transformIndexFor(document,items)};}else{if((0,_common.hasAnyOf)(schema)){const items=(0,_common.getAnyOf)(schema);return{...values,[uri]:transformIndexFor(document,items)};}else{if((0,_common.hasOneOf)(schema)){const items=(0,_common.getOneOf)(schema);return{...values,[uri]:transformIndexFor(document,items)};}}}}}return{...values,[uri]:String(document)};}