"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.transformObjectSchemaNull=transformObjectSchemaNull;exports.transformObjectSchemaBoolean=transformObjectSchemaBoolean;exports.transformObjectSchemaObject=transformObjectSchemaObject;exports.transformObjectSchemaArray=transformObjectSchemaArray;exports.transformObjectSchemaString=transformObjectSchemaString;exports.transformObjectSchemaNumber=transformObjectSchemaNumber;exports.transformObjectSchema=transformObjectSchema;exports.transformArraySchemaNull=transformArraySchemaNull;exports.transformArraySchemaBoolean=transformArraySchemaBoolean;exports.transformArraySchemaObject=transformArraySchemaObject;exports.transformArraySchemaArray=transformArraySchemaArray;exports.transformArraySchemaString=transformArraySchemaString;exports.transformArraySchemaNumber=transformArraySchemaNumber;exports.transformArraySchema=transformArraySchema;exports.transformNull=transformNull;exports.transformBoolean=transformBoolean;exports.transformObject=transformObject;exports.transformArray=transformArray;exports.transformString=transformString;exports.transformNumber=transformNumber;exports.default=transform;exports.toNumber=exports.toString=exports.toBoolean=exports.toNull=void 0;var _common=require("../common");const toNull=v=>{if(v===null||v==='null')return null;throw new Error('Invalid `null`');};exports.toNull=toNull;const toBoolean=v=>{if(typeof v==='boolean')return v;if(v==='true')return true;if(v==='false')return false;throw new Error('Invalid `boolean`');};exports.toBoolean=toBoolean;const toString=v=>{if(typeof v==='string')return v;if(typeof v==='number')return String(v);return JSON.stringify(v);};exports.toString=toString;const toNumber=v=>{if(typeof v==='number')return v;const n=Number(v);if(!isNaN(n))return n;throw new Error('Invalid `number`');};exports.toNumber=toNumber;function transformObjectSchemaNull(schema,values,{uri:parentUri,key:fieldKey}){const uri=(0,_common.getUri)(parentUri,fieldKey);if(Reflect.has(values,uri)){if((0,_common.hasEnum)(schema)){const items=(0,_common.getEnum)(schema);const index=toNull(Reflect.get(values,uri));const value=items[index];return toNull(value);}return toNull(Reflect.get(values,uri));}}function transformObjectSchemaBoolean(schema,values,{uri:parentUri,key:fieldKey}){const uri=(0,_common.getUri)(parentUri,fieldKey);if(Reflect.has(values,uri)){if((0,_common.hasEnum)(schema)){const items=(0,_common.getEnum)(schema);const index=toBoolean(Reflect.get(values,uri));const value=items[index];return toBoolean(value);}return toBoolean(Reflect.get(values,uri));}}function transformObjectSchemaObject({properties={}},values,{uri:parentUri,key:fieldKey}){const uri=(0,_common.getUri)(parentUri,fieldKey);return Object.entries(properties).reduce((accumulator,[key,schema])=>({...accumulator,[key]:transformObjectSchema(schema,values,{uri,key})}),{});}function transformObjectSchemaArray({items=[]},values,{uri:parentUri,key:fieldKey}){const uri=(0,_common.getUri)(parentUri,fieldKey);return Object.keys(values).filter(key=>key.startsWith(uri)).reduce((accumulator,key)=>{const value=key.slice(uri.length+1);const index=Number(value.includes('/')?value.slice(0,value.indexOf('/')):value);if(!isNaN(index)){const schema=Array.isArray(items)?items[index]:items;accumulator[index]=transformArraySchema(schema,values,{uri,index});}return accumulator;},[]);}function transformObjectSchemaString(schema,values,{uri:parentUri,key:fieldKey}){const uri=(0,_common.getUri)(parentUri,fieldKey);if(Reflect.has(values,uri)){if((0,_common.hasEnum)(schema)){const items=(0,_common.getEnum)(schema);const index=toNumber(Reflect.get(values,uri));const value=items[index];return toString(value);}return toString(Reflect.get(values,uri));}}function transformObjectSchemaNumber(schema,values,{uri:parentUri,key:fieldKey}){const uri=(0,_common.getUri)(parentUri,fieldKey);if(Reflect.has(values,uri)){if((0,_common.hasEnum)(schema)){const items=(0,_common.getEnum)(schema);const index=toNumber(Reflect.get(values,uri));const value=items[index];return toNumber(value);}return toNumber(Reflect.get(values,uri));}}function transformObjectSchema(schema={},values={},params={}){const{type}=schema;switch(type){case'null':return transformObjectSchemaNull(schema,values,params);case'boolean':return transformObjectSchemaBoolean(schema,values,params);case'object':return transformObjectSchemaObject(schema,values,params);case'array':return transformObjectSchemaArray(schema,values,params);case'string':return transformObjectSchemaString(schema,values,params);case'number':return transformObjectSchemaNumber(schema,values,params);default:throw new Error('Schema does not conform to Instance Data Model, https://json-schema.org/draft/2019-09/json-schema-core.html#rfc.section.4.2.1');}}function transformArraySchemaNull(schema,values,{uri:parentUri,index:arrayIndex}){const uri=(0,_common.getUri)(parentUri,arrayIndex);if(Reflect.has(values,uri)){if((0,_common.hasEnum)(schema)){const items=(0,_common.getEnum)(schema);const index=toNumber(Reflect.get(values,uri));const value=items[index];return toNull(value);}return toNull(Reflect.get(values,uri));}}function transformArraySchemaBoolean(schema,values,{uri:parentUri,index:arrayIndex}){const uri=(0,_common.getUri)(parentUri,arrayIndex);if(Reflect.has(values,uri)){if((0,_common.hasEnum)(schema)){const items=(0,_common.getEnum)(schema);const index=toNumber(Reflect.get(values,uri));const value=items[index];return toBoolean(value);}return toBoolean(Reflect.get(values,uri));}}function transformArraySchemaObject({properties={}},values,{uri:parentUri,index:arrayIndex}){const uri=(0,_common.getUri)(parentUri,arrayIndex);return Object.entries(properties).reduce((accumulator,[key,schema])=>({...accumulator,[key]:transformObjectSchema(schema,values,{uri,key})}),{});}function transformArraySchemaArray({items=[]},values,{uri:parentUri,index:arrayIndex}){const uri=(0,_common.getUri)(parentUri,arrayIndex);return Object.keys(values).filter(key=>key.startsWith(uri)).reduce((accumulator,key)=>{const value=key.slice(uri.length+1);const index=Number(value.includes('/')?value.slice(0,value.indexOf('/')):value);if(!isNaN(index)){const schema=Array.isArray(items)?items[index]:items;accumulator[index]=transformArraySchema(schema,values,{uri,index});}return accumulator;},[]);}function transformArraySchemaString(schema,values,{uri:parentUri,index:arrayIndex}){const uri=(0,_common.getUri)(parentUri,arrayIndex);if(Reflect.has(values,uri)){if((0,_common.hasEnum)(schema)){const items=(0,_common.getEnum)(schema);const index=toNumber(Reflect.get(values,uri));const value=items[index];return toString(value);}return toString(Reflect.get(values,uri));}}function transformArraySchemaNumber(schema,values,{uri:parentUri,index:arrayIndex}){const uri=(0,_common.getUri)(parentUri,arrayIndex);if(Reflect.has(values,uri)){if((0,_common.hasEnum)(schema)){const items=(0,_common.getEnum)(schema);const index=toNumber(Reflect.get(values,uri));const value=items[index];return toNumber(value);}return toNumber(Reflect.get(values,uri));}}function transformArraySchema(schema={},values={},params={}){const{type}=schema;switch(type){case'null':return transformArraySchemaNull(schema,values,params);case'boolean':return transformArraySchemaBoolean(schema,values,params);case'object':return transformArraySchemaObject(schema,values,params);case'array':return transformArraySchemaArray(schema,values,params);case'string':return transformArraySchemaString(schema,values,params);case'number':return transformArraySchemaNumber(schema,values,params);default:throw new Error('Schema does not conform to Instance Data Model, https://json-schema.org/draft/2019-09/json-schema-core.html#rfc.section.4.2.1');}}function transformNull(schema,values){const uri=(0,_common.getUri)();if(Reflect.has(values,uri)){if((0,_common.hasEnum)(schema)){const items=(0,_common.getEnum)(schema);const index=toNumber(Reflect.get(values,uri));const value=items[index];return toNull(value);}return toNull(Reflect.get(values,uri));}}function transformBoolean(schema,values){const uri=(0,_common.getUri)();if(Reflect.has(values,uri)){if((0,_common.hasEnum)(schema)){const items=(0,_common.getEnum)(schema);const index=toNumber(Reflect.get(values,uri));const value=items[index];return toBoolean(value);}return toBoolean(Reflect.get(values,uri));}}function transformObject({properties={}},values){const uri=(0,_common.getUri)();return Object.entries(properties).reduce((accumulator,[key,schema])=>({...accumulator,[key]:transformObjectSchema(schema,values,{uri,key})}),{});}function transformArray({items=[]},values){const uri=(0,_common.getUri)();return Object.keys(values).filter(key=>key.startsWith(uri)).reduce((accumulator,key)=>{const value=key.slice(uri.length);const index=Number(value.includes('/')?value.slice(0,value.indexOf('/')):value);if(!isNaN(index)){const schema=Array.isArray(items)?items[index]:items;accumulator[index]=transformArraySchema(schema,values,{uri,index});}return accumulator;},[]);}function transformString(schema,values){const uri=(0,_common.getUri)();if(Reflect.has(values,uri)){if((0,_common.hasEnum)(schema)){const items=(0,_common.getEnum)(schema);const index=toNumber(Reflect.get(values,uri));const value=items[index];return toString(value);}return toString(Reflect.get(values,uri));}}function transformNumber(schema,values){const uri=(0,_common.getUri)();if(Reflect.has(values,uri)){if((0,_common.hasEnum)(schema)){const items=(0,_common.getEnum)(schema);const index=toNumber(Reflect.get(values,uri));const value=items[index];return toNumber(value);}return toNumber(Reflect.get(values,uri));}}function transform(rootSchema={},values={}){const{type}=rootSchema;switch(type){case'null':return transformNull(rootSchema,values);case'boolean':return transformBoolean(rootSchema,values);case'object':return transformObject(rootSchema,values);case'array':return transformArray(rootSchema,values);case'number':return transformNumber(rootSchema,values);case'string':return transformString(rootSchema,values);default:throw new Error('Schema does not conform to Instance Data Model, https://json-schema.org/draft/2019-09/json-schema-core.html#rfc.section.4.2.1');}}